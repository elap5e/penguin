syntax = "proto3";

import "daemon/channel/pb/message_common.proto";

option go_package = "github.com/elap5e/penguin/daemon/channel/pb";

// Message generated by proto-message-gen. DO NOT EDIT.
// source: tencent.p1298im.group_pro_proto.synclogic.C72451synclogic
//
// SyncLogic is the message type for the C72451synclogic.
message SyncLogic {
  // ChannelMsg is the message type for the ChannelMsg.
  message ChannelMsg {
    uint64 guild_id                = 1; // guild_id
    uint64 channel_id              = 2; // channel_id
    uint32 result                  = 3; // result
    uint64 rsp_begin_seq           = 4; // rsp_begin_seq
    uint64 rsp_end_seq             = 5; // rsp_end_seq
    repeated Common.Msg msgs = 6; // rpt_msgs
  }
  // ChannelMsgReq is the message type for the ChannelMsgReq.
  message ChannelMsgReq {
    ChannelParam channel_param = 1; // channel_param
    uint32 with_version_flag   = 2; // with_version_flag
    uint32 direct_message_flag = 3; // direct_message_flag
    uint32 pull_direction      = 4; // pull_direction
  }
  // ChannelMsgRsp is the message type for the ChannelMsgRsp.
  message ChannelMsgRsp {
    uint32 result            = 1; // result
    bytes err_msg            = 2; // err_msg
    ChannelMsg channel_msg   = 3; // channel_msg
    uint32 with_version_flag = 4; // with_version_flag
    uint64 get_msg_time      = 5; // get_msg_time
  }
  // ChannelNode is the message type for the ChannelNode.
  message ChannelNode {
    uint64 channel_id          = 1; // channel_id
    uint64 msg_seq             = 2; // msg_seq
    uint64 cnt_seq             = 3; // cnt_seq
    uint64 msg_time            = 4; // msg_time
    uint64 member_read_msg_seq = 5; // member_read_msg_seq
    uint64 member_read_cnt_seq = 6; // member_read_cnt_seq
    uint32 msg_notify_type     = 7; // msg_notify_type
    bytes channel_name         = 8; // channel_name
    uint32 channel_type        = 9; // channel_type
    bytes msg_meta             = 10; // msg_meta
    bytes read_msg_meta        = 11; // read_msg_meta
    uint32 event_time          = 12; // event_time
    MsgListTab msg_list_tab    = 13; // msg_list_tab
  }
  // ChannelParam is the message type for the ChannelParam.
  message ChannelParam {
    uint64 guild_id         = 1; // guild_id
    uint64 channel_id       = 2; // channel_id
    uint64 begin_seq        = 3; // begin_seq
    uint64 end_seq          = 4; // end_seq
    uint64 msg_time         = 5; // msg_time
    repeated uint64 version = 6; // rpt_version
    repeated MsgCond seqs   = 7; // seqs
    uint64 max_seq_local    = 8; // max_seq_local
  }
  // DirectMessageSource is the message type for the DirectMessageSource.
  message DirectMessageSource {
    uint64 tiny_id     = 1; // tiny_id
    uint64 guild_id    = 2; // guild_id
    bytes guild_name   = 3; // guild_name
    bytes member_name  = 4; // member_name
    bytes nick_name    = 5; // nick_name
    uint32 member_type = 6; // member_type
  }
  // FeedsEventNode is the message type for the FeedsEventNode.
  message FeedsEventNode {
    uint64 is_valid        = 1; // is_valid
    uint64 unread_num      = 2; // unread_num
    bytes msg_summary      = 3; // msg_summary
    uint64 last_event_time = 4; // last_event_time
    bytes last_feed_id     = 5; // last_feed_id
  }
  // FirstViewMsg is the message type for the FirstViewMsg.
  message FirstViewMsg {
    uint32 push_flag                              = 1; // push_flag
    uint32 seq                                    = 2; // seq
    repeated GuildNode guild_nodes                = 3; // rpt_guild_nodes
    repeated ChannelMsg channel_msgs              = 4; // rpt_channel_msgs
    uint64 get_msg_time                           = 5; // get_msg_time
    repeated GuildNode direct_message_guild_nodes = 6; // direct_message_guild_nodes
  }
  // FirstViewReq is the message type for the FirstViewReq.
  message FirstViewReq {
    uint64 last_msg_time       = 1; // last_msg_time
    uint32 udc_flag            = 2; // udc_flag
    uint32 seq                 = 3; // seq
    uint32 direct_message_flag = 4; // direct_message_flag
    uint32 no_need_msg         = 5; // no_need_msg
  }
  // FirstViewRsp is the message type for the FirstViewRsp.
  message FirstViewRsp {
    uint32 result                     = 1; // result
    bytes err_msg                     = 2; // err_msg
    uint32 seq                        = 3; // seq
    uint32 udc_flag                   = 4; // udc_flag
    uint32 guild_count                = 5; // guild_count
    uint64 self_tinyid                = 6; // self_tinyid
    uint32 direct_message_switch      = 7; // direct_message_switch
    uint32 direct_message_guild_count = 8; // direct_message_guild_count
    FeedsEventNode feeds_event_node   = 9; // feeds_event_node
  }
  // GuildNode is the message type for the GuildNode.
  message GuildNode {
    uint64 guild_id                    = 1; // guild_id
    uint64 guild_code                  = 2; // guild_code
    repeated ChannelNode channel_nodes = 3; // rpt_channel_nodes
    bytes guild_name                   = 4; // guild_name
    DirectMessageSource peer_source    = 5; // peer_source
    uint32 huge_flag                   = 6; // huge_flag
    uint64 face_seq                    = 7; // face_seq
  }
  // MsgCond is the message type for the MsgCond.
  message MsgCond {
    uint64 msg_seq       = 1; // msg_seq
    uint64 event_version = 2; // event_version
  }
  // MsgListTab is the message type for the MsgListTab.
  message MsgListTab {
    uint32 is_in_list    = 1; // is_in_list
    uint64 top_timestamp = 2; // top_timestamp
  }
  // MultiChannelMsg is the message type for the MultiChannelMsg.
  message MultiChannelMsg {
    uint32 push_flag                 = 1; // push_flag
    uint32 seq                       = 2; // seq
    repeated ChannelMsg channel_msgs = 3; // rpt_channel_msgs
    uint64 get_msg_time              = 4; // get_msg_time
  }
  // MultiChannelMsgReq is the message type for the MultiChannelMsgReq.
  message MultiChannelMsgReq {
    repeated ChannelParam channel_params = 1; // rpt_channel_params
    uint32 seq                           = 2; // seq
    uint32 direct_message_flag           = 3; // direct_message_flag
  }
  // MultiChannelMsgRsp is the message type for the MultiChannelMsgRsp.
  message MultiChannelMsgRsp {
    uint32 result = 1; // result
    bytes err_msg = 2; // err_msg
    uint32 seq    = 3; // seq
  }
  // ReqBody is the message type for the ReqBody.
  message ReqBody {
    ChannelParam channel_param = 1; // channel_param
    uint32 direct_message_flag = 2; // direct_message_flag
  }
  // RspBody is the message type for the RspBody.
  message RspBody {
    uint32 result          = 1; // result
    bytes err_msg          = 2; // err_msg
    ChannelMsg channel_msg = 3; // channel_msg
  }
}
