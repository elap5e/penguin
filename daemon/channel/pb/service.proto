syntax = "proto3";

import "daemon/channel/pb/service_common.proto";

option go_package = "github.com/elap5e/penguin/daemon/channel/pb";

// Message generated by proto-message-gen. DO NOT EDIT.
// source: tencent.p1318im.group_pro_proto.msgpush.C73141servtype
//
// ChannelService is the message type for the C73141servtype.
message ChannelService {
  // AppChannelMsg is the message type for the AppChannelMsg.
  message AppChannelMsg {
    string summary        = 1; // summary
    uint64 expire_time_ms = 3; // expire_time_ms
    uint32 schema_type    = 4; // schema_type
    string schema         = 5; // schema
  }
  // CategoryChannelInfo is the message type for the CategoryChannelInfo.
  message CategoryChannelInfo {
    uint32 channel_index = 1; // uint32_channel_index
    uint64 channel_id    = 2; // uint64_channel_id
  }
  // CategoryInfo is the message type for the CategoryInfo.
  message CategoryInfo {
    uint32 category_index                         = 1; // uint32_category_index
    repeated CategoryChannelInfo msg_channel_info = 2; // rpt_msg_channel_info
    bytes category_name                           = 3; // bytes_category_name
    uint64 category_id                            = 4; // uint64_category_id
  }
  // ChanInfoFilter is the message type for the ChanInfoFilter.
  message ChanInfoFilter {
    uint32 channel_name                                  = 2; // uint32_channel_name
    uint32 creator_id                                    = 3; // uint32_creator_id
    uint32 create_time                                   = 4; // uint32_create_time
    uint32 guild_id                                      = 5; // uint32_guild_id
    uint32 msg_notify_type                               = 6; // uint32_msg_notify_type
    uint32 channel_type                                  = 7; // uint32_channel_type
    uint32 speak_permission                              = 8; // uint32_speak_permission
    uint32 last_msg_seq                                  = 11; // uint32_last_msg_seq
    uint32 last_cnt_msg_seq                              = 12; // uint32_last_cnt_msg_seq
    VoiceChannelInfoFilter msg_voice_channel_info_filter = 14; // msg_voice_channel_info_filter
    LiveChannelInfoFilter msg_live_channel_info_filter   = 15; // msg_live_channel_info_filter
    uint32 banned_speak                                  = 16; // uint32_banned_speak
  }
  // ChangeChanInfo is the message type for the ChangeChanInfo.
  message ChangeChanInfo {
    uint64 guild_id                     = 1; // uint64_guild_id
    uint64 chan_id                      = 2; // uint64_chan_id
    uint64 operator_id                  = 3; // uint64_operator_id
    SvcCommon.MsgSeq msg_info_seq       = 4; // msg_info_seq
    uint32 update_type                  = 5; // uint32_update_type
    ChanInfoFilter msg_chan_info_filter = 6; // msg_chan_info_filter
    ChannelInfo msg_chan_info           = 7; // msg_chan_info
  }
  // ChangeGuildInfo is the message type for the ChangeGuildInfo.
  message ChangeGuildInfo {
    uint64 guild_id                       = 1; // uint64_guild_id
    uint64 operator_id                    = 2; // uint64_operator_id
    SvcCommon.MsgSeq msg_info_seq         = 3; // msg_info_seq
    SvcCommon.MsgSeq msg_face_seq         = 4; // msg_face_seq
    uint32 update_type                    = 5; // uint32_update_type
    GuildInfoFilter msg_guild_info_filter = 6; // msg_guild_info_filter
    GuildInfo msg_guild_info              = 7; // msg_guild_info
  }
  // ChannelID is the message type for the ChannelID.
  message ChannelID {
    uint64 chan_id = 1; // uint64_chan_id
  }
  // ChannelInfo is the message type for the ChannelInfo.
  message ChannelInfo {
    uint64 channel_id                       = 1; // uint64_channel_id
    bytes channel_name                      = 2; // bytes_channel_name
    uint64 creator_id                       = 3; // uint64_creator_id
    uint64 create_time                      = 4; // uint64_create_time
    uint64 guild_id                         = 5; // uint64_guild_id
    uint32 msg_notify_type                  = 6; // uint32_msg_notify_type
    uint32 channel_type                     = 7; // uint32_channel_type
    uint32 speak_permission                 = 8; // uint32_speak_permission
    SvcCommon.MsgSeq last_msg_seq           = 11; // last_msg_seq
    SvcCommon.MsgSeq last_cnt_msg_seq       = 12; // last_cnt_msg_seq
    VoiceChannelInfo msg_voice_channel_info = 14; // msg_voice_channel_info
    LiveChannelInfo msg_live_channel_info   = 15; // msg_live_channel_info
    uint32 banned_speak                     = 16; // uint32_banned_speak
  }
  // CommGrayTips is the message type for the CommGrayTips.
  message CommGrayTips {
    uint64 busi_type                    = 1; // uint64_busi_type
    uint64 busi_id                      = 2; // uint64_busi_id
    uint32 ctrl_flag                    = 3; // uint32_ctrl_flag
    uint64 templ_id                     = 4; // uint64_templ_id
    repeated TemplParam msg_templ_param = 5; // rpt_msg_templ_param
    bytes content                       = 6; // bytes_content
    uint64 tips_seq_id                  = 10; // uint64_tips_seq_id
    bytes pb_reserv                     = 100; // bytes_pb_reserv
    // TemplParam is the message type for the TemplParam.
    message TemplParam {
      bytes name  = 1; // bytes_name
      bytes value = 2; // bytes_value
    }
  }
  // CreateChan is the message type for the CreateChan.
  message CreateChan {
    uint64 guild_id              = 1; // uint64_guild_id
    uint64 operator_id           = 3; // uint64_operator_id
    repeated ChannelID create_id = 4; // rpt_create_id
  }
  // CreateGuild is the message type for the CreateGuild.
  message CreateGuild {
    uint64 operator_id = 1; // uint64_operator_id
    uint64 guild_id    = 2; // uint64_guild_id
  }
  // DestroyChan is the message type for the DestroyChan.
  message DestroyChan {
    uint64 guild_id              = 1; // uint64_guild_id
    uint64 operator_id           = 3; // uint64_operator_id
    repeated ChannelID delete_id = 4; // rpt_delete_id
  }
  // DestroyGuild is the message type for the DestroyGuild.
  message DestroyGuild {
    uint64 operator_id = 1; // uint64_operator_id
    uint64 guild_id    = 2; // uint64_guild_id
  }
  // EventBody is the message type for the EventBody.
  message EventBody {
    ReadNotify msg_read_notify                           = 1; // msg_read_notify
    CommGrayTips msg_comm_gray_tips                      = 2; // msg_comm_gray_tips
    CreateGuild msg_create_guild                         = 3; // msg_create_guild
    DestroyGuild msg_destroy_guild                       = 4; // msg_destroy_guild
    JoinGuild msg_join_guild                             = 5; // msg_join_guild
    KickOffGuild msg_kick_off_guild                      = 6; // msg_kick_off_guild
    QuitGuild msg_quit_guild                             = 7; // msg_quit_guild
    ChangeGuildInfo msg_change_guild_info                = 8; // msg_change_guild_info
    CreateChan msg_create_chan                           = 9; // msg_create_chan
    DestroyChan msg_destroy_chan                         = 10; // msg_destroy_chan
    ChangeChanInfo msg_change_chan_info                  = 11; // msg_change_chan_info
    SetAdmin msg_set_admin                               = 12; // msg_set_admin
    SetMsgRecvType msg_set_msg_recv_type                 = 13; // msg_set_msg_recv_type
    UpdateMsg msg_update_msg                             = 14; // msg_update_msg
    SetTop msg_set_top                                   = 17; // msg_set_top
    SwitchVoiceChannel msg_switch_channel                = 18; // msg_switch_channel
    UpdateCategory msg_update_category                   = 21; // msg_update_category
    UpdateVoiceBlockList msg_update_voice_block_list     = 22; // msg_update_voice_block_list
    SetMute msg_set_mute                                 = 23; // msg_set_mute
    LiveRoomStatusChangeMsg msg_live_status_change_room  = 24; // msg_live_status_change_room
    SwitchLiveRoom msg_switch_live_room                  = 25; // msg_switch_live_room
    repeated MsgEvent msg_events                         = 39; // msg_events
    SchedulerMsg msg_scheduler                           = 40; // msg_scheduler
    AppChannelMsg msg_app_channel                        = 41; // msg_app_channel
    FeedEvent feed_event                                 = 44; // feed_event
    AppChannelMsg weak_msg_app_channel                   = 46; // weak_msg_app_channel
    ReadFeedNotify read_feed_notify                      = 48; // read_feed_notify
    QuestionChannelSystemMsg question_channel_system_msg = 63; // question_channel_system_msg
  }
  // FeedEvent is the message type for the FeedEvent.
  message FeedEvent {
    uint64 guild_id    = 1; // uint64_guild_id
    uint64 channel_id  = 2; // uint64_channel_id
    string feed_id     = 3; // str_feed_id
    string msg_summary = 4; // str_msg_summary
    uint64 event_time  = 5; // uint64_event_time
  }
  // GroupProStatus is the message type for the GroupProStatus.
  message GroupProStatus {
    uint32 is_enable = 1; // uint32_is_enable
    uint32 is_banned = 2; // uint32_is_banned
    uint32 is_frozen = 3; // uint32_is_frozen
  }
  // GuildInfo is the message type for the GuildInfo.
  message GuildInfo {
    uint64 guild_code                          = 2; // uint64_guild_code
    uint64 owner_id                            = 3; // uint64_owner_id
    uint64 create_time                         = 4; // uint64_create_time
    uint32 member_max_num                      = 5; // uint32_member_max_num
    uint32 member_num                          = 6; // uint32_member_num
    uint32 guild_type                          = 7; // uint32_guild_type
    bytes guild_name                           = 8; // bytes_guild_name
    repeated uint64 robot_list                 = 9; // rpt_robot_list
    repeated uint64 admin_list                 = 10; // rpt_admin_list
    uint32 robot_max_num                       = 11; // uint32_robot_max_num
    uint32 admin_max_num                       = 12; // uint32_admin_max_num
    bytes profile                              = 13; // bytes_profile
    uint64 face_seq                            = 14; // uint64_face_seq
    GroupProStatus msg_guild_status            = 15; // msg_guild_status
    uint32 channel_num                         = 16; // uint32_channel_num
    SvcCommon.MsgSeq msg_member_change_seq     = 5002; // msg_member_change_seq
    SvcCommon.MsgSeq msg_guild_info_change_seq = 5003; // msg_guild_info_change_seq
    SvcCommon.MsgSeq msg_channel_change_seq    = 5004; // msg_channel_change_seq
  }
  // GuildInfoFilter is the message type for the GuildInfoFilter.
  message GuildInfoFilter {
    uint32 guild_code            = 2; // uint32_guild_code
    uint32 owner_id              = 3; // uint32_owner_id
    uint32 create_time           = 4; // uint32_create_time
    uint32 member_max_num        = 5; // uint32_member_max_num
    uint32 member_num            = 6; // uint32_member_num
    uint32 guild_type            = 7; // uint32_guild_type
    uint32 guild_name            = 8; // uint32_guild_name
    uint32 robot_list            = 9; // uint32_robot_list
    uint32 admin_list            = 10; // uint32_admin_list
    uint32 robot_max_num         = 11; // uint32_robot_max_num
    uint32 admin_max_num         = 12; // uint32_admin_max_num
    uint32 profile               = 13; // uint32_profile
    uint32 face_seq              = 14; // uint32_face_seq
    uint32 guild_status          = 15; // uint32_guild_status
    uint32 channel_num           = 16; // uint32_channel_num
    uint32 member_change_seq     = 5002; // uint32_member_change_seq
    uint32 guild_info_change_seq = 5003; // uint32_guild_info_change_seq
    uint32 channel_change_seq    = 5004; // uint32_channel_change_seq
  }
  // JoinGuild is the message type for the JoinGuild.
  message JoinGuild {
    uint64 member_id     = 3; // uint64_member_id
    uint32 member_type   = 4; // uint32_member_type
    uint64 member_tinyid = 5; // uint64_member_tinyid
  }
  // KickOffGuild is the message type for the KickOffGuild.
  message KickOffGuild {
    uint64 member_id     = 3; // uint64_member_id
    uint32 set_black     = 4; // uint32_set_black
    uint64 member_tinyid = 5; // uint64_member_tinyid
  }
  // LiveChannelInfo is the message type for the LiveChannelInfo.
  message LiveChannelInfo {
    uint64 room_id    = 1; // uint64_room_id
    uint64 anchor_uin = 2; // uint64_anchor_uin
    bytes name        = 3; // bytes_name
  }
  // LiveChannelInfoFilter is the message type for the LiveChannelInfoFilter.
  message LiveChannelInfoFilter {
    uint32 is_need_room_id    = 1; // uint32_is_need_room_id
    uint32 is_need_anchor_uin = 2; // uint32_is_need_anchor_uin
    uint32 is_need_name       = 3; // uint32_is_need_name
  }
  // LiveRoomStatusChangeMsg is the message type for the LiveRoomStatusChangeMsg.
  message LiveRoomStatusChangeMsg {
    uint64 guild_id      = 1; // guild_id
    uint64 channel_id    = 2; // channel_id
    uint64 room_id       = 3; // room_id
    uint64 anchor_tinyid = 4; // anchor_tinyid
    int32 action         = 5; // action
  }
  // MsgEvent is the message type for the MsgEvent.
  message MsgEvent {
    uint64 msg_seq       = 1; // msg_seq
    uint64 event_type    = 2; // event_type
    uint64 event_version = 3; // event_version
  }
  // MsgSeq is the message type for the MsgSeq.
  message MsgSeq {
    uint64 seq  = 1; // uint64_seq
    uint64 time = 2; // uint64_time
  }
  // QuestionChannelSystemMsg is the message type for the QuestionChannelSystemMsg.
  message QuestionChannelSystemMsg {
    uint32 busi_type = 1; // busi_type
    bytes busi_data  = 2; // busi_data
  }
  // QuitGuild is the message type for the QuitGuild.
  message QuitGuild {}
  // ReadFeedNotify is the message type for the ReadFeedNotify.
  message ReadFeedNotify {
    uint64 report_time = 2; // report_time
  }
  // ReadNotify is the message type for the ReadNotify.
  message ReadNotify {
    uint64 channel_id                     = 1; // uint64_channel_id
    uint64 guild_id                       = 2; // uint64_guild_id
    SvcCommon.MsgSeq msg_read_msg_seq     = 3; // msg_read_msg_seq
    SvcCommon.MsgSeq msg_read_cnt_msg_seq = 4; // msg_read_cnt_msg_seq
    bytes read_msg_meta                   = 5; // bytes_read_msg_meta
  }
  // SchedulerMsg is the message type for the SchedulerMsg.
  message SchedulerMsg {
    bytes creator_head_url = 1; // creator_head_url
    string wording         = 2; // wording
    uint64 expire_time_ms  = 3; // expire_time_ms
  }
  // SetAdmin is the message type for the SetAdmin.
  message SetAdmin {
    uint64 guild_id     = 1; // uint64_guild_id
    uint64 chan_id      = 2; // uint64_chan_id
    uint64 operator_id  = 3; // uint64_operator_id
    uint64 admin_id     = 4; // uint64_admin_id
    uint64 admin_tinyid = 5; // uint64_admin_tinyid
    uint32 operate_type = 6; // uint32_operate_type
  }
  // SetMsgRecvType is the message type for the SetMsgRecvType.
  message SetMsgRecvType {
    uint64 guild_id       = 1; // uint64_guild_id
    uint64 chan_id        = 2; // uint64_chan_id
    uint64 operator_id    = 3; // int64_operator_id
    int32 msg_notify_type = 4; // uint32_msg_notify_type
  }
  // SetMute is the message type for the SetMute.
  message SetMute {
    uint32 action = 1; // action
    uint64 tinyID = 2; // tinyID
  }
  // SetTop is the message type for the SetTop.
  message SetTop {
    uint32 action = 1; // uint32_action
  }
  // SwitchDetail is the message type for the SwitchDetail.
  message SwitchDetail {
    uint64 guild_id   = 1; // guild_id
    uint64 channel_id = 2; // channel_id
    uint32 platform   = 3; // platform
  }
  // SwitchLiveRoom is the message type for the SwitchLiveRoom.
  message SwitchLiveRoom {
    uint64 guild_id   = 1; // guild_id
    uint64 channel_id = 2; // channel_id
    uint64 room_id    = 3; // room_id
    uint64 tinyid     = 4; // tinyid
    int32 action      = 5; // action
  }
  // SwitchVoiceChannel is the message type for the SwitchVoiceChannel.
  message SwitchVoiceChannel {
    uint64 member_id          = 1; // member_id
    SwitchDetail enter_detail = 2; // enter_detail
    SwitchDetail leave_detail = 3; // leave_detail
  }
  // UpdateCategory is the message type for the UpdateCategory.
  message UpdateCategory {
    repeated CategoryInfo msg_category_info    = 1; // rpt_msg_category_info
    CategoryInfo msg_no_classify_category_info = 2; // msg_no_classify_category_info
  }
  // UpdateMsg is the message type for the UpdateMsg.
  message UpdateMsg {
    uint64 msg_seq            = 1; // uint64_msg_seq
    bool orig_msg_uncountable = 2; // bool_orig_msg_uncountable
    uint64 event_type         = 3; // uint64_event_type
    uint64 event_version      = 4; // uint64_event_version
    uint64 operator_tinyid    = 5; // uint64_operator_tinyid
    uint64 operator_role      = 6; // uint64_operator_role
    uint64 reason             = 7; // uint64_reason
    uint64 timestamp          = 8; // uint64_timestamp
  }
  // UpdateVoiceBlockList is the message type for the UpdateVoiceBlockList.
  message UpdateVoiceBlockList {
    uint32 action        = 1; // uint32_action
    uint64 object_tinyid = 2; // uint64_object_tinyid
  }
  // VoiceChannelInfo is the message type for the VoiceChannelInfo.
  message VoiceChannelInfo {
    uint32 member_max_num = 1; // uint32_member_max_num
  }
  // VoiceChannelInfoFilter is the message type for the VoiceChannelInfoFilter.
  message VoiceChannelInfoFilter {
    uint32 member_max_num = 1; // uint32_member_max_num
  }
}
