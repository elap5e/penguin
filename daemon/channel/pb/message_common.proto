syntax = "proto3";

import "daemon/message/pb/body.proto";

option go_package = "github.com/elap5e/penguin/daemon/channel/pb";

// Message generated by proto-message-gen. DO NOT EDIT.
// source: tencent.p1298im.group_pro_proto.common.C72441common
//
// C72441common is the message type for the C72441common.
message Common {
  // ContentHead is the message type for the ContentHead.
  message ContentHead {
    uint64 msg_type = 1; // msg_type
    uint64 sub_type = 2; // sub_type
    uint64 random   = 3; // random
    uint64 msg_seq  = 4; // msg_seq
    uint64 cnt_seq  = 5; // cnt_seq
    uint64 msg_time = 6; // msg_time
    bytes msg_meta  = 7; // msg_meta
  }
  // DirectMessageMember is the message type for the DirectMessageMember.
  message DirectMessageMember {
    uint64 uin              = 1; // uin
    uint64 tinyid           = 2; // tinyid
    uint64 source_guild_id  = 3; // source_guild_id
    bytes source_guild_name = 4; // source_guild_name
    bytes nick_name         = 5; // nick_name
    bytes member_name       = 6; // member_name
    uint32 msg_notify_type  = 7; // msg_notify_type
    uint32 member_type      = 8; // member_type
  }
  // Event is the message type for the Event.
  message Event {
    uint64 type       = 1; // type
    uint64 version    = 2; // version
    MsgOpInfo op_info = 3; // op_info
  }
  // ExtInfo is the message type for the ExtInfo.
  message ExtInfo {
    bytes from_nick                                    = 1; // from_nick
    bytes guild_name                                   = 2; // guild_name
    bytes channel_name                                 = 3; // channel_name
    uint32 visibility                                  = 4; // visibility
    uint32 notify_type                                 = 5; // notify_type
    uint32 offline_flag                                = 6; // offline_flag
    uint32 name_type                                   = 7; // name_type
    bytes member_name                                  = 8; // bytes_member_name
    uint32 timestamp                                   = 9; // uint32_timestamp
    uint64 event_version                               = 10; // event_version
    repeated Event events                              = 11; // events
    Role from_role_info                                = 12; // from_role_info
    FreqLimitInfo freq_limit_info                      = 13; // freq_limit_info
    repeated DirectMessageMember direct_message_member = 14; // direct_message_member
    bytes from_avatar                                  = 15; // from_avatar
    S2CMsgInfo s2c_msg_info                            = 16; // s2c_msg_info
  }
  // FreqLimitInfo is the message type for the FreqLimitInfo.
  message FreqLimitInfo {
    uint32 is_limited      = 1; // is_limited
    uint32 left_count      = 2; // left_count
    uint64 limit_timestamp = 3; // limit_timestamp
  }
  // Info is the message type for the Info.
  message Info {
    bytes name   = 2; // name
    uint32 color = 3; // color
    uint32 hoist = 4; // hoist
  }
  // LoginSig is the message type for the LoginSig.
  message LoginSig {
    uint32 type  = 1; // uint32_type
    bytes sig    = 2; // bytes_sig
    uint32 appid = 3; // uint32_appid
  }
  // Meta is the message type for the Meta.
  message Meta {
    uint64 from_uin    = 1; // from_uin
    LoginSig login_sig = 2; // login_sig
  }
  // Msg is the message type for the Msg.
  message Msg {
    MsgHead head             = 1; // head
    MsgCtrlHead ctrl_head    = 2; // ctrl_head
    IMMsgBody.MsgBody body = 3; // body
    ExtInfo ext_info         = 4; // ext_info
  }
  // MsgCtrlHead is the message type for the MsgCtrlHead.
  message MsgCtrlHead {
    repeated uint64 include_uin            = 1; // include_uin
    repeated uint64 exclude_uin            = 2; // exclude_uin
    repeated uint64 featureid              = 3; // rpt_featureid
    uint32 offline_flag                    = 4; // offline_flag
    uint32 visibility                      = 5; // visibility
    uint64 ctrl_flag                       = 6; // ctrl_flag
    repeated Event events                  = 7; // events
    uint64 level                           = 8; // level
    repeated PersonalLevel personal_levels = 9; // personal_levels
    uint64 guild_sync_seq                  = 10; // guild_sync_seq
    uint32 member_num                      = 11; // member_num
    uint32 channel_type                    = 12; // channel_type
    uint32 private_type                    = 13; // private_type
    uint32 feature_action                  = 14; // feature_action
    uint32 channel_visible_type            = 16; // channel_visible_type
    S2CMsgInfo s2c_msg_info                = 17; // s2c_msg_info
  }
  // MsgHead is the message type for the MsgHead.
  message MsgHead {
    RoutingHead routing_head = 1; // routing_head
    ContentHead content_head = 2; // content_head
  }
  // MsgMeta is the message type for the MsgMeta.
  message MsgMeta {
    uint64 at_all_seq      = 1; // at_all_seq
    uint64 channel_box_seq = 2; // channel_box_seq
  }
  // MsgOpInfo is the message type for the MsgOpInfo.
  message MsgOpInfo {
    uint64 operator_tinyid = 1; // operator_tinyid
    uint64 operator_role   = 2; // operator_role
    uint64 reason          = 3; // reason
    uint64 timestamp       = 4; // timestamp
    uint64 at_type         = 5; // at_type
  }
  // PersonalLevel is the message type for the PersonalLevel.
  message PersonalLevel {
    uint64 to_uin = 1; // to_uin
    uint64 level  = 2; // level
  }
  // Role is the message type for the Role.
  message Role {
    bytes info  = 2; // info
    uint32 flag = 3; // flag
  }
  // RoutingHead is the message type for the RoutingHead.
  message RoutingHead {
    uint64 guild_id            = 1; // guild_id
    uint64 channel_id          = 2; // channel_id
    uint64 from_uin            = 3; // from_uin
    uint64 from_tinyid         = 4; // from_tinyid
    uint64 guild_code          = 5; // guild_code
    uint64 from_appid          = 6; // from_appid
    uint32 direct_message_flag = 7; // direct_message_flag
  }
  // S2CMsgInfo is the message type for the S2CMsgInfo.
  message S2CMsgInfo {
    uint32 s2c_notify_type = 1; // s2c_notify_type
    bytes from_nick        = 2; // from_nick
    bytes title            = 3; // title
    bytes content          = 4; // content
  }
}
