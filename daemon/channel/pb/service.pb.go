// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: daemon/channel/pb/service.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message generated by proto-message-gen. DO NOT EDIT.
// source: tencent.p1318im.group_pro_proto.msgpush.C73141servtype
//
// ChannelService is the message type for the C73141servtype.
type ChannelService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChannelService) Reset() {
	*x = ChannelService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService) ProtoMessage() {}

func (x *ChannelService) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService.ProtoReflect.Descriptor instead.
func (*ChannelService) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0}
}

// AppChannelMsg is the message type for the AppChannelMsg.
type ChannelService_AppChannelMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary      string `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`                                  // summary
	ExpireTimeMs uint64 `protobuf:"varint,3,opt,name=expire_time_ms,json=expireTimeMs,proto3" json:"expire_time_ms,omitempty"` // expire_time_ms
	SchemaType   uint32 `protobuf:"varint,4,opt,name=schema_type,json=schemaType,proto3" json:"schema_type,omitempty"`         // schema_type
	Schema       string `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`                                    // schema
}

func (x *ChannelService_AppChannelMsg) Reset() {
	*x = ChannelService_AppChannelMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_AppChannelMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_AppChannelMsg) ProtoMessage() {}

func (x *ChannelService_AppChannelMsg) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_AppChannelMsg.ProtoReflect.Descriptor instead.
func (*ChannelService_AppChannelMsg) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ChannelService_AppChannelMsg) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *ChannelService_AppChannelMsg) GetExpireTimeMs() uint64 {
	if x != nil {
		return x.ExpireTimeMs
	}
	return 0
}

func (x *ChannelService_AppChannelMsg) GetSchemaType() uint32 {
	if x != nil {
		return x.SchemaType
	}
	return 0
}

func (x *ChannelService_AppChannelMsg) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

// CategoryChannelInfo is the message type for the CategoryChannelInfo.
type ChannelService_CategoryChannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelIndex uint32 `protobuf:"varint,1,opt,name=channel_index,json=channelIndex,proto3" json:"channel_index,omitempty"` // uint32_channel_index
	ChannelId    uint64 `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`          // uint64_channel_id
}

func (x *ChannelService_CategoryChannelInfo) Reset() {
	*x = ChannelService_CategoryChannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_CategoryChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_CategoryChannelInfo) ProtoMessage() {}

func (x *ChannelService_CategoryChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_CategoryChannelInfo.ProtoReflect.Descriptor instead.
func (*ChannelService_CategoryChannelInfo) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ChannelService_CategoryChannelInfo) GetChannelIndex() uint32 {
	if x != nil {
		return x.ChannelIndex
	}
	return 0
}

func (x *ChannelService_CategoryChannelInfo) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

// CategoryInfo is the message type for the CategoryInfo.
type ChannelService_CategoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryIndex  uint32                                `protobuf:"varint,1,opt,name=category_index,json=categoryIndex,proto3" json:"category_index,omitempty"`     // uint32_category_index
	MsgChannelInfo []*ChannelService_CategoryChannelInfo `protobuf:"bytes,2,rep,name=msg_channel_info,json=msgChannelInfo,proto3" json:"msg_channel_info,omitempty"` // rpt_msg_channel_info
	CategoryName   []byte                                `protobuf:"bytes,3,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`         // bytes_category_name
	CategoryId     uint64                                `protobuf:"varint,4,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`              // uint64_category_id
}

func (x *ChannelService_CategoryInfo) Reset() {
	*x = ChannelService_CategoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_CategoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_CategoryInfo) ProtoMessage() {}

func (x *ChannelService_CategoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_CategoryInfo.ProtoReflect.Descriptor instead.
func (*ChannelService_CategoryInfo) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ChannelService_CategoryInfo) GetCategoryIndex() uint32 {
	if x != nil {
		return x.CategoryIndex
	}
	return 0
}

func (x *ChannelService_CategoryInfo) GetMsgChannelInfo() []*ChannelService_CategoryChannelInfo {
	if x != nil {
		return x.MsgChannelInfo
	}
	return nil
}

func (x *ChannelService_CategoryInfo) GetCategoryName() []byte {
	if x != nil {
		return x.CategoryName
	}
	return nil
}

func (x *ChannelService_CategoryInfo) GetCategoryId() uint64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

// ChanInfoFilter is the message type for the ChanInfoFilter.
type ChannelService_ChanInfoFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelName               uint32                                 `protobuf:"varint,2,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`                                                 // uint32_channel_name
	CreatorId                 uint32                                 `protobuf:"varint,3,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`                                                       // uint32_creator_id
	CreateTime                uint32                                 `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                                    // uint32_create_time
	GuildId                   uint32                                 `protobuf:"varint,5,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`                                                             // uint32_guild_id
	MsgNotifyType             uint32                                 `protobuf:"varint,6,opt,name=msg_notify_type,json=msgNotifyType,proto3" json:"msg_notify_type,omitempty"`                                         // uint32_msg_notify_type
	ChannelType               uint32                                 `protobuf:"varint,7,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"`                                                 // uint32_channel_type
	SpeakPermission           uint32                                 `protobuf:"varint,8,opt,name=speak_permission,json=speakPermission,proto3" json:"speak_permission,omitempty"`                                     // uint32_speak_permission
	LastMsgSeq                uint32                                 `protobuf:"varint,11,opt,name=last_msg_seq,json=lastMsgSeq,proto3" json:"last_msg_seq,omitempty"`                                                 // uint32_last_msg_seq
	LastCntMsgSeq             uint32                                 `protobuf:"varint,12,opt,name=last_cnt_msg_seq,json=lastCntMsgSeq,proto3" json:"last_cnt_msg_seq,omitempty"`                                      // uint32_last_cnt_msg_seq
	MsgVoiceChannelInfoFilter *ChannelService_VoiceChannelInfoFilter `protobuf:"bytes,14,opt,name=msg_voice_channel_info_filter,json=msgVoiceChannelInfoFilter,proto3" json:"msg_voice_channel_info_filter,omitempty"` // msg_voice_channel_info_filter
	MsgLiveChannelInfoFilter  *ChannelService_LiveChannelInfoFilter  `protobuf:"bytes,15,opt,name=msg_live_channel_info_filter,json=msgLiveChannelInfoFilter,proto3" json:"msg_live_channel_info_filter,omitempty"`    // msg_live_channel_info_filter
	BannedSpeak               uint32                                 `protobuf:"varint,16,opt,name=banned_speak,json=bannedSpeak,proto3" json:"banned_speak,omitempty"`                                                // uint32_banned_speak
}

func (x *ChannelService_ChanInfoFilter) Reset() {
	*x = ChannelService_ChanInfoFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_ChanInfoFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_ChanInfoFilter) ProtoMessage() {}

func (x *ChannelService_ChanInfoFilter) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_ChanInfoFilter.ProtoReflect.Descriptor instead.
func (*ChannelService_ChanInfoFilter) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 3}
}

func (x *ChannelService_ChanInfoFilter) GetChannelName() uint32 {
	if x != nil {
		return x.ChannelName
	}
	return 0
}

func (x *ChannelService_ChanInfoFilter) GetCreatorId() uint32 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *ChannelService_ChanInfoFilter) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ChannelService_ChanInfoFilter) GetGuildId() uint32 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *ChannelService_ChanInfoFilter) GetMsgNotifyType() uint32 {
	if x != nil {
		return x.MsgNotifyType
	}
	return 0
}

func (x *ChannelService_ChanInfoFilter) GetChannelType() uint32 {
	if x != nil {
		return x.ChannelType
	}
	return 0
}

func (x *ChannelService_ChanInfoFilter) GetSpeakPermission() uint32 {
	if x != nil {
		return x.SpeakPermission
	}
	return 0
}

func (x *ChannelService_ChanInfoFilter) GetLastMsgSeq() uint32 {
	if x != nil {
		return x.LastMsgSeq
	}
	return 0
}

func (x *ChannelService_ChanInfoFilter) GetLastCntMsgSeq() uint32 {
	if x != nil {
		return x.LastCntMsgSeq
	}
	return 0
}

func (x *ChannelService_ChanInfoFilter) GetMsgVoiceChannelInfoFilter() *ChannelService_VoiceChannelInfoFilter {
	if x != nil {
		return x.MsgVoiceChannelInfoFilter
	}
	return nil
}

func (x *ChannelService_ChanInfoFilter) GetMsgLiveChannelInfoFilter() *ChannelService_LiveChannelInfoFilter {
	if x != nil {
		return x.MsgLiveChannelInfoFilter
	}
	return nil
}

func (x *ChannelService_ChanInfoFilter) GetBannedSpeak() uint32 {
	if x != nil {
		return x.BannedSpeak
	}
	return 0
}

// ChangeChanInfo is the message type for the ChangeChanInfo.
type ChannelService_ChangeChanInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId           uint64                         `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`                                  // uint64_guild_id
	ChanId            uint64                         `protobuf:"varint,2,opt,name=chan_id,json=chanId,proto3" json:"chan_id,omitempty"`                                     // uint64_chan_id
	OperatorId        uint64                         `protobuf:"varint,3,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`                         // uint64_operator_id
	MsgInfoSeq        *SvcCommon_MsgSeq              `protobuf:"bytes,4,opt,name=msg_info_seq,json=msgInfoSeq,proto3" json:"msg_info_seq,omitempty"`                        // msg_info_seq
	UpdateType        uint32                         `protobuf:"varint,5,opt,name=update_type,json=updateType,proto3" json:"update_type,omitempty"`                         // uint32_update_type
	MsgChanInfoFilter *ChannelService_ChanInfoFilter `protobuf:"bytes,6,opt,name=msg_chan_info_filter,json=msgChanInfoFilter,proto3" json:"msg_chan_info_filter,omitempty"` // msg_chan_info_filter
	MsgChanInfo       *ChannelService_ChannelInfo    `protobuf:"bytes,7,opt,name=msg_chan_info,json=msgChanInfo,proto3" json:"msg_chan_info,omitempty"`                     // msg_chan_info
}

func (x *ChannelService_ChangeChanInfo) Reset() {
	*x = ChannelService_ChangeChanInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_ChangeChanInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_ChangeChanInfo) ProtoMessage() {}

func (x *ChannelService_ChangeChanInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_ChangeChanInfo.ProtoReflect.Descriptor instead.
func (*ChannelService_ChangeChanInfo) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 4}
}

func (x *ChannelService_ChangeChanInfo) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *ChannelService_ChangeChanInfo) GetChanId() uint64 {
	if x != nil {
		return x.ChanId
	}
	return 0
}

func (x *ChannelService_ChangeChanInfo) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *ChannelService_ChangeChanInfo) GetMsgInfoSeq() *SvcCommon_MsgSeq {
	if x != nil {
		return x.MsgInfoSeq
	}
	return nil
}

func (x *ChannelService_ChangeChanInfo) GetUpdateType() uint32 {
	if x != nil {
		return x.UpdateType
	}
	return 0
}

func (x *ChannelService_ChangeChanInfo) GetMsgChanInfoFilter() *ChannelService_ChanInfoFilter {
	if x != nil {
		return x.MsgChanInfoFilter
	}
	return nil
}

func (x *ChannelService_ChangeChanInfo) GetMsgChanInfo() *ChannelService_ChannelInfo {
	if x != nil {
		return x.MsgChanInfo
	}
	return nil
}

// ChangeGuildInfo is the message type for the ChangeGuildInfo.
type ChannelService_ChangeGuildInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId            uint64                          `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`                                     // uint64_guild_id
	OperatorId         uint64                          `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`                            // uint64_operator_id
	MsgInfoSeq         *SvcCommon_MsgSeq               `protobuf:"bytes,3,opt,name=msg_info_seq,json=msgInfoSeq,proto3" json:"msg_info_seq,omitempty"`                           // msg_info_seq
	MsgFaceSeq         *SvcCommon_MsgSeq               `protobuf:"bytes,4,opt,name=msg_face_seq,json=msgFaceSeq,proto3" json:"msg_face_seq,omitempty"`                           // msg_face_seq
	UpdateType         uint32                          `protobuf:"varint,5,opt,name=update_type,json=updateType,proto3" json:"update_type,omitempty"`                            // uint32_update_type
	MsgGuildInfoFilter *ChannelService_GuildInfoFilter `protobuf:"bytes,6,opt,name=msg_guild_info_filter,json=msgGuildInfoFilter,proto3" json:"msg_guild_info_filter,omitempty"` // msg_guild_info_filter
	MsgGuildInfo       *ChannelService_GuildInfo       `protobuf:"bytes,7,opt,name=msg_guild_info,json=msgGuildInfo,proto3" json:"msg_guild_info,omitempty"`                     // msg_guild_info
}

func (x *ChannelService_ChangeGuildInfo) Reset() {
	*x = ChannelService_ChangeGuildInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_ChangeGuildInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_ChangeGuildInfo) ProtoMessage() {}

func (x *ChannelService_ChangeGuildInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_ChangeGuildInfo.ProtoReflect.Descriptor instead.
func (*ChannelService_ChangeGuildInfo) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 5}
}

func (x *ChannelService_ChangeGuildInfo) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *ChannelService_ChangeGuildInfo) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *ChannelService_ChangeGuildInfo) GetMsgInfoSeq() *SvcCommon_MsgSeq {
	if x != nil {
		return x.MsgInfoSeq
	}
	return nil
}

func (x *ChannelService_ChangeGuildInfo) GetMsgFaceSeq() *SvcCommon_MsgSeq {
	if x != nil {
		return x.MsgFaceSeq
	}
	return nil
}

func (x *ChannelService_ChangeGuildInfo) GetUpdateType() uint32 {
	if x != nil {
		return x.UpdateType
	}
	return 0
}

func (x *ChannelService_ChangeGuildInfo) GetMsgGuildInfoFilter() *ChannelService_GuildInfoFilter {
	if x != nil {
		return x.MsgGuildInfoFilter
	}
	return nil
}

func (x *ChannelService_ChangeGuildInfo) GetMsgGuildInfo() *ChannelService_GuildInfo {
	if x != nil {
		return x.MsgGuildInfo
	}
	return nil
}

// ChannelID is the message type for the ChannelID.
type ChannelService_ChannelID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChanId uint64 `protobuf:"varint,1,opt,name=chan_id,json=chanId,proto3" json:"chan_id,omitempty"` // uint64_chan_id
}

func (x *ChannelService_ChannelID) Reset() {
	*x = ChannelService_ChannelID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_ChannelID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_ChannelID) ProtoMessage() {}

func (x *ChannelService_ChannelID) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_ChannelID.ProtoReflect.Descriptor instead.
func (*ChannelService_ChannelID) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 6}
}

func (x *ChannelService_ChannelID) GetChanId() uint64 {
	if x != nil {
		return x.ChanId
	}
	return 0
}

// ChannelInfo is the message type for the ChannelInfo.
type ChannelService_ChannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId           uint64                           `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`                                   // uint64_channel_id
	ChannelName         []byte                           `protobuf:"bytes,2,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`                              // bytes_channel_name
	CreatorId           uint64                           `protobuf:"varint,3,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`                                   // uint64_creator_id
	CreateTime          uint64                           `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                // uint64_create_time
	GuildId             uint64                           `protobuf:"varint,5,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`                                         // uint64_guild_id
	MsgNotifyType       uint32                           `protobuf:"varint,6,opt,name=msg_notify_type,json=msgNotifyType,proto3" json:"msg_notify_type,omitempty"`                     // uint32_msg_notify_type
	ChannelType         uint32                           `protobuf:"varint,7,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"`                             // uint32_channel_type
	SpeakPermission     uint32                           `protobuf:"varint,8,opt,name=speak_permission,json=speakPermission,proto3" json:"speak_permission,omitempty"`                 // uint32_speak_permission
	LastMsgSeq          *SvcCommon_MsgSeq                `protobuf:"bytes,11,opt,name=last_msg_seq,json=lastMsgSeq,proto3" json:"last_msg_seq,omitempty"`                              // last_msg_seq
	LastCntMsgSeq       *SvcCommon_MsgSeq                `protobuf:"bytes,12,opt,name=last_cnt_msg_seq,json=lastCntMsgSeq,proto3" json:"last_cnt_msg_seq,omitempty"`                   // last_cnt_msg_seq
	MsgVoiceChannelInfo *ChannelService_VoiceChannelInfo `protobuf:"bytes,14,opt,name=msg_voice_channel_info,json=msgVoiceChannelInfo,proto3" json:"msg_voice_channel_info,omitempty"` // msg_voice_channel_info
	MsgLiveChannelInfo  *ChannelService_LiveChannelInfo  `protobuf:"bytes,15,opt,name=msg_live_channel_info,json=msgLiveChannelInfo,proto3" json:"msg_live_channel_info,omitempty"`    // msg_live_channel_info
	BannedSpeak         uint32                           `protobuf:"varint,16,opt,name=banned_speak,json=bannedSpeak,proto3" json:"banned_speak,omitempty"`                            // uint32_banned_speak
}

func (x *ChannelService_ChannelInfo) Reset() {
	*x = ChannelService_ChannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_ChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_ChannelInfo) ProtoMessage() {}

func (x *ChannelService_ChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_ChannelInfo.ProtoReflect.Descriptor instead.
func (*ChannelService_ChannelInfo) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 7}
}

func (x *ChannelService_ChannelInfo) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelService_ChannelInfo) GetChannelName() []byte {
	if x != nil {
		return x.ChannelName
	}
	return nil
}

func (x *ChannelService_ChannelInfo) GetCreatorId() uint64 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *ChannelService_ChannelInfo) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ChannelService_ChannelInfo) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *ChannelService_ChannelInfo) GetMsgNotifyType() uint32 {
	if x != nil {
		return x.MsgNotifyType
	}
	return 0
}

func (x *ChannelService_ChannelInfo) GetChannelType() uint32 {
	if x != nil {
		return x.ChannelType
	}
	return 0
}

func (x *ChannelService_ChannelInfo) GetSpeakPermission() uint32 {
	if x != nil {
		return x.SpeakPermission
	}
	return 0
}

func (x *ChannelService_ChannelInfo) GetLastMsgSeq() *SvcCommon_MsgSeq {
	if x != nil {
		return x.LastMsgSeq
	}
	return nil
}

func (x *ChannelService_ChannelInfo) GetLastCntMsgSeq() *SvcCommon_MsgSeq {
	if x != nil {
		return x.LastCntMsgSeq
	}
	return nil
}

func (x *ChannelService_ChannelInfo) GetMsgVoiceChannelInfo() *ChannelService_VoiceChannelInfo {
	if x != nil {
		return x.MsgVoiceChannelInfo
	}
	return nil
}

func (x *ChannelService_ChannelInfo) GetMsgLiveChannelInfo() *ChannelService_LiveChannelInfo {
	if x != nil {
		return x.MsgLiveChannelInfo
	}
	return nil
}

func (x *ChannelService_ChannelInfo) GetBannedSpeak() uint32 {
	if x != nil {
		return x.BannedSpeak
	}
	return 0
}

// CommGrayTips is the message type for the CommGrayTips.
type ChannelService_CommGrayTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusiType      uint64                                    `protobuf:"varint,1,opt,name=busi_type,json=busiType,proto3" json:"busi_type,omitempty"`                 // uint64_busi_type
	BusiId        uint64                                    `protobuf:"varint,2,opt,name=busi_id,json=busiId,proto3" json:"busi_id,omitempty"`                       // uint64_busi_id
	CtrlFlag      uint32                                    `protobuf:"varint,3,opt,name=ctrl_flag,json=ctrlFlag,proto3" json:"ctrl_flag,omitempty"`                 // uint32_ctrl_flag
	TemplId       uint64                                    `protobuf:"varint,4,opt,name=templ_id,json=templId,proto3" json:"templ_id,omitempty"`                    // uint64_templ_id
	MsgTemplParam []*ChannelService_CommGrayTips_TemplParam `protobuf:"bytes,5,rep,name=msg_templ_param,json=msgTemplParam,proto3" json:"msg_templ_param,omitempty"` // rpt_msg_templ_param
	Content       []byte                                    `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`                                    // bytes_content
	TipsSeqId     uint64                                    `protobuf:"varint,10,opt,name=tips_seq_id,json=tipsSeqId,proto3" json:"tips_seq_id,omitempty"`           // uint64_tips_seq_id
	PbReserv      []byte                                    `protobuf:"bytes,100,opt,name=pb_reserv,json=pbReserv,proto3" json:"pb_reserv,omitempty"`                // bytes_pb_reserv
}

func (x *ChannelService_CommGrayTips) Reset() {
	*x = ChannelService_CommGrayTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_CommGrayTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_CommGrayTips) ProtoMessage() {}

func (x *ChannelService_CommGrayTips) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_CommGrayTips.ProtoReflect.Descriptor instead.
func (*ChannelService_CommGrayTips) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 8}
}

func (x *ChannelService_CommGrayTips) GetBusiType() uint64 {
	if x != nil {
		return x.BusiType
	}
	return 0
}

func (x *ChannelService_CommGrayTips) GetBusiId() uint64 {
	if x != nil {
		return x.BusiId
	}
	return 0
}

func (x *ChannelService_CommGrayTips) GetCtrlFlag() uint32 {
	if x != nil {
		return x.CtrlFlag
	}
	return 0
}

func (x *ChannelService_CommGrayTips) GetTemplId() uint64 {
	if x != nil {
		return x.TemplId
	}
	return 0
}

func (x *ChannelService_CommGrayTips) GetMsgTemplParam() []*ChannelService_CommGrayTips_TemplParam {
	if x != nil {
		return x.MsgTemplParam
	}
	return nil
}

func (x *ChannelService_CommGrayTips) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ChannelService_CommGrayTips) GetTipsSeqId() uint64 {
	if x != nil {
		return x.TipsSeqId
	}
	return 0
}

func (x *ChannelService_CommGrayTips) GetPbReserv() []byte {
	if x != nil {
		return x.PbReserv
	}
	return nil
}

// CreateChan is the message type for the CreateChan.
type ChannelService_CreateChan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId    uint64                      `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`          // uint64_guild_id
	OperatorId uint64                      `protobuf:"varint,3,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"` // uint64_operator_id
	CreateId   []*ChannelService_ChannelID `protobuf:"bytes,4,rep,name=create_id,json=createId,proto3" json:"create_id,omitempty"`        // rpt_create_id
}

func (x *ChannelService_CreateChan) Reset() {
	*x = ChannelService_CreateChan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_CreateChan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_CreateChan) ProtoMessage() {}

func (x *ChannelService_CreateChan) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_CreateChan.ProtoReflect.Descriptor instead.
func (*ChannelService_CreateChan) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 9}
}

func (x *ChannelService_CreateChan) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *ChannelService_CreateChan) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *ChannelService_CreateChan) GetCreateId() []*ChannelService_ChannelID {
	if x != nil {
		return x.CreateId
	}
	return nil
}

// CreateGuild is the message type for the CreateGuild.
type ChannelService_CreateGuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorId uint64 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"` // uint64_operator_id
	GuildId    uint64 `protobuf:"varint,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`          // uint64_guild_id
}

func (x *ChannelService_CreateGuild) Reset() {
	*x = ChannelService_CreateGuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_CreateGuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_CreateGuild) ProtoMessage() {}

func (x *ChannelService_CreateGuild) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_CreateGuild.ProtoReflect.Descriptor instead.
func (*ChannelService_CreateGuild) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 10}
}

func (x *ChannelService_CreateGuild) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *ChannelService_CreateGuild) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

// DestroyChan is the message type for the DestroyChan.
type ChannelService_DestroyChan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId    uint64                      `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`          // uint64_guild_id
	OperatorId uint64                      `protobuf:"varint,3,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"` // uint64_operator_id
	DeleteId   []*ChannelService_ChannelID `protobuf:"bytes,4,rep,name=delete_id,json=deleteId,proto3" json:"delete_id,omitempty"`        // rpt_delete_id
}

func (x *ChannelService_DestroyChan) Reset() {
	*x = ChannelService_DestroyChan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_DestroyChan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_DestroyChan) ProtoMessage() {}

func (x *ChannelService_DestroyChan) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_DestroyChan.ProtoReflect.Descriptor instead.
func (*ChannelService_DestroyChan) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 11}
}

func (x *ChannelService_DestroyChan) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *ChannelService_DestroyChan) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *ChannelService_DestroyChan) GetDeleteId() []*ChannelService_ChannelID {
	if x != nil {
		return x.DeleteId
	}
	return nil
}

// DestroyGuild is the message type for the DestroyGuild.
type ChannelService_DestroyGuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorId uint64 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"` // uint64_operator_id
	GuildId    uint64 `protobuf:"varint,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`          // uint64_guild_id
}

func (x *ChannelService_DestroyGuild) Reset() {
	*x = ChannelService_DestroyGuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_DestroyGuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_DestroyGuild) ProtoMessage() {}

func (x *ChannelService_DestroyGuild) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_DestroyGuild.ProtoReflect.Descriptor instead.
func (*ChannelService_DestroyGuild) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 12}
}

func (x *ChannelService_DestroyGuild) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *ChannelService_DestroyGuild) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

// EventBody is the message type for the EventBody.
type ChannelService_EventBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgReadNotify            *ChannelService_ReadNotify               `protobuf:"bytes,1,opt,name=msg_read_notify,json=msgReadNotify,proto3" json:"msg_read_notify,omitempty"`                                     // msg_read_notify
	MsgCommGrayTips          *ChannelService_CommGrayTips             `protobuf:"bytes,2,opt,name=msg_comm_gray_tips,json=msgCommGrayTips,proto3" json:"msg_comm_gray_tips,omitempty"`                             // msg_comm_gray_tips
	MsgCreateGuild           *ChannelService_CreateGuild              `protobuf:"bytes,3,opt,name=msg_create_guild,json=msgCreateGuild,proto3" json:"msg_create_guild,omitempty"`                                  // msg_create_guild
	MsgDestroyGuild          *ChannelService_DestroyGuild             `protobuf:"bytes,4,opt,name=msg_destroy_guild,json=msgDestroyGuild,proto3" json:"msg_destroy_guild,omitempty"`                               // msg_destroy_guild
	MsgJoinGuild             *ChannelService_JoinGuild                `protobuf:"bytes,5,opt,name=msg_join_guild,json=msgJoinGuild,proto3" json:"msg_join_guild,omitempty"`                                        // msg_join_guild
	MsgKickOffGuild          *ChannelService_KickOffGuild             `protobuf:"bytes,6,opt,name=msg_kick_off_guild,json=msgKickOffGuild,proto3" json:"msg_kick_off_guild,omitempty"`                             // msg_kick_off_guild
	MsgQuitGuild             *ChannelService_QuitGuild                `protobuf:"bytes,7,opt,name=msg_quit_guild,json=msgQuitGuild,proto3" json:"msg_quit_guild,omitempty"`                                        // msg_quit_guild
	MsgChangeGuildInfo       *ChannelService_ChangeGuildInfo          `protobuf:"bytes,8,opt,name=msg_change_guild_info,json=msgChangeGuildInfo,proto3" json:"msg_change_guild_info,omitempty"`                    // msg_change_guild_info
	MsgCreateChan            *ChannelService_CreateChan               `protobuf:"bytes,9,opt,name=msg_create_chan,json=msgCreateChan,proto3" json:"msg_create_chan,omitempty"`                                     // msg_create_chan
	MsgDestroyChan           *ChannelService_DestroyChan              `protobuf:"bytes,10,opt,name=msg_destroy_chan,json=msgDestroyChan,proto3" json:"msg_destroy_chan,omitempty"`                                 // msg_destroy_chan
	MsgChangeChanInfo        *ChannelService_ChangeChanInfo           `protobuf:"bytes,11,opt,name=msg_change_chan_info,json=msgChangeChanInfo,proto3" json:"msg_change_chan_info,omitempty"`                      // msg_change_chan_info
	MsgSetAdmin              *ChannelService_SetAdmin                 `protobuf:"bytes,12,opt,name=msg_set_admin,json=msgSetAdmin,proto3" json:"msg_set_admin,omitempty"`                                          // msg_set_admin
	MsgSetMsgRecvType        *ChannelService_SetMsgRecvType           `protobuf:"bytes,13,opt,name=msg_set_msg_recv_type,json=msgSetMsgRecvType,proto3" json:"msg_set_msg_recv_type,omitempty"`                    // msg_set_msg_recv_type
	MsgUpdateMsg             *ChannelService_UpdateMsg                `protobuf:"bytes,14,opt,name=msg_update_msg,json=msgUpdateMsg,proto3" json:"msg_update_msg,omitempty"`                                       // msg_update_msg
	MsgSetTop                *ChannelService_SetTop                   `protobuf:"bytes,17,opt,name=msg_set_top,json=msgSetTop,proto3" json:"msg_set_top,omitempty"`                                                // msg_set_top
	MsgSwitchChannel         *ChannelService_SwitchVoiceChannel       `protobuf:"bytes,18,opt,name=msg_switch_channel,json=msgSwitchChannel,proto3" json:"msg_switch_channel,omitempty"`                           // msg_switch_channel
	MsgUpdateCategory        *ChannelService_UpdateCategory           `protobuf:"bytes,21,opt,name=msg_update_category,json=msgUpdateCategory,proto3" json:"msg_update_category,omitempty"`                        // msg_update_category
	MsgUpdateVoiceBlockList  *ChannelService_UpdateVoiceBlockList     `protobuf:"bytes,22,opt,name=msg_update_voice_block_list,json=msgUpdateVoiceBlockList,proto3" json:"msg_update_voice_block_list,omitempty"`  // msg_update_voice_block_list
	MsgSetMute               *ChannelService_SetMute                  `protobuf:"bytes,23,opt,name=msg_set_mute,json=msgSetMute,proto3" json:"msg_set_mute,omitempty"`                                             // msg_set_mute
	MsgLiveStatusChangeRoom  *ChannelService_LiveRoomStatusChangeMsg  `protobuf:"bytes,24,opt,name=msg_live_status_change_room,json=msgLiveStatusChangeRoom,proto3" json:"msg_live_status_change_room,omitempty"`  // msg_live_status_change_room
	MsgSwitchLiveRoom        *ChannelService_SwitchLiveRoom           `protobuf:"bytes,25,opt,name=msg_switch_live_room,json=msgSwitchLiveRoom,proto3" json:"msg_switch_live_room,omitempty"`                      // msg_switch_live_room
	MsgEvents                []*ChannelService_MsgEvent               `protobuf:"bytes,39,rep,name=msg_events,json=msgEvents,proto3" json:"msg_events,omitempty"`                                                  // msg_events
	MsgScheduler             *ChannelService_SchedulerMsg             `protobuf:"bytes,40,opt,name=msg_scheduler,json=msgScheduler,proto3" json:"msg_scheduler,omitempty"`                                         // msg_scheduler
	MsgAppChannel            *ChannelService_AppChannelMsg            `protobuf:"bytes,41,opt,name=msg_app_channel,json=msgAppChannel,proto3" json:"msg_app_channel,omitempty"`                                    // msg_app_channel
	FeedEvent                *ChannelService_FeedEvent                `protobuf:"bytes,44,opt,name=feed_event,json=feedEvent,proto3" json:"feed_event,omitempty"`                                                  // feed_event
	WeakMsgAppChannel        *ChannelService_AppChannelMsg            `protobuf:"bytes,46,opt,name=weak_msg_app_channel,json=weakMsgAppChannel,proto3" json:"weak_msg_app_channel,omitempty"`                      // weak_msg_app_channel
	ReadFeedNotify           *ChannelService_ReadFeedNotify           `protobuf:"bytes,48,opt,name=read_feed_notify,json=readFeedNotify,proto3" json:"read_feed_notify,omitempty"`                                 // read_feed_notify
	QuestionChannelSystemMsg *ChannelService_QuestionChannelSystemMsg `protobuf:"bytes,63,opt,name=question_channel_system_msg,json=questionChannelSystemMsg,proto3" json:"question_channel_system_msg,omitempty"` // question_channel_system_msg
}

func (x *ChannelService_EventBody) Reset() {
	*x = ChannelService_EventBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_EventBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_EventBody) ProtoMessage() {}

func (x *ChannelService_EventBody) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_EventBody.ProtoReflect.Descriptor instead.
func (*ChannelService_EventBody) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 13}
}

func (x *ChannelService_EventBody) GetMsgReadNotify() *ChannelService_ReadNotify {
	if x != nil {
		return x.MsgReadNotify
	}
	return nil
}

func (x *ChannelService_EventBody) GetMsgCommGrayTips() *ChannelService_CommGrayTips {
	if x != nil {
		return x.MsgCommGrayTips
	}
	return nil
}

func (x *ChannelService_EventBody) GetMsgCreateGuild() *ChannelService_CreateGuild {
	if x != nil {
		return x.MsgCreateGuild
	}
	return nil
}

func (x *ChannelService_EventBody) GetMsgDestroyGuild() *ChannelService_DestroyGuild {
	if x != nil {
		return x.MsgDestroyGuild
	}
	return nil
}

func (x *ChannelService_EventBody) GetMsgJoinGuild() *ChannelService_JoinGuild {
	if x != nil {
		return x.MsgJoinGuild
	}
	return nil
}

func (x *ChannelService_EventBody) GetMsgKickOffGuild() *ChannelService_KickOffGuild {
	if x != nil {
		return x.MsgKickOffGuild
	}
	return nil
}

func (x *ChannelService_EventBody) GetMsgQuitGuild() *ChannelService_QuitGuild {
	if x != nil {
		return x.MsgQuitGuild
	}
	return nil
}

func (x *ChannelService_EventBody) GetMsgChangeGuildInfo() *ChannelService_ChangeGuildInfo {
	if x != nil {
		return x.MsgChangeGuildInfo
	}
	return nil
}

func (x *ChannelService_EventBody) GetMsgCreateChan() *ChannelService_CreateChan {
	if x != nil {
		return x.MsgCreateChan
	}
	return nil
}

func (x *ChannelService_EventBody) GetMsgDestroyChan() *ChannelService_DestroyChan {
	if x != nil {
		return x.MsgDestroyChan
	}
	return nil
}

func (x *ChannelService_EventBody) GetMsgChangeChanInfo() *ChannelService_ChangeChanInfo {
	if x != nil {
		return x.MsgChangeChanInfo
	}
	return nil
}

func (x *ChannelService_EventBody) GetMsgSetAdmin() *ChannelService_SetAdmin {
	if x != nil {
		return x.MsgSetAdmin
	}
	return nil
}

func (x *ChannelService_EventBody) GetMsgSetMsgRecvType() *ChannelService_SetMsgRecvType {
	if x != nil {
		return x.MsgSetMsgRecvType
	}
	return nil
}

func (x *ChannelService_EventBody) GetMsgUpdateMsg() *ChannelService_UpdateMsg {
	if x != nil {
		return x.MsgUpdateMsg
	}
	return nil
}

func (x *ChannelService_EventBody) GetMsgSetTop() *ChannelService_SetTop {
	if x != nil {
		return x.MsgSetTop
	}
	return nil
}

func (x *ChannelService_EventBody) GetMsgSwitchChannel() *ChannelService_SwitchVoiceChannel {
	if x != nil {
		return x.MsgSwitchChannel
	}
	return nil
}

func (x *ChannelService_EventBody) GetMsgUpdateCategory() *ChannelService_UpdateCategory {
	if x != nil {
		return x.MsgUpdateCategory
	}
	return nil
}

func (x *ChannelService_EventBody) GetMsgUpdateVoiceBlockList() *ChannelService_UpdateVoiceBlockList {
	if x != nil {
		return x.MsgUpdateVoiceBlockList
	}
	return nil
}

func (x *ChannelService_EventBody) GetMsgSetMute() *ChannelService_SetMute {
	if x != nil {
		return x.MsgSetMute
	}
	return nil
}

func (x *ChannelService_EventBody) GetMsgLiveStatusChangeRoom() *ChannelService_LiveRoomStatusChangeMsg {
	if x != nil {
		return x.MsgLiveStatusChangeRoom
	}
	return nil
}

func (x *ChannelService_EventBody) GetMsgSwitchLiveRoom() *ChannelService_SwitchLiveRoom {
	if x != nil {
		return x.MsgSwitchLiveRoom
	}
	return nil
}

func (x *ChannelService_EventBody) GetMsgEvents() []*ChannelService_MsgEvent {
	if x != nil {
		return x.MsgEvents
	}
	return nil
}

func (x *ChannelService_EventBody) GetMsgScheduler() *ChannelService_SchedulerMsg {
	if x != nil {
		return x.MsgScheduler
	}
	return nil
}

func (x *ChannelService_EventBody) GetMsgAppChannel() *ChannelService_AppChannelMsg {
	if x != nil {
		return x.MsgAppChannel
	}
	return nil
}

func (x *ChannelService_EventBody) GetFeedEvent() *ChannelService_FeedEvent {
	if x != nil {
		return x.FeedEvent
	}
	return nil
}

func (x *ChannelService_EventBody) GetWeakMsgAppChannel() *ChannelService_AppChannelMsg {
	if x != nil {
		return x.WeakMsgAppChannel
	}
	return nil
}

func (x *ChannelService_EventBody) GetReadFeedNotify() *ChannelService_ReadFeedNotify {
	if x != nil {
		return x.ReadFeedNotify
	}
	return nil
}

func (x *ChannelService_EventBody) GetQuestionChannelSystemMsg() *ChannelService_QuestionChannelSystemMsg {
	if x != nil {
		return x.QuestionChannelSystemMsg
	}
	return nil
}

// FeedEvent is the message type for the FeedEvent.
type ChannelService_FeedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId    uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`         // uint64_guild_id
	ChannelId  uint64 `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`   // uint64_channel_id
	FeedId     string `protobuf:"bytes,3,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`             // str_feed_id
	MsgSummary string `protobuf:"bytes,4,opt,name=msg_summary,json=msgSummary,proto3" json:"msg_summary,omitempty"` // str_msg_summary
	EventTime  uint64 `protobuf:"varint,5,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`   // uint64_event_time
}

func (x *ChannelService_FeedEvent) Reset() {
	*x = ChannelService_FeedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_FeedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_FeedEvent) ProtoMessage() {}

func (x *ChannelService_FeedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_FeedEvent.ProtoReflect.Descriptor instead.
func (*ChannelService_FeedEvent) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 14}
}

func (x *ChannelService_FeedEvent) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *ChannelService_FeedEvent) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelService_FeedEvent) GetFeedId() string {
	if x != nil {
		return x.FeedId
	}
	return ""
}

func (x *ChannelService_FeedEvent) GetMsgSummary() string {
	if x != nil {
		return x.MsgSummary
	}
	return ""
}

func (x *ChannelService_FeedEvent) GetEventTime() uint64 {
	if x != nil {
		return x.EventTime
	}
	return 0
}

// GroupProStatus is the message type for the GroupProStatus.
type ChannelService_GroupProStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEnable uint32 `protobuf:"varint,1,opt,name=is_enable,json=isEnable,proto3" json:"is_enable,omitempty"` // uint32_is_enable
	IsBanned uint32 `protobuf:"varint,2,opt,name=is_banned,json=isBanned,proto3" json:"is_banned,omitempty"` // uint32_is_banned
	IsFrozen uint32 `protobuf:"varint,3,opt,name=is_frozen,json=isFrozen,proto3" json:"is_frozen,omitempty"` // uint32_is_frozen
}

func (x *ChannelService_GroupProStatus) Reset() {
	*x = ChannelService_GroupProStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_GroupProStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_GroupProStatus) ProtoMessage() {}

func (x *ChannelService_GroupProStatus) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_GroupProStatus.ProtoReflect.Descriptor instead.
func (*ChannelService_GroupProStatus) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 15}
}

func (x *ChannelService_GroupProStatus) GetIsEnable() uint32 {
	if x != nil {
		return x.IsEnable
	}
	return 0
}

func (x *ChannelService_GroupProStatus) GetIsBanned() uint32 {
	if x != nil {
		return x.IsBanned
	}
	return 0
}

func (x *ChannelService_GroupProStatus) GetIsFrozen() uint32 {
	if x != nil {
		return x.IsFrozen
	}
	return 0
}

// GuildInfo is the message type for the GuildInfo.
type ChannelService_GuildInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildCode             uint64                         `protobuf:"varint,2,opt,name=guild_code,json=guildCode,proto3" json:"guild_code,omitempty"`                                             // uint64_guild_code
	OwnerId               uint64                         `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`                                                   // uint64_owner_id
	CreateTime            uint64                         `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                          // uint64_create_time
	MemberMaxNum          uint32                         `protobuf:"varint,5,opt,name=member_max_num,json=memberMaxNum,proto3" json:"member_max_num,omitempty"`                                  // uint32_member_max_num
	MemberNum             uint32                         `protobuf:"varint,6,opt,name=member_num,json=memberNum,proto3" json:"member_num,omitempty"`                                             // uint32_member_num
	GuildType             uint32                         `protobuf:"varint,7,opt,name=guild_type,json=guildType,proto3" json:"guild_type,omitempty"`                                             // uint32_guild_type
	GuildName             []byte                         `protobuf:"bytes,8,opt,name=guild_name,json=guildName,proto3" json:"guild_name,omitempty"`                                              // bytes_guild_name
	RobotList             []uint64                       `protobuf:"varint,9,rep,packed,name=robot_list,json=robotList,proto3" json:"robot_list,omitempty"`                                      // rpt_robot_list
	AdminList             []uint64                       `protobuf:"varint,10,rep,packed,name=admin_list,json=adminList,proto3" json:"admin_list,omitempty"`                                     // rpt_admin_list
	RobotMaxNum           uint32                         `protobuf:"varint,11,opt,name=robot_max_num,json=robotMaxNum,proto3" json:"robot_max_num,omitempty"`                                    // uint32_robot_max_num
	AdminMaxNum           uint32                         `protobuf:"varint,12,opt,name=admin_max_num,json=adminMaxNum,proto3" json:"admin_max_num,omitempty"`                                    // uint32_admin_max_num
	Profile               []byte                         `protobuf:"bytes,13,opt,name=profile,proto3" json:"profile,omitempty"`                                                                  // bytes_profile
	FaceSeq               uint64                         `protobuf:"varint,14,opt,name=face_seq,json=faceSeq,proto3" json:"face_seq,omitempty"`                                                  // uint64_face_seq
	MsgGuildStatus        *ChannelService_GroupProStatus `protobuf:"bytes,15,opt,name=msg_guild_status,json=msgGuildStatus,proto3" json:"msg_guild_status,omitempty"`                            // msg_guild_status
	ChannelNum            uint32                         `protobuf:"varint,16,opt,name=channel_num,json=channelNum,proto3" json:"channel_num,omitempty"`                                         // uint32_channel_num
	MsgMemberChangeSeq    *SvcCommon_MsgSeq              `protobuf:"bytes,5002,opt,name=msg_member_change_seq,json=msgMemberChangeSeq,proto3" json:"msg_member_change_seq,omitempty"`            // msg_member_change_seq
	MsgGuildInfoChangeSeq *SvcCommon_MsgSeq              `protobuf:"bytes,5003,opt,name=msg_guild_info_change_seq,json=msgGuildInfoChangeSeq,proto3" json:"msg_guild_info_change_seq,omitempty"` // msg_guild_info_change_seq
	MsgChannelChangeSeq   *SvcCommon_MsgSeq              `protobuf:"bytes,5004,opt,name=msg_channel_change_seq,json=msgChannelChangeSeq,proto3" json:"msg_channel_change_seq,omitempty"`         // msg_channel_change_seq
}

func (x *ChannelService_GuildInfo) Reset() {
	*x = ChannelService_GuildInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_GuildInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_GuildInfo) ProtoMessage() {}

func (x *ChannelService_GuildInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_GuildInfo.ProtoReflect.Descriptor instead.
func (*ChannelService_GuildInfo) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 16}
}

func (x *ChannelService_GuildInfo) GetGuildCode() uint64 {
	if x != nil {
		return x.GuildCode
	}
	return 0
}

func (x *ChannelService_GuildInfo) GetOwnerId() uint64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *ChannelService_GuildInfo) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ChannelService_GuildInfo) GetMemberMaxNum() uint32 {
	if x != nil {
		return x.MemberMaxNum
	}
	return 0
}

func (x *ChannelService_GuildInfo) GetMemberNum() uint32 {
	if x != nil {
		return x.MemberNum
	}
	return 0
}

func (x *ChannelService_GuildInfo) GetGuildType() uint32 {
	if x != nil {
		return x.GuildType
	}
	return 0
}

func (x *ChannelService_GuildInfo) GetGuildName() []byte {
	if x != nil {
		return x.GuildName
	}
	return nil
}

func (x *ChannelService_GuildInfo) GetRobotList() []uint64 {
	if x != nil {
		return x.RobotList
	}
	return nil
}

func (x *ChannelService_GuildInfo) GetAdminList() []uint64 {
	if x != nil {
		return x.AdminList
	}
	return nil
}

func (x *ChannelService_GuildInfo) GetRobotMaxNum() uint32 {
	if x != nil {
		return x.RobotMaxNum
	}
	return 0
}

func (x *ChannelService_GuildInfo) GetAdminMaxNum() uint32 {
	if x != nil {
		return x.AdminMaxNum
	}
	return 0
}

func (x *ChannelService_GuildInfo) GetProfile() []byte {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *ChannelService_GuildInfo) GetFaceSeq() uint64 {
	if x != nil {
		return x.FaceSeq
	}
	return 0
}

func (x *ChannelService_GuildInfo) GetMsgGuildStatus() *ChannelService_GroupProStatus {
	if x != nil {
		return x.MsgGuildStatus
	}
	return nil
}

func (x *ChannelService_GuildInfo) GetChannelNum() uint32 {
	if x != nil {
		return x.ChannelNum
	}
	return 0
}

func (x *ChannelService_GuildInfo) GetMsgMemberChangeSeq() *SvcCommon_MsgSeq {
	if x != nil {
		return x.MsgMemberChangeSeq
	}
	return nil
}

func (x *ChannelService_GuildInfo) GetMsgGuildInfoChangeSeq() *SvcCommon_MsgSeq {
	if x != nil {
		return x.MsgGuildInfoChangeSeq
	}
	return nil
}

func (x *ChannelService_GuildInfo) GetMsgChannelChangeSeq() *SvcCommon_MsgSeq {
	if x != nil {
		return x.MsgChannelChangeSeq
	}
	return nil
}

// GuildInfoFilter is the message type for the GuildInfoFilter.
type ChannelService_GuildInfoFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildCode          uint32 `protobuf:"varint,2,opt,name=guild_code,json=guildCode,proto3" json:"guild_code,omitempty"`                                   // uint32_guild_code
	OwnerId            uint32 `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`                                         // uint32_owner_id
	CreateTime         uint32 `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                // uint32_create_time
	MemberMaxNum       uint32 `protobuf:"varint,5,opt,name=member_max_num,json=memberMaxNum,proto3" json:"member_max_num,omitempty"`                        // uint32_member_max_num
	MemberNum          uint32 `protobuf:"varint,6,opt,name=member_num,json=memberNum,proto3" json:"member_num,omitempty"`                                   // uint32_member_num
	GuildType          uint32 `protobuf:"varint,7,opt,name=guild_type,json=guildType,proto3" json:"guild_type,omitempty"`                                   // uint32_guild_type
	GuildName          uint32 `protobuf:"varint,8,opt,name=guild_name,json=guildName,proto3" json:"guild_name,omitempty"`                                   // uint32_guild_name
	RobotList          uint32 `protobuf:"varint,9,opt,name=robot_list,json=robotList,proto3" json:"robot_list,omitempty"`                                   // uint32_robot_list
	AdminList          uint32 `protobuf:"varint,10,opt,name=admin_list,json=adminList,proto3" json:"admin_list,omitempty"`                                  // uint32_admin_list
	RobotMaxNum        uint32 `protobuf:"varint,11,opt,name=robot_max_num,json=robotMaxNum,proto3" json:"robot_max_num,omitempty"`                          // uint32_robot_max_num
	AdminMaxNum        uint32 `protobuf:"varint,12,opt,name=admin_max_num,json=adminMaxNum,proto3" json:"admin_max_num,omitempty"`                          // uint32_admin_max_num
	Profile            uint32 `protobuf:"varint,13,opt,name=profile,proto3" json:"profile,omitempty"`                                                       // uint32_profile
	FaceSeq            uint32 `protobuf:"varint,14,opt,name=face_seq,json=faceSeq,proto3" json:"face_seq,omitempty"`                                        // uint32_face_seq
	GuildStatus        uint32 `protobuf:"varint,15,opt,name=guild_status,json=guildStatus,proto3" json:"guild_status,omitempty"`                            // uint32_guild_status
	ChannelNum         uint32 `protobuf:"varint,16,opt,name=channel_num,json=channelNum,proto3" json:"channel_num,omitempty"`                               // uint32_channel_num
	MemberChangeSeq    uint32 `protobuf:"varint,5002,opt,name=member_change_seq,json=memberChangeSeq,proto3" json:"member_change_seq,omitempty"`            // uint32_member_change_seq
	GuildInfoChangeSeq uint32 `protobuf:"varint,5003,opt,name=guild_info_change_seq,json=guildInfoChangeSeq,proto3" json:"guild_info_change_seq,omitempty"` // uint32_guild_info_change_seq
	ChannelChangeSeq   uint32 `protobuf:"varint,5004,opt,name=channel_change_seq,json=channelChangeSeq,proto3" json:"channel_change_seq,omitempty"`         // uint32_channel_change_seq
}

func (x *ChannelService_GuildInfoFilter) Reset() {
	*x = ChannelService_GuildInfoFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_GuildInfoFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_GuildInfoFilter) ProtoMessage() {}

func (x *ChannelService_GuildInfoFilter) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_GuildInfoFilter.ProtoReflect.Descriptor instead.
func (*ChannelService_GuildInfoFilter) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 17}
}

func (x *ChannelService_GuildInfoFilter) GetGuildCode() uint32 {
	if x != nil {
		return x.GuildCode
	}
	return 0
}

func (x *ChannelService_GuildInfoFilter) GetOwnerId() uint32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *ChannelService_GuildInfoFilter) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ChannelService_GuildInfoFilter) GetMemberMaxNum() uint32 {
	if x != nil {
		return x.MemberMaxNum
	}
	return 0
}

func (x *ChannelService_GuildInfoFilter) GetMemberNum() uint32 {
	if x != nil {
		return x.MemberNum
	}
	return 0
}

func (x *ChannelService_GuildInfoFilter) GetGuildType() uint32 {
	if x != nil {
		return x.GuildType
	}
	return 0
}

func (x *ChannelService_GuildInfoFilter) GetGuildName() uint32 {
	if x != nil {
		return x.GuildName
	}
	return 0
}

func (x *ChannelService_GuildInfoFilter) GetRobotList() uint32 {
	if x != nil {
		return x.RobotList
	}
	return 0
}

func (x *ChannelService_GuildInfoFilter) GetAdminList() uint32 {
	if x != nil {
		return x.AdminList
	}
	return 0
}

func (x *ChannelService_GuildInfoFilter) GetRobotMaxNum() uint32 {
	if x != nil {
		return x.RobotMaxNum
	}
	return 0
}

func (x *ChannelService_GuildInfoFilter) GetAdminMaxNum() uint32 {
	if x != nil {
		return x.AdminMaxNum
	}
	return 0
}

func (x *ChannelService_GuildInfoFilter) GetProfile() uint32 {
	if x != nil {
		return x.Profile
	}
	return 0
}

func (x *ChannelService_GuildInfoFilter) GetFaceSeq() uint32 {
	if x != nil {
		return x.FaceSeq
	}
	return 0
}

func (x *ChannelService_GuildInfoFilter) GetGuildStatus() uint32 {
	if x != nil {
		return x.GuildStatus
	}
	return 0
}

func (x *ChannelService_GuildInfoFilter) GetChannelNum() uint32 {
	if x != nil {
		return x.ChannelNum
	}
	return 0
}

func (x *ChannelService_GuildInfoFilter) GetMemberChangeSeq() uint32 {
	if x != nil {
		return x.MemberChangeSeq
	}
	return 0
}

func (x *ChannelService_GuildInfoFilter) GetGuildInfoChangeSeq() uint32 {
	if x != nil {
		return x.GuildInfoChangeSeq
	}
	return 0
}

func (x *ChannelService_GuildInfoFilter) GetChannelChangeSeq() uint32 {
	if x != nil {
		return x.ChannelChangeSeq
	}
	return 0
}

// JoinGuild is the message type for the JoinGuild.
type ChannelService_JoinGuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId     uint64 `protobuf:"varint,3,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`             // uint64_member_id
	MemberType   uint32 `protobuf:"varint,4,opt,name=member_type,json=memberType,proto3" json:"member_type,omitempty"`       // uint32_member_type
	MemberTinyid uint64 `protobuf:"varint,5,opt,name=member_tinyid,json=memberTinyid,proto3" json:"member_tinyid,omitempty"` // uint64_member_tinyid
}

func (x *ChannelService_JoinGuild) Reset() {
	*x = ChannelService_JoinGuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_JoinGuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_JoinGuild) ProtoMessage() {}

func (x *ChannelService_JoinGuild) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_JoinGuild.ProtoReflect.Descriptor instead.
func (*ChannelService_JoinGuild) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 18}
}

func (x *ChannelService_JoinGuild) GetMemberId() uint64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *ChannelService_JoinGuild) GetMemberType() uint32 {
	if x != nil {
		return x.MemberType
	}
	return 0
}

func (x *ChannelService_JoinGuild) GetMemberTinyid() uint64 {
	if x != nil {
		return x.MemberTinyid
	}
	return 0
}

// KickOffGuild is the message type for the KickOffGuild.
type ChannelService_KickOffGuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId     uint64 `protobuf:"varint,3,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`             // uint64_member_id
	SetBlack     uint32 `protobuf:"varint,4,opt,name=set_black,json=setBlack,proto3" json:"set_black,omitempty"`             // uint32_set_black
	MemberTinyid uint64 `protobuf:"varint,5,opt,name=member_tinyid,json=memberTinyid,proto3" json:"member_tinyid,omitempty"` // uint64_member_tinyid
}

func (x *ChannelService_KickOffGuild) Reset() {
	*x = ChannelService_KickOffGuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_KickOffGuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_KickOffGuild) ProtoMessage() {}

func (x *ChannelService_KickOffGuild) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_KickOffGuild.ProtoReflect.Descriptor instead.
func (*ChannelService_KickOffGuild) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 19}
}

func (x *ChannelService_KickOffGuild) GetMemberId() uint64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *ChannelService_KickOffGuild) GetSetBlack() uint32 {
	if x != nil {
		return x.SetBlack
	}
	return 0
}

func (x *ChannelService_KickOffGuild) GetMemberTinyid() uint64 {
	if x != nil {
		return x.MemberTinyid
	}
	return 0
}

// LiveChannelInfo is the message type for the LiveChannelInfo.
type ChannelService_LiveChannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId    uint64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`          // uint64_room_id
	AnchorUin uint64 `protobuf:"varint,2,opt,name=anchor_uin,json=anchorUin,proto3" json:"anchor_uin,omitempty"` // uint64_anchor_uin
	Name      []byte `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                             // bytes_name
}

func (x *ChannelService_LiveChannelInfo) Reset() {
	*x = ChannelService_LiveChannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_LiveChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_LiveChannelInfo) ProtoMessage() {}

func (x *ChannelService_LiveChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_LiveChannelInfo.ProtoReflect.Descriptor instead.
func (*ChannelService_LiveChannelInfo) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 20}
}

func (x *ChannelService_LiveChannelInfo) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *ChannelService_LiveChannelInfo) GetAnchorUin() uint64 {
	if x != nil {
		return x.AnchorUin
	}
	return 0
}

func (x *ChannelService_LiveChannelInfo) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

// LiveChannelInfoFilter is the message type for the LiveChannelInfoFilter.
type ChannelService_LiveChannelInfoFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNeedRoomId    uint32 `protobuf:"varint,1,opt,name=is_need_room_id,json=isNeedRoomId,proto3" json:"is_need_room_id,omitempty"`          // uint32_is_need_room_id
	IsNeedAnchorUin uint32 `protobuf:"varint,2,opt,name=is_need_anchor_uin,json=isNeedAnchorUin,proto3" json:"is_need_anchor_uin,omitempty"` // uint32_is_need_anchor_uin
	IsNeedName      uint32 `protobuf:"varint,3,opt,name=is_need_name,json=isNeedName,proto3" json:"is_need_name,omitempty"`                  // uint32_is_need_name
}

func (x *ChannelService_LiveChannelInfoFilter) Reset() {
	*x = ChannelService_LiveChannelInfoFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_LiveChannelInfoFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_LiveChannelInfoFilter) ProtoMessage() {}

func (x *ChannelService_LiveChannelInfoFilter) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_LiveChannelInfoFilter.ProtoReflect.Descriptor instead.
func (*ChannelService_LiveChannelInfoFilter) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 21}
}

func (x *ChannelService_LiveChannelInfoFilter) GetIsNeedRoomId() uint32 {
	if x != nil {
		return x.IsNeedRoomId
	}
	return 0
}

func (x *ChannelService_LiveChannelInfoFilter) GetIsNeedAnchorUin() uint32 {
	if x != nil {
		return x.IsNeedAnchorUin
	}
	return 0
}

func (x *ChannelService_LiveChannelInfoFilter) GetIsNeedName() uint32 {
	if x != nil {
		return x.IsNeedName
	}
	return 0
}

// LiveRoomStatusChangeMsg is the message type for the LiveRoomStatusChangeMsg.
type ChannelService_LiveRoomStatusChangeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId      uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`                // guild_id
	ChannelId    uint64 `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`          // channel_id
	RoomId       uint64 `protobuf:"varint,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                   // room_id
	AnchorTinyid uint64 `protobuf:"varint,4,opt,name=anchor_tinyid,json=anchorTinyid,proto3" json:"anchor_tinyid,omitempty"` // anchor_tinyid
	Action       int32  `protobuf:"varint,5,opt,name=action,proto3" json:"action,omitempty"`                                 // action
}

func (x *ChannelService_LiveRoomStatusChangeMsg) Reset() {
	*x = ChannelService_LiveRoomStatusChangeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_LiveRoomStatusChangeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_LiveRoomStatusChangeMsg) ProtoMessage() {}

func (x *ChannelService_LiveRoomStatusChangeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_LiveRoomStatusChangeMsg.ProtoReflect.Descriptor instead.
func (*ChannelService_LiveRoomStatusChangeMsg) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 22}
}

func (x *ChannelService_LiveRoomStatusChangeMsg) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *ChannelService_LiveRoomStatusChangeMsg) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelService_LiveRoomStatusChangeMsg) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *ChannelService_LiveRoomStatusChangeMsg) GetAnchorTinyid() uint64 {
	if x != nil {
		return x.AnchorTinyid
	}
	return 0
}

func (x *ChannelService_LiveRoomStatusChangeMsg) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

// MsgEvent is the message type for the MsgEvent.
type ChannelService_MsgEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgSeq       uint64 `protobuf:"varint,1,opt,name=msg_seq,json=msgSeq,proto3" json:"msg_seq,omitempty"`                   // msg_seq
	EventType    uint64 `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`          // event_type
	EventVersion uint64 `protobuf:"varint,3,opt,name=event_version,json=eventVersion,proto3" json:"event_version,omitempty"` // event_version
}

func (x *ChannelService_MsgEvent) Reset() {
	*x = ChannelService_MsgEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_MsgEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_MsgEvent) ProtoMessage() {}

func (x *ChannelService_MsgEvent) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_MsgEvent.ProtoReflect.Descriptor instead.
func (*ChannelService_MsgEvent) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 23}
}

func (x *ChannelService_MsgEvent) GetMsgSeq() uint64 {
	if x != nil {
		return x.MsgSeq
	}
	return 0
}

func (x *ChannelService_MsgEvent) GetEventType() uint64 {
	if x != nil {
		return x.EventType
	}
	return 0
}

func (x *ChannelService_MsgEvent) GetEventVersion() uint64 {
	if x != nil {
		return x.EventVersion
	}
	return 0
}

// MsgSeq is the message type for the MsgSeq.
type ChannelService_MsgSeq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seq  uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`   // uint64_seq
	Time uint64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"` // uint64_time
}

func (x *ChannelService_MsgSeq) Reset() {
	*x = ChannelService_MsgSeq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_MsgSeq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_MsgSeq) ProtoMessage() {}

func (x *ChannelService_MsgSeq) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_MsgSeq.ProtoReflect.Descriptor instead.
func (*ChannelService_MsgSeq) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 24}
}

func (x *ChannelService_MsgSeq) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *ChannelService_MsgSeq) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// QuestionChannelSystemMsg is the message type for the QuestionChannelSystemMsg.
type ChannelService_QuestionChannelSystemMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusiType uint32 `protobuf:"varint,1,opt,name=busi_type,json=busiType,proto3" json:"busi_type,omitempty"` // busi_type
	BusiData []byte `protobuf:"bytes,2,opt,name=busi_data,json=busiData,proto3" json:"busi_data,omitempty"`  // busi_data
}

func (x *ChannelService_QuestionChannelSystemMsg) Reset() {
	*x = ChannelService_QuestionChannelSystemMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_QuestionChannelSystemMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_QuestionChannelSystemMsg) ProtoMessage() {}

func (x *ChannelService_QuestionChannelSystemMsg) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_QuestionChannelSystemMsg.ProtoReflect.Descriptor instead.
func (*ChannelService_QuestionChannelSystemMsg) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 25}
}

func (x *ChannelService_QuestionChannelSystemMsg) GetBusiType() uint32 {
	if x != nil {
		return x.BusiType
	}
	return 0
}

func (x *ChannelService_QuestionChannelSystemMsg) GetBusiData() []byte {
	if x != nil {
		return x.BusiData
	}
	return nil
}

// QuitGuild is the message type for the QuitGuild.
type ChannelService_QuitGuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChannelService_QuitGuild) Reset() {
	*x = ChannelService_QuitGuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_QuitGuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_QuitGuild) ProtoMessage() {}

func (x *ChannelService_QuitGuild) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_QuitGuild.ProtoReflect.Descriptor instead.
func (*ChannelService_QuitGuild) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 26}
}

// ReadFeedNotify is the message type for the ReadFeedNotify.
type ChannelService_ReadFeedNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportTime uint64 `protobuf:"varint,2,opt,name=report_time,json=reportTime,proto3" json:"report_time,omitempty"` // report_time
}

func (x *ChannelService_ReadFeedNotify) Reset() {
	*x = ChannelService_ReadFeedNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_ReadFeedNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_ReadFeedNotify) ProtoMessage() {}

func (x *ChannelService_ReadFeedNotify) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_ReadFeedNotify.ProtoReflect.Descriptor instead.
func (*ChannelService_ReadFeedNotify) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 27}
}

func (x *ChannelService_ReadFeedNotify) GetReportTime() uint64 {
	if x != nil {
		return x.ReportTime
	}
	return 0
}

// ReadNotify is the message type for the ReadNotify.
type ChannelService_ReadNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId        uint64            `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`                           // uint64_channel_id
	GuildId          uint64            `protobuf:"varint,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`                                 // uint64_guild_id
	MsgReadMsgSeq    *SvcCommon_MsgSeq `protobuf:"bytes,3,opt,name=msg_read_msg_seq,json=msgReadMsgSeq,proto3" json:"msg_read_msg_seq,omitempty"`            // msg_read_msg_seq
	MsgReadCntMsgSeq *SvcCommon_MsgSeq `protobuf:"bytes,4,opt,name=msg_read_cnt_msg_seq,json=msgReadCntMsgSeq,proto3" json:"msg_read_cnt_msg_seq,omitempty"` // msg_read_cnt_msg_seq
	ReadMsgMeta      []byte            `protobuf:"bytes,5,opt,name=read_msg_meta,json=readMsgMeta,proto3" json:"read_msg_meta,omitempty"`                    // bytes_read_msg_meta
}

func (x *ChannelService_ReadNotify) Reset() {
	*x = ChannelService_ReadNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_ReadNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_ReadNotify) ProtoMessage() {}

func (x *ChannelService_ReadNotify) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_ReadNotify.ProtoReflect.Descriptor instead.
func (*ChannelService_ReadNotify) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 28}
}

func (x *ChannelService_ReadNotify) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelService_ReadNotify) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *ChannelService_ReadNotify) GetMsgReadMsgSeq() *SvcCommon_MsgSeq {
	if x != nil {
		return x.MsgReadMsgSeq
	}
	return nil
}

func (x *ChannelService_ReadNotify) GetMsgReadCntMsgSeq() *SvcCommon_MsgSeq {
	if x != nil {
		return x.MsgReadCntMsgSeq
	}
	return nil
}

func (x *ChannelService_ReadNotify) GetReadMsgMeta() []byte {
	if x != nil {
		return x.ReadMsgMeta
	}
	return nil
}

// SchedulerMsg is the message type for the SchedulerMsg.
type ChannelService_SchedulerMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatorHeadUrl []byte `protobuf:"bytes,1,opt,name=creator_head_url,json=creatorHeadUrl,proto3" json:"creator_head_url,omitempty"` // creator_head_url
	Wording        string `protobuf:"bytes,2,opt,name=wording,proto3" json:"wording,omitempty"`                                       // wording
	ExpireTimeMs   uint64 `protobuf:"varint,3,opt,name=expire_time_ms,json=expireTimeMs,proto3" json:"expire_time_ms,omitempty"`      // expire_time_ms
}

func (x *ChannelService_SchedulerMsg) Reset() {
	*x = ChannelService_SchedulerMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_SchedulerMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_SchedulerMsg) ProtoMessage() {}

func (x *ChannelService_SchedulerMsg) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_SchedulerMsg.ProtoReflect.Descriptor instead.
func (*ChannelService_SchedulerMsg) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 29}
}

func (x *ChannelService_SchedulerMsg) GetCreatorHeadUrl() []byte {
	if x != nil {
		return x.CreatorHeadUrl
	}
	return nil
}

func (x *ChannelService_SchedulerMsg) GetWording() string {
	if x != nil {
		return x.Wording
	}
	return ""
}

func (x *ChannelService_SchedulerMsg) GetExpireTimeMs() uint64 {
	if x != nil {
		return x.ExpireTimeMs
	}
	return 0
}

// SetAdmin is the message type for the SetAdmin.
type ChannelService_SetAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId     uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`             // uint64_guild_id
	ChanId      uint64 `protobuf:"varint,2,opt,name=chan_id,json=chanId,proto3" json:"chan_id,omitempty"`                // uint64_chan_id
	OperatorId  uint64 `protobuf:"varint,3,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`    // uint64_operator_id
	AdminId     uint64 `protobuf:"varint,4,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`             // uint64_admin_id
	AdminTinyid uint64 `protobuf:"varint,5,opt,name=admin_tinyid,json=adminTinyid,proto3" json:"admin_tinyid,omitempty"` // uint64_admin_tinyid
	OperateType uint32 `protobuf:"varint,6,opt,name=operate_type,json=operateType,proto3" json:"operate_type,omitempty"` // uint32_operate_type
}

func (x *ChannelService_SetAdmin) Reset() {
	*x = ChannelService_SetAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_SetAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_SetAdmin) ProtoMessage() {}

func (x *ChannelService_SetAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_SetAdmin.ProtoReflect.Descriptor instead.
func (*ChannelService_SetAdmin) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 30}
}

func (x *ChannelService_SetAdmin) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *ChannelService_SetAdmin) GetChanId() uint64 {
	if x != nil {
		return x.ChanId
	}
	return 0
}

func (x *ChannelService_SetAdmin) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *ChannelService_SetAdmin) GetAdminId() uint64 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *ChannelService_SetAdmin) GetAdminTinyid() uint64 {
	if x != nil {
		return x.AdminTinyid
	}
	return 0
}

func (x *ChannelService_SetAdmin) GetOperateType() uint32 {
	if x != nil {
		return x.OperateType
	}
	return 0
}

// SetMsgRecvType is the message type for the SetMsgRecvType.
type ChannelService_SetMsgRecvType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId       uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`                     // uint64_guild_id
	ChanId        uint64 `protobuf:"varint,2,opt,name=chan_id,json=chanId,proto3" json:"chan_id,omitempty"`                        // uint64_chan_id
	OperatorId    uint64 `protobuf:"varint,3,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`            // int64_operator_id
	MsgNotifyType int32  `protobuf:"varint,4,opt,name=msg_notify_type,json=msgNotifyType,proto3" json:"msg_notify_type,omitempty"` // uint32_msg_notify_type
}

func (x *ChannelService_SetMsgRecvType) Reset() {
	*x = ChannelService_SetMsgRecvType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_SetMsgRecvType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_SetMsgRecvType) ProtoMessage() {}

func (x *ChannelService_SetMsgRecvType) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_SetMsgRecvType.ProtoReflect.Descriptor instead.
func (*ChannelService_SetMsgRecvType) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 31}
}

func (x *ChannelService_SetMsgRecvType) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *ChannelService_SetMsgRecvType) GetChanId() uint64 {
	if x != nil {
		return x.ChanId
	}
	return 0
}

func (x *ChannelService_SetMsgRecvType) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *ChannelService_SetMsgRecvType) GetMsgNotifyType() int32 {
	if x != nil {
		return x.MsgNotifyType
	}
	return 0
}

// SetMute is the message type for the SetMute.
type ChannelService_SetMute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action uint32 `protobuf:"varint,1,opt,name=action,proto3" json:"action,omitempty"` // action
	TinyID uint64 `protobuf:"varint,2,opt,name=tinyID,proto3" json:"tinyID,omitempty"` // tinyID
}

func (x *ChannelService_SetMute) Reset() {
	*x = ChannelService_SetMute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_SetMute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_SetMute) ProtoMessage() {}

func (x *ChannelService_SetMute) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_SetMute.ProtoReflect.Descriptor instead.
func (*ChannelService_SetMute) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 32}
}

func (x *ChannelService_SetMute) GetAction() uint32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *ChannelService_SetMute) GetTinyID() uint64 {
	if x != nil {
		return x.TinyID
	}
	return 0
}

// SetTop is the message type for the SetTop.
type ChannelService_SetTop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action uint32 `protobuf:"varint,1,opt,name=action,proto3" json:"action,omitempty"` // uint32_action
}

func (x *ChannelService_SetTop) Reset() {
	*x = ChannelService_SetTop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_SetTop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_SetTop) ProtoMessage() {}

func (x *ChannelService_SetTop) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_SetTop.ProtoReflect.Descriptor instead.
func (*ChannelService_SetTop) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 33}
}

func (x *ChannelService_SetTop) GetAction() uint32 {
	if x != nil {
		return x.Action
	}
	return 0
}

// SwitchDetail is the message type for the SwitchDetail.
type ChannelService_SwitchDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId   uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`       // guild_id
	ChannelId uint64 `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` // channel_id
	Platform  uint32 `protobuf:"varint,3,opt,name=platform,proto3" json:"platform,omitempty"`                    // platform
}

func (x *ChannelService_SwitchDetail) Reset() {
	*x = ChannelService_SwitchDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_SwitchDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_SwitchDetail) ProtoMessage() {}

func (x *ChannelService_SwitchDetail) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_SwitchDetail.ProtoReflect.Descriptor instead.
func (*ChannelService_SwitchDetail) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 34}
}

func (x *ChannelService_SwitchDetail) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *ChannelService_SwitchDetail) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelService_SwitchDetail) GetPlatform() uint32 {
	if x != nil {
		return x.Platform
	}
	return 0
}

// SwitchLiveRoom is the message type for the SwitchLiveRoom.
type ChannelService_SwitchLiveRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId   uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`       // guild_id
	ChannelId uint64 `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` // channel_id
	RoomId    uint64 `protobuf:"varint,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`          // room_id
	Tinyid    uint64 `protobuf:"varint,4,opt,name=tinyid,proto3" json:"tinyid,omitempty"`                        // tinyid
	Action    int32  `protobuf:"varint,5,opt,name=action,proto3" json:"action,omitempty"`                        // action
}

func (x *ChannelService_SwitchLiveRoom) Reset() {
	*x = ChannelService_SwitchLiveRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_SwitchLiveRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_SwitchLiveRoom) ProtoMessage() {}

func (x *ChannelService_SwitchLiveRoom) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_SwitchLiveRoom.ProtoReflect.Descriptor instead.
func (*ChannelService_SwitchLiveRoom) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 35}
}

func (x *ChannelService_SwitchLiveRoom) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *ChannelService_SwitchLiveRoom) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelService_SwitchLiveRoom) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *ChannelService_SwitchLiveRoom) GetTinyid() uint64 {
	if x != nil {
		return x.Tinyid
	}
	return 0
}

func (x *ChannelService_SwitchLiveRoom) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

// SwitchVoiceChannel is the message type for the SwitchVoiceChannel.
type ChannelService_SwitchVoiceChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId    uint64                       `protobuf:"varint,1,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`         // member_id
	EnterDetail *ChannelService_SwitchDetail `protobuf:"bytes,2,opt,name=enter_detail,json=enterDetail,proto3" json:"enter_detail,omitempty"` // enter_detail
	LeaveDetail *ChannelService_SwitchDetail `protobuf:"bytes,3,opt,name=leave_detail,json=leaveDetail,proto3" json:"leave_detail,omitempty"` // leave_detail
}

func (x *ChannelService_SwitchVoiceChannel) Reset() {
	*x = ChannelService_SwitchVoiceChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_SwitchVoiceChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_SwitchVoiceChannel) ProtoMessage() {}

func (x *ChannelService_SwitchVoiceChannel) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_SwitchVoiceChannel.ProtoReflect.Descriptor instead.
func (*ChannelService_SwitchVoiceChannel) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 36}
}

func (x *ChannelService_SwitchVoiceChannel) GetMemberId() uint64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *ChannelService_SwitchVoiceChannel) GetEnterDetail() *ChannelService_SwitchDetail {
	if x != nil {
		return x.EnterDetail
	}
	return nil
}

func (x *ChannelService_SwitchVoiceChannel) GetLeaveDetail() *ChannelService_SwitchDetail {
	if x != nil {
		return x.LeaveDetail
	}
	return nil
}

// UpdateCategory is the message type for the UpdateCategory.
type ChannelService_UpdateCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgCategoryInfo           []*ChannelService_CategoryInfo `protobuf:"bytes,1,rep,name=msg_category_info,json=msgCategoryInfo,proto3" json:"msg_category_info,omitempty"`                                   // rpt_msg_category_info
	MsgNoClassifyCategoryInfo *ChannelService_CategoryInfo   `protobuf:"bytes,2,opt,name=msg_no_classify_category_info,json=msgNoClassifyCategoryInfo,proto3" json:"msg_no_classify_category_info,omitempty"` // msg_no_classify_category_info
}

func (x *ChannelService_UpdateCategory) Reset() {
	*x = ChannelService_UpdateCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_UpdateCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_UpdateCategory) ProtoMessage() {}

func (x *ChannelService_UpdateCategory) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_UpdateCategory.ProtoReflect.Descriptor instead.
func (*ChannelService_UpdateCategory) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 37}
}

func (x *ChannelService_UpdateCategory) GetMsgCategoryInfo() []*ChannelService_CategoryInfo {
	if x != nil {
		return x.MsgCategoryInfo
	}
	return nil
}

func (x *ChannelService_UpdateCategory) GetMsgNoClassifyCategoryInfo() *ChannelService_CategoryInfo {
	if x != nil {
		return x.MsgNoClassifyCategoryInfo
	}
	return nil
}

// UpdateMsg is the message type for the UpdateMsg.
type ChannelService_UpdateMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgSeq             uint64 `protobuf:"varint,1,opt,name=msg_seq,json=msgSeq,proto3" json:"msg_seq,omitempty"`                                       // uint64_msg_seq
	OrigMsgUncountable bool   `protobuf:"varint,2,opt,name=orig_msg_uncountable,json=origMsgUncountable,proto3" json:"orig_msg_uncountable,omitempty"` // bool_orig_msg_uncountable
	EventType          uint64 `protobuf:"varint,3,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`                              // uint64_event_type
	EventVersion       uint64 `protobuf:"varint,4,opt,name=event_version,json=eventVersion,proto3" json:"event_version,omitempty"`                     // uint64_event_version
	OperatorTinyid     uint64 `protobuf:"varint,5,opt,name=operator_tinyid,json=operatorTinyid,proto3" json:"operator_tinyid,omitempty"`               // uint64_operator_tinyid
	OperatorRole       uint64 `protobuf:"varint,6,opt,name=operator_role,json=operatorRole,proto3" json:"operator_role,omitempty"`                     // uint64_operator_role
	Reason             uint64 `protobuf:"varint,7,opt,name=reason,proto3" json:"reason,omitempty"`                                                     // uint64_reason
	Timestamp          uint64 `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                               // uint64_timestamp
}

func (x *ChannelService_UpdateMsg) Reset() {
	*x = ChannelService_UpdateMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_UpdateMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_UpdateMsg) ProtoMessage() {}

func (x *ChannelService_UpdateMsg) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_UpdateMsg.ProtoReflect.Descriptor instead.
func (*ChannelService_UpdateMsg) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 38}
}

func (x *ChannelService_UpdateMsg) GetMsgSeq() uint64 {
	if x != nil {
		return x.MsgSeq
	}
	return 0
}

func (x *ChannelService_UpdateMsg) GetOrigMsgUncountable() bool {
	if x != nil {
		return x.OrigMsgUncountable
	}
	return false
}

func (x *ChannelService_UpdateMsg) GetEventType() uint64 {
	if x != nil {
		return x.EventType
	}
	return 0
}

func (x *ChannelService_UpdateMsg) GetEventVersion() uint64 {
	if x != nil {
		return x.EventVersion
	}
	return 0
}

func (x *ChannelService_UpdateMsg) GetOperatorTinyid() uint64 {
	if x != nil {
		return x.OperatorTinyid
	}
	return 0
}

func (x *ChannelService_UpdateMsg) GetOperatorRole() uint64 {
	if x != nil {
		return x.OperatorRole
	}
	return 0
}

func (x *ChannelService_UpdateMsg) GetReason() uint64 {
	if x != nil {
		return x.Reason
	}
	return 0
}

func (x *ChannelService_UpdateMsg) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// UpdateVoiceBlockList is the message type for the UpdateVoiceBlockList.
type ChannelService_UpdateVoiceBlockList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action       uint32 `protobuf:"varint,1,opt,name=action,proto3" json:"action,omitempty"`                                 // uint32_action
	ObjectTinyid uint64 `protobuf:"varint,2,opt,name=object_tinyid,json=objectTinyid,proto3" json:"object_tinyid,omitempty"` // uint64_object_tinyid
}

func (x *ChannelService_UpdateVoiceBlockList) Reset() {
	*x = ChannelService_UpdateVoiceBlockList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_UpdateVoiceBlockList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_UpdateVoiceBlockList) ProtoMessage() {}

func (x *ChannelService_UpdateVoiceBlockList) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_UpdateVoiceBlockList.ProtoReflect.Descriptor instead.
func (*ChannelService_UpdateVoiceBlockList) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 39}
}

func (x *ChannelService_UpdateVoiceBlockList) GetAction() uint32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *ChannelService_UpdateVoiceBlockList) GetObjectTinyid() uint64 {
	if x != nil {
		return x.ObjectTinyid
	}
	return 0
}

// VoiceChannelInfo is the message type for the VoiceChannelInfo.
type ChannelService_VoiceChannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberMaxNum uint32 `protobuf:"varint,1,opt,name=member_max_num,json=memberMaxNum,proto3" json:"member_max_num,omitempty"` // uint32_member_max_num
}

func (x *ChannelService_VoiceChannelInfo) Reset() {
	*x = ChannelService_VoiceChannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_VoiceChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_VoiceChannelInfo) ProtoMessage() {}

func (x *ChannelService_VoiceChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_VoiceChannelInfo.ProtoReflect.Descriptor instead.
func (*ChannelService_VoiceChannelInfo) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 40}
}

func (x *ChannelService_VoiceChannelInfo) GetMemberMaxNum() uint32 {
	if x != nil {
		return x.MemberMaxNum
	}
	return 0
}

// VoiceChannelInfoFilter is the message type for the VoiceChannelInfoFilter.
type ChannelService_VoiceChannelInfoFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberMaxNum uint32 `protobuf:"varint,1,opt,name=member_max_num,json=memberMaxNum,proto3" json:"member_max_num,omitempty"` // uint32_member_max_num
}

func (x *ChannelService_VoiceChannelInfoFilter) Reset() {
	*x = ChannelService_VoiceChannelInfoFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_VoiceChannelInfoFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_VoiceChannelInfoFilter) ProtoMessage() {}

func (x *ChannelService_VoiceChannelInfoFilter) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_VoiceChannelInfoFilter.ProtoReflect.Descriptor instead.
func (*ChannelService_VoiceChannelInfoFilter) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 41}
}

func (x *ChannelService_VoiceChannelInfoFilter) GetMemberMaxNum() uint32 {
	if x != nil {
		return x.MemberMaxNum
	}
	return 0
}

// TemplParam is the message type for the TemplParam.
type ChannelService_CommGrayTips_TemplParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  []byte `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`   // bytes_name
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // bytes_value
}

func (x *ChannelService_CommGrayTips_TemplParam) Reset() {
	*x = ChannelService_CommGrayTips_TemplParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_channel_pb_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelService_CommGrayTips_TemplParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelService_CommGrayTips_TemplParam) ProtoMessage() {}

func (x *ChannelService_CommGrayTips_TemplParam) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_channel_pb_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelService_CommGrayTips_TemplParam.ProtoReflect.Descriptor instead.
func (*ChannelService_CommGrayTips_TemplParam) Descriptor() ([]byte, []int) {
	return file_daemon_channel_pb_service_proto_rawDescGZIP(), []int{0, 8, 0}
}

func (x *ChannelService_CommGrayTips_TemplParam) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ChannelService_CommGrayTips_TemplParam) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_daemon_channel_pb_service_proto protoreflect.FileDescriptor

var file_daemon_channel_pb_service_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x70, 0x62, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x26, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x70, 0x62, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x4c, 0x0a, 0x0e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x88, 0x01, 0x0a,
	0x0d, 0x41, 0x70, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x59, 0x0a, 0x13, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x1a, 0xca, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4d, 0x0a, 0x10, 0x6d, 0x73,
	0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6d, 0x73, 0x67, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x1a,
	0xc3, 0x04, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x73, 0x67, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x73, 0x67, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x71, 0x12, 0x68, 0x0a, 0x1d, 0x6d, 0x73, 0x67, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x19, 0x6d, 0x73, 0x67, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x1c, 0x6d,
	0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x18, 0x6d, 0x73, 0x67, 0x4c, 0x69, 0x76,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65,
	0x61, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x53, 0x70, 0x65, 0x61, 0x6b, 0x1a, 0xcd, 0x02, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a,
	0x0c, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x76, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x14, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x11, 0x6d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6d, 0x73, 0x67, 0x43, 0x68, 0x61,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xed, 0x02, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0c, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x76,
	0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x52, 0x0a,
	0x6d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x71, 0x12, 0x33, 0x0a, 0x0c, 0x6d, 0x73,
	0x67, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x53, 0x76, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67,
	0x53, 0x65, 0x71, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x46, 0x61, 0x63, 0x65, 0x53, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x52, 0x0a, 0x15, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x12, 0x6d, 0x73, 0x67, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0e, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6d, 0x73, 0x67, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x24, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x44, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x1a, 0xdf, 0x04, 0x0a, 0x0b,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x73, 0x67, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x6d, 0x73, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x76, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67,
	0x53, 0x65, 0x71, 0x12, 0x3a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x53, 0x76, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71,
	0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x12,
	0x55, 0x0a, 0x16, 0x6d, 0x73, 0x67, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x13, 0x6d, 0x73, 0x67, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x15, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x6d, 0x73, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x1a, 0xdc, 0x02,
	0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x47, 0x72, 0x61, 0x79, 0x54, 0x69, 0x70, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x75, 0x73, 0x69, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x62, 0x75, 0x73, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62,
	0x75, 0x73, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x75,
	0x73, 0x69, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x74, 0x72, 0x6c, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x74, 0x72, 0x6c, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0f,
	0x6d, 0x73, 0x67, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x47, 0x72, 0x61, 0x79, 0x54,
	0x69, 0x70, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0d,
	0x6d, 0x73, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x69, 0x70, 0x73, 0x5f,
	0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69,
	0x70, 0x73, 0x53, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x62, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x62, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x1a, 0x36, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x80, 0x01, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x44, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x1a,
	0x49, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x1a, 0x81, 0x01, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x44, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x1a, 0x4a,
	0x0a, 0x0c, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x1a, 0xaa, 0x10, 0x0a, 0x09, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x42, 0x0a, 0x0f, 0x6d, 0x73, 0x67, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0d, 0x6d,
	0x73, 0x67, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x49, 0x0a, 0x12,
	0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x67, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x69,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x47, 0x72,
	0x61, 0x79, 0x54, 0x69, 0x70, 0x73, 0x52, 0x0f, 0x6d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x47,
	0x72, 0x61, 0x79, 0x54, 0x69, 0x70, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x6d, 0x73, 0x67, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x0e,
	0x6d, 0x73, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x48,
	0x0a, 0x11, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x0f, 0x6d, 0x73, 0x67, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x3f, 0x0a, 0x0e, 0x6d, 0x73, 0x67, 0x5f,
	0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x0c, 0x6d, 0x73, 0x67,
	0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x49, 0x0a, 0x12, 0x6d, 0x73, 0x67,
	0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x52, 0x0f, 0x6d, 0x73, 0x67, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x12, 0x3f, 0x0a, 0x0e, 0x6d, 0x73, 0x67, 0x5f, 0x71, 0x75, 0x69, 0x74,
	0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75,
	0x69, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x0c, 0x6d, 0x73, 0x67, 0x51, 0x75, 0x69, 0x74,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x52, 0x0a, 0x15, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x6d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0f, 0x6d, 0x73, 0x67,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x52, 0x0d,
	0x6d, 0x73, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x12, 0x45, 0x0a,
	0x10, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x52, 0x0e, 0x6d, 0x73, 0x67, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x12, 0x4f, 0x0a, 0x14, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x11, 0x6d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0d, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x0b, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x74, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x12, 0x50, 0x0a, 0x15, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x76, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x11, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x63,
	0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x0c, 0x6d, 0x73, 0x67, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74,
	0x54, 0x6f, 0x70, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x12, 0x50,
	0x0a, 0x12, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x10,
	0x6d, 0x73, 0x67, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x4e, 0x0a, 0x13, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x11, 0x6d,
	0x73, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x62, 0x0a, 0x1b, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x17, 0x6d, 0x73, 0x67,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0c, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x6d, 0x75, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4d,
	0x75, 0x74, 0x65, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x12,
	0x65, 0x0a, 0x1b, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x17, 0x6d,
	0x73, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x4f, 0x0a, 0x14, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x76, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x11, 0x6d, 0x73, 0x67, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4c,
	0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x37, 0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x73, 0x67,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x41, 0x0a, 0x0d, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x0c, 0x6d, 0x73, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0f, 0x6d, 0x73, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x70,
	0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x6d, 0x73, 0x67,
	0x41, 0x70, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x0a, 0x66, 0x65,
	0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x46, 0x65, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x66, 0x65, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x14, 0x77, 0x65, 0x61, 0x6b, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73,
	0x67, 0x52, 0x11, 0x77, 0x65, 0x61, 0x6b, 0x4d, 0x73, 0x67, 0x41, 0x70, 0x70, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x48, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x65, 0x65,
	0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x46, 0x65, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0e,
	0x72, 0x65, 0x61, 0x64, 0x46, 0x65, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x67,
	0x0a, 0x1b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x73, 0x67, 0x52, 0x18, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4d, 0x73, 0x67, 0x1a, 0x9e, 0x01, 0x0a, 0x09, 0x46, 0x65, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x73, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x67, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x73, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x1a, 0xed, 0x05, 0x0a, 0x09, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x09, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x72,
	0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x12,
	0x22, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x78,
	0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x66, 0x61, 0x63, 0x65, 0x53, 0x65, 0x71, 0x12, 0x48, 0x0a, 0x10, 0x6d, 0x73, 0x67, 0x5f,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0e, 0x6d, 0x73, 0x67, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x12, 0x45, 0x0a, 0x15, 0x6d, 0x73, 0x67, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x8a, 0x27, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x76, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x52, 0x12, 0x6d, 0x73, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x71, 0x12, 0x4c, 0x0a, 0x19, 0x6d, 0x73,
	0x67, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x8b, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x53, 0x76, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x71, 0x52, 0x15, 0x6d, 0x73, 0x67, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x71, 0x12, 0x47, 0x0a, 0x16, 0x6d, 0x73, 0x67, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x71, 0x18, 0x8c, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x76, 0x63, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x52, 0x13, 0x6d, 0x73,
	0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65,
	0x71, 0x1a, 0xfe, 0x04, 0x0a, 0x0f, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x4d,
	0x61, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x53, 0x65, 0x71, 0x12, 0x21,
	0x0a, 0x0c, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x8a, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x71, 0x12,
	0x32, 0x0a, 0x15, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x8b, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x65, 0x71, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x8c, 0x27, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x65, 0x71, 0x1a, 0x6e, 0x0a, 0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6e, 0x79, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x69, 0x6e, 0x79,
	0x69, 0x64, 0x1a, 0x6d, 0x0a, 0x0c, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6e, 0x79, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x69, 0x6e, 0x79, 0x69,
	0x64, 0x1a, 0x5d, 0x0a, 0x0f, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x55, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x1a, 0x8d, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69,
	0x73, 0x4e, 0x65, 0x65, 0x64, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x55, 0x69, 0x6e, 0x12, 0x20,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0xa9, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x6e, 0x79, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x69,
	0x6e, 0x79, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x67, 0x0a, 0x08,
	0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x5f,
	0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x53, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x2e, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x54, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x73,
	0x67, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x73, 0x69, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x73, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x75, 0x73, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x62, 0x75, 0x73, 0x69, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0b, 0x0a, 0x09, 0x51,
	0x75, 0x69, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x1a, 0x31, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64,
	0x46, 0x65, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xe9, 0x01, 0x0a, 0x0a,
	0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x10, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x53, 0x76, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x71, 0x52, 0x0d, 0x6d, 0x73, 0x67, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71,
	0x12, 0x41, 0x0a, 0x14, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6e, 0x74,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x53, 0x76, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x71, 0x52, 0x10, 0x6d, 0x73, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6e, 0x74, 0x4d, 0x73, 0x67,
	0x53, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64,
	0x4d, 0x73, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x1a, 0x78, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x64, 0x55, 0x72,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x73, 0x1a, 0xc0, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6e, 0x79, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6e, 0x79, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x1a, 0x8d, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x63, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x6d, 0x73, 0x67, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x73, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x1a, 0x39, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x6e, 0x79, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x69, 0x6e, 0x79, 0x49, 0x44, 0x1a,
	0x20, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x64, 0x0a, 0x0c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x1a, 0x93, 0x01, 0x0a, 0x0e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x69, 0x6e, 0x79, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74,
	0x69, 0x6e, 0x79, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb3, 0x01,
	0x0a, 0x12, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x3f, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x1a, 0xba, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x11, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x6d, 0x73, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x5e, 0x0a, 0x1d, 0x6d, 0x73, 0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x79, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x19, 0x6d, 0x73, 0x67, 0x4e, 0x6f, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x9e, 0x02, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x75, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x4d, 0x73, 0x67, 0x55, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x6e, 0x79, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x69, 0x6e, 0x79, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x1a, 0x53, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6e, 0x79,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x69, 0x6e, 0x79, 0x69, 0x64, 0x1a, 0x38, 0x0a, 0x10, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d,
	0x1a, 0x3e, 0x0a, 0x16, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d,
	0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65,
	0x6c, 0x61, 0x70, 0x35, 0x65, 0x2f, 0x70, 0x65, 0x6e, 0x67, 0x75, 0x69, 0x6e, 0x2f, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_daemon_channel_pb_service_proto_rawDescOnce sync.Once
	file_daemon_channel_pb_service_proto_rawDescData = file_daemon_channel_pb_service_proto_rawDesc
)

func file_daemon_channel_pb_service_proto_rawDescGZIP() []byte {
	file_daemon_channel_pb_service_proto_rawDescOnce.Do(func() {
		file_daemon_channel_pb_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_daemon_channel_pb_service_proto_rawDescData)
	})
	return file_daemon_channel_pb_service_proto_rawDescData
}

var file_daemon_channel_pb_service_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_daemon_channel_pb_service_proto_goTypes = []interface{}{
	(*ChannelService)(nil),                          // 0: ChannelService
	(*ChannelService_AppChannelMsg)(nil),            // 1: ChannelService.AppChannelMsg
	(*ChannelService_CategoryChannelInfo)(nil),      // 2: ChannelService.CategoryChannelInfo
	(*ChannelService_CategoryInfo)(nil),             // 3: ChannelService.CategoryInfo
	(*ChannelService_ChanInfoFilter)(nil),           // 4: ChannelService.ChanInfoFilter
	(*ChannelService_ChangeChanInfo)(nil),           // 5: ChannelService.ChangeChanInfo
	(*ChannelService_ChangeGuildInfo)(nil),          // 6: ChannelService.ChangeGuildInfo
	(*ChannelService_ChannelID)(nil),                // 7: ChannelService.ChannelID
	(*ChannelService_ChannelInfo)(nil),              // 8: ChannelService.ChannelInfo
	(*ChannelService_CommGrayTips)(nil),             // 9: ChannelService.CommGrayTips
	(*ChannelService_CreateChan)(nil),               // 10: ChannelService.CreateChan
	(*ChannelService_CreateGuild)(nil),              // 11: ChannelService.CreateGuild
	(*ChannelService_DestroyChan)(nil),              // 12: ChannelService.DestroyChan
	(*ChannelService_DestroyGuild)(nil),             // 13: ChannelService.DestroyGuild
	(*ChannelService_EventBody)(nil),                // 14: ChannelService.EventBody
	(*ChannelService_FeedEvent)(nil),                // 15: ChannelService.FeedEvent
	(*ChannelService_GroupProStatus)(nil),           // 16: ChannelService.GroupProStatus
	(*ChannelService_GuildInfo)(nil),                // 17: ChannelService.GuildInfo
	(*ChannelService_GuildInfoFilter)(nil),          // 18: ChannelService.GuildInfoFilter
	(*ChannelService_JoinGuild)(nil),                // 19: ChannelService.JoinGuild
	(*ChannelService_KickOffGuild)(nil),             // 20: ChannelService.KickOffGuild
	(*ChannelService_LiveChannelInfo)(nil),          // 21: ChannelService.LiveChannelInfo
	(*ChannelService_LiveChannelInfoFilter)(nil),    // 22: ChannelService.LiveChannelInfoFilter
	(*ChannelService_LiveRoomStatusChangeMsg)(nil),  // 23: ChannelService.LiveRoomStatusChangeMsg
	(*ChannelService_MsgEvent)(nil),                 // 24: ChannelService.MsgEvent
	(*ChannelService_MsgSeq)(nil),                   // 25: ChannelService.MsgSeq
	(*ChannelService_QuestionChannelSystemMsg)(nil), // 26: ChannelService.QuestionChannelSystemMsg
	(*ChannelService_QuitGuild)(nil),                // 27: ChannelService.QuitGuild
	(*ChannelService_ReadFeedNotify)(nil),           // 28: ChannelService.ReadFeedNotify
	(*ChannelService_ReadNotify)(nil),               // 29: ChannelService.ReadNotify
	(*ChannelService_SchedulerMsg)(nil),             // 30: ChannelService.SchedulerMsg
	(*ChannelService_SetAdmin)(nil),                 // 31: ChannelService.SetAdmin
	(*ChannelService_SetMsgRecvType)(nil),           // 32: ChannelService.SetMsgRecvType
	(*ChannelService_SetMute)(nil),                  // 33: ChannelService.SetMute
	(*ChannelService_SetTop)(nil),                   // 34: ChannelService.SetTop
	(*ChannelService_SwitchDetail)(nil),             // 35: ChannelService.SwitchDetail
	(*ChannelService_SwitchLiveRoom)(nil),           // 36: ChannelService.SwitchLiveRoom
	(*ChannelService_SwitchVoiceChannel)(nil),       // 37: ChannelService.SwitchVoiceChannel
	(*ChannelService_UpdateCategory)(nil),           // 38: ChannelService.UpdateCategory
	(*ChannelService_UpdateMsg)(nil),                // 39: ChannelService.UpdateMsg
	(*ChannelService_UpdateVoiceBlockList)(nil),     // 40: ChannelService.UpdateVoiceBlockList
	(*ChannelService_VoiceChannelInfo)(nil),         // 41: ChannelService.VoiceChannelInfo
	(*ChannelService_VoiceChannelInfoFilter)(nil),   // 42: ChannelService.VoiceChannelInfoFilter
	(*ChannelService_CommGrayTips_TemplParam)(nil),  // 43: ChannelService.CommGrayTips.TemplParam
	(*SvcCommon_MsgSeq)(nil),                        // 44: SvcCommon.MsgSeq
}
var file_daemon_channel_pb_service_proto_depIdxs = []int32{
	2,  // 0: ChannelService.CategoryInfo.msg_channel_info:type_name -> ChannelService.CategoryChannelInfo
	42, // 1: ChannelService.ChanInfoFilter.msg_voice_channel_info_filter:type_name -> ChannelService.VoiceChannelInfoFilter
	22, // 2: ChannelService.ChanInfoFilter.msg_live_channel_info_filter:type_name -> ChannelService.LiveChannelInfoFilter
	44, // 3: ChannelService.ChangeChanInfo.msg_info_seq:type_name -> SvcCommon.MsgSeq
	4,  // 4: ChannelService.ChangeChanInfo.msg_chan_info_filter:type_name -> ChannelService.ChanInfoFilter
	8,  // 5: ChannelService.ChangeChanInfo.msg_chan_info:type_name -> ChannelService.ChannelInfo
	44, // 6: ChannelService.ChangeGuildInfo.msg_info_seq:type_name -> SvcCommon.MsgSeq
	44, // 7: ChannelService.ChangeGuildInfo.msg_face_seq:type_name -> SvcCommon.MsgSeq
	18, // 8: ChannelService.ChangeGuildInfo.msg_guild_info_filter:type_name -> ChannelService.GuildInfoFilter
	17, // 9: ChannelService.ChangeGuildInfo.msg_guild_info:type_name -> ChannelService.GuildInfo
	44, // 10: ChannelService.ChannelInfo.last_msg_seq:type_name -> SvcCommon.MsgSeq
	44, // 11: ChannelService.ChannelInfo.last_cnt_msg_seq:type_name -> SvcCommon.MsgSeq
	41, // 12: ChannelService.ChannelInfo.msg_voice_channel_info:type_name -> ChannelService.VoiceChannelInfo
	21, // 13: ChannelService.ChannelInfo.msg_live_channel_info:type_name -> ChannelService.LiveChannelInfo
	43, // 14: ChannelService.CommGrayTips.msg_templ_param:type_name -> ChannelService.CommGrayTips.TemplParam
	7,  // 15: ChannelService.CreateChan.create_id:type_name -> ChannelService.ChannelID
	7,  // 16: ChannelService.DestroyChan.delete_id:type_name -> ChannelService.ChannelID
	29, // 17: ChannelService.EventBody.msg_read_notify:type_name -> ChannelService.ReadNotify
	9,  // 18: ChannelService.EventBody.msg_comm_gray_tips:type_name -> ChannelService.CommGrayTips
	11, // 19: ChannelService.EventBody.msg_create_guild:type_name -> ChannelService.CreateGuild
	13, // 20: ChannelService.EventBody.msg_destroy_guild:type_name -> ChannelService.DestroyGuild
	19, // 21: ChannelService.EventBody.msg_join_guild:type_name -> ChannelService.JoinGuild
	20, // 22: ChannelService.EventBody.msg_kick_off_guild:type_name -> ChannelService.KickOffGuild
	27, // 23: ChannelService.EventBody.msg_quit_guild:type_name -> ChannelService.QuitGuild
	6,  // 24: ChannelService.EventBody.msg_change_guild_info:type_name -> ChannelService.ChangeGuildInfo
	10, // 25: ChannelService.EventBody.msg_create_chan:type_name -> ChannelService.CreateChan
	12, // 26: ChannelService.EventBody.msg_destroy_chan:type_name -> ChannelService.DestroyChan
	5,  // 27: ChannelService.EventBody.msg_change_chan_info:type_name -> ChannelService.ChangeChanInfo
	31, // 28: ChannelService.EventBody.msg_set_admin:type_name -> ChannelService.SetAdmin
	32, // 29: ChannelService.EventBody.msg_set_msg_recv_type:type_name -> ChannelService.SetMsgRecvType
	39, // 30: ChannelService.EventBody.msg_update_msg:type_name -> ChannelService.UpdateMsg
	34, // 31: ChannelService.EventBody.msg_set_top:type_name -> ChannelService.SetTop
	37, // 32: ChannelService.EventBody.msg_switch_channel:type_name -> ChannelService.SwitchVoiceChannel
	38, // 33: ChannelService.EventBody.msg_update_category:type_name -> ChannelService.UpdateCategory
	40, // 34: ChannelService.EventBody.msg_update_voice_block_list:type_name -> ChannelService.UpdateVoiceBlockList
	33, // 35: ChannelService.EventBody.msg_set_mute:type_name -> ChannelService.SetMute
	23, // 36: ChannelService.EventBody.msg_live_status_change_room:type_name -> ChannelService.LiveRoomStatusChangeMsg
	36, // 37: ChannelService.EventBody.msg_switch_live_room:type_name -> ChannelService.SwitchLiveRoom
	24, // 38: ChannelService.EventBody.msg_events:type_name -> ChannelService.MsgEvent
	30, // 39: ChannelService.EventBody.msg_scheduler:type_name -> ChannelService.SchedulerMsg
	1,  // 40: ChannelService.EventBody.msg_app_channel:type_name -> ChannelService.AppChannelMsg
	15, // 41: ChannelService.EventBody.feed_event:type_name -> ChannelService.FeedEvent
	1,  // 42: ChannelService.EventBody.weak_msg_app_channel:type_name -> ChannelService.AppChannelMsg
	28, // 43: ChannelService.EventBody.read_feed_notify:type_name -> ChannelService.ReadFeedNotify
	26, // 44: ChannelService.EventBody.question_channel_system_msg:type_name -> ChannelService.QuestionChannelSystemMsg
	16, // 45: ChannelService.GuildInfo.msg_guild_status:type_name -> ChannelService.GroupProStatus
	44, // 46: ChannelService.GuildInfo.msg_member_change_seq:type_name -> SvcCommon.MsgSeq
	44, // 47: ChannelService.GuildInfo.msg_guild_info_change_seq:type_name -> SvcCommon.MsgSeq
	44, // 48: ChannelService.GuildInfo.msg_channel_change_seq:type_name -> SvcCommon.MsgSeq
	44, // 49: ChannelService.ReadNotify.msg_read_msg_seq:type_name -> SvcCommon.MsgSeq
	44, // 50: ChannelService.ReadNotify.msg_read_cnt_msg_seq:type_name -> SvcCommon.MsgSeq
	35, // 51: ChannelService.SwitchVoiceChannel.enter_detail:type_name -> ChannelService.SwitchDetail
	35, // 52: ChannelService.SwitchVoiceChannel.leave_detail:type_name -> ChannelService.SwitchDetail
	3,  // 53: ChannelService.UpdateCategory.msg_category_info:type_name -> ChannelService.CategoryInfo
	3,  // 54: ChannelService.UpdateCategory.msg_no_classify_category_info:type_name -> ChannelService.CategoryInfo
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_daemon_channel_pb_service_proto_init() }
func file_daemon_channel_pb_service_proto_init() {
	if File_daemon_channel_pb_service_proto != nil {
		return
	}
	file_daemon_channel_pb_service_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_daemon_channel_pb_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_AppChannelMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_CategoryChannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_CategoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_ChanInfoFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_ChangeChanInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_ChangeGuildInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_ChannelID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_ChannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_CommGrayTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_CreateChan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_CreateGuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_DestroyChan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_DestroyGuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_EventBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_FeedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_GroupProStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_GuildInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_GuildInfoFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_JoinGuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_KickOffGuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_LiveChannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_LiveChannelInfoFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_LiveRoomStatusChangeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_MsgEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_MsgSeq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_QuestionChannelSystemMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_QuitGuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_ReadFeedNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_ReadNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_SchedulerMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_SetAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_SetMsgRecvType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_SetMute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_SetTop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_SwitchDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_SwitchLiveRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_SwitchVoiceChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_UpdateCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_UpdateMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_UpdateVoiceBlockList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_VoiceChannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_VoiceChannelInfoFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_channel_pb_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelService_CommGrayTips_TemplParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_daemon_channel_pb_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_daemon_channel_pb_service_proto_goTypes,
		DependencyIndexes: file_daemon_channel_pb_service_proto_depIdxs,
		MessageInfos:      file_daemon_channel_pb_service_proto_msgTypes,
	}.Build()
	File_daemon_channel_pb_service_proto = out.File
	file_daemon_channel_pb_service_proto_rawDesc = nil
	file_daemon_channel_pb_service_proto_goTypes = nil
	file_daemon_channel_pb_service_proto_depIdxs = nil
}
