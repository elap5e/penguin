syntax = "proto3";

option go_package = "github.com/elap5e/penguin/daemon/service/pb";

// Message generated by proto-message-gen. DO NOT EDIT.
// source: tencent.p1298im.oidb.cmd0x769.Oidb_0x769
//
// Oidb_0x769 is the message type for the Oidb_0x769.
message Oidb_0x769 {
  // CPU is the message type for the CPU.
  message CPU {
    string model     = 1; // model
    uint32 cores     = 2; // cores
    uint32 frequency = 3; // frequency
  }
  // Camera is the message type for the Camera.
  message Camera {
    uint64 primary   = 1; // primary
    uint64 secondary = 2; // secondary
    bool flash       = 3; // flash
  }
  // Config is the message type for the Config.
  message Config {
    uint32 type                       = 1; // uint32_type
    uint32 version                    = 2; // uint32_version
    repeated string content_list      = 3; // rpt_content_list
    string debug_msg                  = 4; // debug_msg
    repeated Content msg_content_list = 5; // rpt_msg_content_list
  }
  // ConfigSeq is the message type for the ConfigSeq.
  message ConfigSeq {
    uint32 type    = 1; // type
    uint32 version = 2; // version
  }
  // Content is the message type for the Content.
  message Content {
    uint32 task_id  = 1; // task_id
    uint32 compress = 2; // compress
    bytes content   = 10; // content
  }
  // DeviceInfo is the message type for the DeviceInfo.
  message DeviceInfo {
    string brand    = 1; // brand
    string model    = 2; // model
    CPU cpu         = 4; // cpu
    Memory memory   = 5; // memory
    Storage storage = 6; // storage
    Screen screen   = 7; // screen
  }
  // Memory is the message type for the Memory.
  message Memory {
    uint64 total   = 1; // total
    uint64 process = 2; // process
  }
  // C72478OS is the message type for the C72478OS.
  message C72478OS {
    int32 type     = 1; // type
    string version = 2; // version
    string sdk     = 3; // sdk
    string kernel  = 4; // kernel
    string rom     = 5; // rom
  }
  // QueryUinPackageUsageReq is the message type for the QueryUinPackageUsageReq.
  message QueryUinPackageUsageReq {
    uint32 type          = 1; // type
    uint64 uin_file_size = 2; // uin_file_size
  }
  // QueryUinPackageUsageRsp is the message type for the QueryUinPackageUsageRsp.
  message QueryUinPackageUsageRsp {
    uint32 status                                     = 1; // status
    uint64 left_uin_num                               = 2; // left_uin_num
    uint64 max_uin_num                                = 3; // max_uin_num
    uint32 proportion                                 = 4; // proportion
    repeated UinPackageUsedInfo uin_package_used_list = 10; // uin_package_used_list
  }
  // ReqBody is the message type for the ReqBody.
  message ReqBody {
    repeated ConfigSeq config_list                      = 1; // rpt_config_list
    DeviceInfo msg_device_info                          = 2; // msg_device_info
    string info                                         = 3; // str_info
    string province                                     = 4; // province
    string city                                         = 5; // city
    int32 req_debug_msg                                 = 6; // req_debug_msg
    QueryUinPackageUsageReq query_uin_package_usage_req = 101; // query_uin_package_usage_req
  }
  // RspBody is the message type for the RspBody.
  message RspBody {
    uint32 result                                       = 1; // uint32_result
    repeated Config config_list                         = 2; // rpt_config_list
    QueryUinPackageUsageRsp query_uin_package_usage_rsp = 101; // query_uin_package_usage_rsp
  }
  // Screen is the message type for the Screen.
  message Screen {
    string model     = 1; // model
    uint32 width     = 2; // width
    uint32 height    = 3; // height
    uint32 dpi       = 4; // dpi
    bool multi_touch = 5; // multi_touch
  }
  // Storage is the message type for the Storage.
  message Storage {
    uint64 builtin  = 1; // builtin
    uint64 external = 2; // external
  }
  // UinPackageUsedInfo is the message type for the UinPackageUsedInfo.
  message UinPackageUsedInfo {
    uint32 rule_id = 1; // rule_id
    string author  = 2; // author
    string url     = 3; // url
    uint64 uin_num = 4; // uin_num
  }
}
