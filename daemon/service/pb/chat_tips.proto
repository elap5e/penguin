syntax = "proto3";

import "daemon/service/pb/apollo_game_status.proto";
import "daemon/service/pb/apollo_push_message.proto";

option go_package = "github.com/elap5e/penguin/daemon/service/pb";

// Message generated by proto-message-gen. DO NOT EDIT.
// source: tencent.p1318im.oidb.cmd0x857.TroopTips0x857
//
// ChatTips is the message type for the TroopTips0x857.
message ChatTips {
  // AIOGrayTipsInfo is the message type for the AIOGrayTipsInfo.
  message AIOGrayTipsInfo {
    optional uint32 show_lastest = 1; // opt_uint32_show_lastest
    optional bytes content       = 2; // opt_bytes_content
    optional uint32 remind       = 3; // opt_uint32_remind
    optional bytes brief         = 4; // opt_bytes_brief
    uint64 receiver_uin          = 5; // uint64_receiver_uin
    uint32 reliao_admin_opt      = 6; // uint32_reliao_admin_opt
    uint32 robot_group_opt       = 7; // uint32_robot_group_opt
  }
  // AIOTopTipsInfo is the message type for the AIOTopTipsInfo.
  message AIOTopTipsInfo {
    optional bytes content     = 1; // opt_bytes_content
    optional uint32 icon       = 2; // opt_uint32_icon
    optional int32 enum_action = 3; // opt_enum_action
    optional bytes url         = 4; // opt_bytes_url
    optional bytes data        = 5; // opt_bytes_data
    optional bytes data_i      = 6; // opt_bytes_data_i
    optional bytes data_a      = 7; // opt_bytes_data_a
    optional bytes data_p      = 8; // opt_bytes_data_p
  }
  // FloatedTipsInfo is the message type for the FloatedTipsInfo.
  message FloatedTipsInfo {
    optional bytes content = 1; // opt_bytes_content
  }
  // GeneralGrayTipInfo is the message type for the GeneralGrayTipInfo.
  message GeneralGrayTipInfo {
    uint64 busi_type                    = 1; // uint64_busi_type
    uint64 busi_id                      = 2; // uint64_busi_id
    uint32 ctrl_flag                    = 3; // uint32_ctrl_flag
    uint32 c2c_type                     = 4; // uint32_c2c_type
    uint32 service_type                 = 5; // uint32_service_type
    uint64 templ_id                     = 6; // uint64_templ_id
    repeated TemplParam msg_templ_param = 7; // rpt_msg_templ_param
    bytes content                       = 8; // bytes_content
    uint64 tips_seq_id                  = 10; // uint64_tips_seq_id
    bytes pb_reserv                     = 100; // bytes_pb_reserv
  }
  // GoldMsgTipsElem is the message type for the GoldMsgTipsElem.
  message GoldMsgTipsElem {
    uint32 type         = 1; // type
    string billno       = 2; // billno
    uint32 result       = 3; // result
    uint32 amount       = 4; // amount
    uint32 total        = 5; // total
    uint32 interval     = 6; // interval
    uint32 finish       = 7; // finish
    repeated uint64 uin = 8; // uin
    uint32 action       = 9; // action
  }
  // GrayData is the message type for the GrayData.
  message GrayData {
    uint32 all_read = 1; // all_read
    string feed_id  = 2; // feed_id
  }
  // GroupAnnounceTBCInfo is the message type for the GroupAnnounceTBCInfo.
  message GroupAnnounceTBCInfo {
    bytes feeds_id  = 1; // feeds_id
    uint64 group_id = 2; // group_id
    uint32 action   = 3; // action
  }
  // GroupAsyncNotify is the message type for the GroupAsyncNotify.
  message GroupAsyncNotify {
    uint32 msg_type = 1; // uint32_msg_type
    uint64 msg_seq  = 2; // uint64_msg_seq
  }
  // GroupInfoChange is the message type for the GroupInfoChange.
  message GroupInfoChange {
    uint32 group_honor_switch        = 1; // uint32_group_honor_switch
    uint32 group_member_level_switch = 2; // uint32_group_member_level_switch
    uint32 group_flagext4            = 3; // uint32_group_flagext4
    uint32 appeal_deadline           = 4; // uint32_appeal_deadline
    uint32 group_flag                = 5; // uint32_group_flag
    uint32 group_flagext3            = 7; // uint32_group_flagext3
    uint32 group_class_ext           = 8; // uint32_group_class_ext
    uint32 group_info_ext_seq        = 9; // uint32_group_info_ext_seq
  }
  // GroupNotifyInfo is the message type for the GroupNotifyInfo.
  message GroupNotifyInfo {
    optional uint32 auto_pull_flag = 1; // opt_uint32_auto_pull_flag
    optional bytes feeds_id        = 2; // opt_bytes_feeds_id
  }
  // InstCtrl is the message type for the InstCtrl.
  message InstCtrl {
    repeated InstInfo msg_send_to_inst = 1; // rpt_msg_send_to_inst
    repeated InstInfo msg_exclude_inst = 2; // rpt_msg_exclude_inst
    InstInfo msg_from_inst             = 3; // msg_from_inst
  }
  // InstInfo is the message type for the InstInfo.
  message InstInfo {
    uint32 apppid     = 1; // uint32_apppid
    uint32 instid     = 2; // uint32_instid
    uint32 platform   = 3; // uint32_platform
    uint32 open_appid = 4; // uint32_open_appid
    uint32 productid  = 5; // uint32_productid
    uint32 sso_bid    = 6; // uint32_sso_bid
    bytes guid        = 7; // bytes_guid
    uint32 ver_min    = 8; // uint32_ver_min
    uint32 ver_max    = 9; // uint32_ver_max
  }
  // LbsShareChangePushInfo is the message type for the LbsShareChangePushInfo.
  message LbsShareChangePushInfo {
    uint32 msg_type    = 1; // uint32_msg_type
    bytes msg_info     = 2; // bytes_msg_info
    bytes version_ctrl = 3; // bytes_version_ctrl
    uint64 group_id    = 4; // uint64_group_id
    uint64 oper_uin    = 5; // uint64_oper_uin
    bytes gray_tips    = 6; // bytes_gray_tips
    uint64 msg_seq     = 7; // uint64_msg_seq
    uint32 join_nums   = 8; // uint32_join_nums
    uint32 push_type   = 99; // uint32_push_type
    bytes ext_info     = 100; // bytes_ext_info
  }
  // LuckyBagNotify is the message type for the LuckyBagNotify.
  message LuckyBagNotify {
    bytes msg_tips = 1; // bytes_msg_tips
  }
  // MediaChangePushInfo is the message type for the MediaChangePushInfo.
  message MediaChangePushInfo {
    uint32 msg_type                 = 1; // uint32_msg_type
    bytes msg_info                  = 2; // bytes_msg_info
    bytes version_ctrl              = 3; // bytes_version_ctrl
    uint64 group_id                 = 4; // uint64_group_id
    uint64 oper_uin                 = 5; // uint64_oper_uin
    bytes gray_tips                 = 6; // bytes_gray_tips
    uint64 msg_seq                  = 7; // uint64_msg_seq
    uint32 join_nums                = 8; // uint32_join_nums
    PersonalSetting msg_per_setting = 9; // msg_per_setting
    uint32 play_mode                = 10; // uint32_play_mode
    bool is_join_when_start         = 11; // is_join_when_start
    uint32 media_type               = 99; // uint32_media_type
    bytes ext_info                  = 100; // bytes_ext_info
    // PersonalSetting is the message type for the PersonalSetting.
    message PersonalSetting {
      uint32 theme_id  = 1; // uint32_theme_id
      uint32 player_id = 2; // uint32_player_id
      uint32 font_id   = 3; // uint32_font_id
    }
  }
  // MessageBoxInfo is the message type for the MessageBoxInfo.
  message MessageBoxInfo {
    optional bytes content = 1; // opt_bytes_content
    optional bytes title   = 2; // opt_bytes_title
    optional bytes button  = 3; // opt_bytes_button
  }
  // MessageRecallReminder is the message type for the MessageRecallReminder.
  message MessageRecallReminder {
    uint64 uin                             = 1; // uint64_uin
    bytes nickname                         = 2; // bytes_nickname
    repeated MessageMeta recalled_msg_list = 3; // uint32_recalled_msg_list
    bytes reminder_content                 = 4; // str_reminder_content
    bytes userdef                          = 5; // bytes_userdef
    uint32 group_type                      = 6; // uint32_group_type
    uint32 op_type                         = 7; // uint32_op_type
    uint64 admin_uin                       = 8; // uint64_admin_uin
    WithDrawWordingInfo msg_wording_info   = 9; // msg_wording_info
    // MessageMeta is the message type for the MessageMeta.
    message MessageMeta {
      uint32 seq          = 1; // uint32_seq
      uint32 time         = 2; // uint32_time
      uint32 msg_random   = 3; // uint32_msg_random
      uint32 msg_type     = 4; // uint32_msg_type
      uint32 msg_flag     = 5; // uint32_msg_flag
      uint64 author_uin   = 6; // uint64_author_uin
      uint32 is_anony_msg = 7; // uint32_is_anony_msg
    }
    // WithDrawWordingInfo is the message type for the WithDrawWordingInfo.
    message WithDrawWordingInfo {
      int32 item_id    = 1; // int32_item_id
      string item_name = 2; // string_item_name
    }
  }
  // MiniAppNotify is the message type for the MiniAppNotify.
  message MiniAppNotify {
    bytes msg = 1; // bytes_msg
  }
  // NotifyMsgBody is the message type for the NotifyMsgBody.
  message NotifyMsgBody {
    optional int32 enum_type                                      = 1; // opt_enum_type
    optional uint64 msg_time                                      = 2; // opt_uint64_msg_time
    optional uint64 msg_expires                                   = 3; // opt_uint64_msg_expires
    optional uint64 group_code                                    = 4; // opt_uint64_group_code
    optional AIOGrayTipsInfo msg_graytips                         = 5; // opt_msg_graytips
    optional MessageBoxInfo msg_messagebox                        = 6; // opt_msg_messagebox
    optional FloatedTipsInfo msg_floatedtips                      = 7; // opt_msg_floatedtips
    optional AIOTopTipsInfo msg_toptips                           = 8; // opt_msg_toptips
    optional RedGrayTipsInfo msg_redtips                          = 9; // opt_msg_redtips
    optional GroupNotifyInfo msg_group_notify                     = 10; // opt_msg_group_notify
    optional MessageRecallReminder msg_recall                     = 11; // opt_msg_recall
    optional ThemeStateNotify msg_theme_notify                    = 12; // opt_msg_theme_notify
    uint32 service_type                                           = 13; // uint32_service_type
    optional NotifyObjmsgUpdate msg_objmsg_update                 = 14; // opt_msg_objmsg_update
    optional WereWolfPush msg_werewolf_push                       = 15; // opt_msg_werewolf_push
    optional ApolloGameStatus.STCMGameMessage stcm_game_state   = 16; // opt_stcm_game_state
    ApolloPushMessage.STPushMsgElem apllo_msg_push              = 17; // apllo_msg_push
    optional GoldMsgTipsElem msg_goldtips                         = 18; // opt_msg_goldtips
    optional MiniAppNotify msg_miniapp_notify                     = 20; // opt_msg_miniapp_notify
    optional uint64 sender_uin                                    = 21; // opt_uint64_sender_uin
    optional LuckyBagNotify msg_luckybag_notify                   = 22; // opt_msg_luckybag_notify
    optional TroopFormGrayTipsInfo msg_troopformtips_push         = 23; // opt_msg_troopformtips_push
    optional MediaChangePushInfo msg_media_push                   = 24; // opt_msg_media_push
    optional GeneralGrayTipInfo general_gray_tip                  = 26; // opt_general_gray_tip
    optional VideoChangePushInfo msg_video_push                   = 27; // opt_msg_video_push
    optional LbsShareChangePushInfo lbs_share_change_plus_info    = 28; // opt_lbs_share_change_plus_info
    optional SingChangePushInfo msg_sing_push                     = 29; // opt_msg_sing_push
    optional GroupInfoChange msg_group_info_change                = 30; // opt_msg_group_info_change
    optional GroupAnnounceTBCInfo group_announce_tbc_info         = 31; // opt_group_announce_tbc_info
    optional QQVedioGamePushInfo qq_vedio_game_push_info          = 32; // opt_qq_vedio_game_push_info
    optional QQGroupDigestMsg qq_group_digest_msg                 = 33; // opt_qq_group_digest_msg
    optional StudyRoomMemberChangePush study_room_member_msg      = 34; // opt_study_room_member_msg
    optional QQVaLiveNotifyMsg qq_live_notify                     = 35; // opt_qq_live_notify
    optional GroupAsyncNotify group_async_notidy                  = 36; // opt_group_async_notidy
    optional uint64 group_cur_msg_seq                             = 37; // opt_uint64_group_cur_msg_seq
    optional QQGroupDigestMsgSummary group_digest_msg_summary     = 38; // opt_group_digest_msg_summary
    optional uint64 sysdb_msg_id                                  = 39; // opt_uint64_sysdb_msg_id
    optional RevertGrayTipsMsgTraceless revert_graytips_traceless = 40; // opt_revert_graytips_traceless
  }
  // NotifyObjmsgUpdate is the message type for the NotifyObjmsgUpdate.
  message NotifyObjmsgUpdate {
    bytes objmsg_id    = 1; // bytes_objmsg_id
    uint32 update_type = 2; // uint32_update_type
    bytes ext_msg      = 3; // bytes_ext_msg
  }
  // QQGroupDigestMsg is the message type for the QQGroupDigestMsg.
  message QQGroupDigestMsg {
    uint64 group_code      = 1; // group_code
    uint32 msg_seq         = 2; // msg_seq
    uint32 msg_random      = 3; // msg_random
    int32 op_type          = 4; // op_type
    uint64 msg_sender      = 5; // msg_sender
    uint64 digest_oper     = 6; // digest_oper
    uint32 op_time         = 7; // op_time
    uint32 lastest_msg_seq = 8; // lastest_msg_seq
    bytes oper_nick        = 9; // oper_nick
    bytes sender_nick      = 10; // sender_nick
    int32 ext_info         = 11; // ext_info
  }
  // QQGroupDigestMsgSummary is the message type for the QQGroupDigestMsgSummary.
  message QQGroupDigestMsgSummary {
    uint64 digest_oper                             = 1; // digest_oper
    int32 op_type                                  = 2; // op_type
    uint32 op_time                                 = 3; // op_time
    bytes digest_nick                              = 4; // digest_nick
    int32 succ_cnt                                 = 5; // succ_cnt
    repeated QQGroupDigestSummaryInfo summary_info = 6; // summary_info
  }
  // QQGroupDigestSummaryInfo is the message type for the QQGroupDigestSummaryInfo.
  message QQGroupDigestSummaryInfo {
    uint32 msg_seq    = 1; // msg_seq
    uint32 msg_random = 2; // msg_random
    uint32 error_code = 3; // error_code
  }
  // QQVaLiveNotifyMsg is the message type for the QQVaLiveNotifyMsg.
  message QQVaLiveNotifyMsg {
    bytes uid         = 1; // bytes_uid
    int32 notify_type = 2; // notify_type
    bytes ext1        = 3; // bytes_ext1
    bytes ext2        = 4; // bytes_ext2
    bytes ext3        = 5; // bytes_ext3
  }
  // QQVedioGamePushInfo is the message type for the QQVedioGamePushInfo.
  message QQVedioGamePushInfo {
    uint32 msg_type    = 1; // uint32_msg_type
    uint64 group_code  = 2; // uint64_group_code
    uint64 oper_uin    = 3; // uint64_oper_uin
    bytes version_ctrl = 4; // bytes_version_ctrl
    bytes ext_info     = 5; // bytes_ext_info
  }
  // RedGrayTipsInfo is the message type for the RedGrayTipsInfo.
  message RedGrayTipsInfo {
    optional uint32 show_lastest = 1; // opt_uint32_show_lastest
    uint64 sender_uin            = 2; // uint64_sender_uin
    uint64 receiver_uin          = 3; // uint64_receiver_uin
    bytes sender_rich_content    = 4; // bytes_sender_rich_content
    bytes receiver_rich_content  = 5; // bytes_receiver_rich_content
    bytes authkey                = 6; // bytes_authkey
    sint32 msgtype               = 7; // sint32_msgtype
    uint32 lucky_flag            = 8; // uint32_lucky_flag
    uint32 hide_flag             = 9; // uint32_hide_flag
    bytes pc_body                = 10; // bytes_pc_body
    uint32 icon                  = 11; // uint32_icon
    uint64 lucky_uin             = 12; // uint64_lucky_uin
    uint32 time                  = 13; // uint32_time
    uint32 random                = 14; // uint32_random
    bytes broadcast_rich_content = 15; // bytes_broadcast_rich_content
    bytes idiom                  = 16; // bytes_idiom
    uint32 idiom_seq             = 17; // uint32_idiom_seq
    bytes idiom_alpha            = 18; // bytes_idiom_alpha
    bytes jumpurl                = 19; // bytes_jumpurl
    uint32 subchannel            = 20; // uint32_subchannel
    bytes poem_rule              = 21; // bytes_poem_rule
  }
  // ReqBody is the message type for the ReqBody.
  message ReqBody {
    optional uint64 group_code = 1; // opt_uint64_group_code
    repeated uint64 memberuins = 2; // rpt_uint64_memberuins
    optional uint32 offline    = 3; // opt_uint32_offline
    InstCtrl msg_inst_ctrl     = 4; // msg_inst_ctrl
    optional bytes msg         = 5; // opt_bytes_msg
    optional uint32 busi_type  = 6; // opt_uint32_busi_type
  }
  // RevertGrayTipsMsgTraceless is the message type for the RevertGrayTipsMsgTraceless.
  message RevertGrayTipsMsgTraceless {
    uint64 from        = 1; // uint64_from
    uint64 to          = 2; // uint64_to
    uint64 group_code  = 3; // group_code
    uint64 busi_id     = 4; // uint64_busi_id
    uint64 tips_seq_id = 5; // uint64_tips_seq_id
  }
  // RspBody is the message type for the RspBody.
  message RspBody {
    optional uint64 group_code = 1; // opt_uint64_group_code
  }
  // SingChangePushInfo is the message type for the SingChangePushInfo.
  message SingChangePushInfo {
    uint64 seq         = 1; // uint64_seq
    uint32 action_type = 2; // uint32_action_type
    uint64 group_id    = 3; // uint64_group_id
    uint64 oper_uin    = 4; // uint64_oper_uin
    bytes gray_tips    = 5; // bytes_gray_tips
    uint32 join_nums   = 6; // uint32_join_nums
  }
  // StudyRoomMemberChangePush is the message type for the StudyRoomMemberChangePush.
  message StudyRoomMemberChangePush {
    uint32 member_count = 1; // member_count
  }
  // TemplParam is the message type for the TemplParam.
  message TemplParam {
    bytes name  = 1; // bytes_name
    bytes value = 2; // bytes_value
  }
  // ThemeStateNotify is the message type for the ThemeStateNotify.
  message ThemeStateNotify {
    uint32 state      = 1; // uint32_state
    bytes feeds_id    = 2; // bytes_feeds_id
    bytes theme_name  = 3; // bytes_theme_name
    uint64 action_uin = 4; // uint64_action_uin
    uint64 create_uin = 5; // uint64_create_uin
  }
  // TroopFormGrayTipsInfo is the message type for the TroopFormGrayTipsInfo.
  message TroopFormGrayTipsInfo {
    uint64 writer_uin  = 1; // uint64_writer_uin
    uint64 creator_uin = 2; // uint64_creator_uin
    bytes rich_content = 3; // bytes_rich_content
    optional bytes url = 4; // bytes_opt_bytes_url
    bytes creator_nick = 5; // bytes_creator_nick
  }
  // VideoChangePushInfo is the message type for the VideoChangePushInfo.
  message VideoChangePushInfo {
    uint64 seq         = 1; // uint64_seq
    uint32 action_type = 2; // uint32_action_type
    uint64 group_id    = 3; // uint64_group_id
    uint64 oper_uin    = 4; // uint64_oper_uin
    bytes gray_tips    = 5; // bytes_gray_tips
    uint32 join_nums   = 6; // uint32_join_nums
    uint32 join_state  = 7; // uint32_join_state
    bytes ext_info     = 100; // bytes_ext_info
  }
  // WereWolfPush is the message type for the WereWolfPush.
  message WereWolfPush {
    uint32 push_type                = 1; // uint32_push_type
    uint64 game_room                = 2; // uint64_game_room
    uint32 enum_game_state          = 3; // enum_game_state
    uint32 game_round               = 4; // uint32_game_round
    repeated Role roles             = 5; // rpt_roles
    uint64 speaker                  = 6; // uint64_speaker
    uint64 judge_uin                = 7; // uint64_judge_uin
    bytes judge_words               = 8; // bytes_judge_words
    uint32 enum_operation           = 9; // enum_operation
    uint64 src_user                 = 10; // uint64_src_user
    uint64 dst_user                 = 11; // uint64_dst_user
    repeated uint64 dead_users      = 12; // rpt_dead_users
    uint32 game_result              = 13; // uint32_game_result
    uint32 timeout_sec              = 14; // uint32_timeout_sec
    uint32 kill_confirmed           = 15; // uint32_kill_confirmed
    bytes judge_nickname            = 16; // bytes_judge_nickname
    repeated uint64 voted_tie_users = 17; // rpt_voted_tie_users
    // GameRecord is the message type for the GameRecord.
    message GameRecord {
      uint32 total = 1; // uint32_total
      uint32 win   = 2; // uint32_win
      uint32 lose  = 3; // uint32_lose
      uint32 draw  = 4; // uint32_draw
    }
    // Role is the message type for the Role.
    message Role {
      uint64 uin                 = 1; // uint64_uin
      uint32 enum_type           = 2; // enum_type
      uint32 enum_state          = 3; // enum_state
      uint32 can_speak           = 4; // uint32_can_speak
      uint32 can_listen          = 5; // uint32_can_listen
      uint32 position            = 6; // uint32_position
      uint32 can_vote            = 7; // uint32_can_vote
      uint32 can_voted           = 8; // uint32_can_voted
      uint32 already_checked     = 9; // uint32_already_checked
      uint32 already_saved       = 10; // uint32_already_saved
      uint32 already_poisoned    = 11; // uint32_already_poisoned
      uint32 player_state        = 12; // uint32_player_state
      uint32 enum_dead_op        = 13; // enum_dead_op
      uint32 enum_operation      = 14; // enum_operation
      uint64 dst_user            = 15; // uint64_dst_user
      uint32 operation_round     = 16; // uint32_operation_round
      GameRecord msg_game_record = 17; // msg_game_record
      uint32 is_werewolf         = 18; // uint32_is_werewolf
      uint64 defended_user       = 19; // uint64_defended_user
      uint32 is_sheriff          = 20; // uint32_is_sheriff
    }
  }
}
