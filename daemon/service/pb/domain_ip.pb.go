// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: daemon/service/pb/domain_ip.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message generated by proto-message-gen. DO NOT EDIT.
// source: tencent.p1298im.mobileqq.configpush.DomainIp
//
// DomainIp is the message type for the DomainIp.
type DomainIp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DomainIp) Reset() {
	*x = DomainIp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_service_pb_domain_ip_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainIp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainIp) ProtoMessage() {}

func (x *DomainIp) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_service_pb_domain_ip_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainIp.ProtoReflect.Descriptor instead.
func (*DomainIp) Descriptor() ([]byte, []int) {
	return file_daemon_service_pb_domain_ip_proto_rawDescGZIP(), []int{0}
}

// NameReqBody is the message type for the NameReqBody.
type DomainIp_NameReqBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubCmdName_Req *DomainIp_SubCmdName_Req `protobuf:"bytes,1,opt,name=SubCmd_name_Req,json=SubCmdNameReq,proto3" json:"SubCmd_name_Req,omitempty"` // SubCmd_name_Req
}

func (x *DomainIp_NameReqBody) Reset() {
	*x = DomainIp_NameReqBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_service_pb_domain_ip_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainIp_NameReqBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainIp_NameReqBody) ProtoMessage() {}

func (x *DomainIp_NameReqBody) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_service_pb_domain_ip_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainIp_NameReqBody.ProtoReflect.Descriptor instead.
func (*DomainIp_NameReqBody) Descriptor() ([]byte, []int) {
	return file_daemon_service_pb_domain_ip_proto_rawDescGZIP(), []int{0, 0}
}

func (x *DomainIp_NameReqBody) GetSubCmdName_Req() *DomainIp_SubCmdName_Req {
	if x != nil {
		return x.SubCmdName_Req
	}
	return nil
}

// NameRspBody is the message type for the NameRspBody.
type DomainIp_NameRspBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubCmdName_Rsp *DomainIp_SubCmdName_Rsp `protobuf:"bytes,1,opt,name=SubCmd_name_Rsp,json=SubCmdNameRsp,proto3" json:"SubCmd_name_Rsp,omitempty"` // SubCmd_name_Rsp
}

func (x *DomainIp_NameRspBody) Reset() {
	*x = DomainIp_NameRspBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_service_pb_domain_ip_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainIp_NameRspBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainIp_NameRspBody) ProtoMessage() {}

func (x *DomainIp_NameRspBody) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_service_pb_domain_ip_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainIp_NameRspBody.ProtoReflect.Descriptor instead.
func (*DomainIp_NameRspBody) Descriptor() ([]byte, []int) {
	return file_daemon_service_pb_domain_ip_proto_rawDescGZIP(), []int{0, 1}
}

func (x *DomainIp_NameRspBody) GetSubCmdName_Rsp() *DomainIp_SubCmdName_Rsp {
	if x != nil {
		return x.SubCmdName_Rsp
	}
	return nil
}

// ServerList is the message type for the ServerList.
type DomainIp_ServerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IP   string `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`      // string_IP
	Port uint32 `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"` // uint32_Port
}

func (x *DomainIp_ServerList) Reset() {
	*x = DomainIp_ServerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_service_pb_domain_ip_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainIp_ServerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainIp_ServerList) ProtoMessage() {}

func (x *DomainIp_ServerList) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_service_pb_domain_ip_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainIp_ServerList.ProtoReflect.Descriptor instead.
func (*DomainIp_ServerList) Descriptor() ([]byte, []int) {
	return file_daemon_service_pb_domain_ip_proto_rawDescGZIP(), []int{0, 2}
}

func (x *DomainIp_ServerList) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *DomainIp_ServerList) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// SubCmd_name_Req is the message type for the SubCmd_name_Req.
type DomainIp_SubCmdName_Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uip       uint32               `protobuf:"varint,1,opt,name=uip,proto3" json:"uip,omitempty"`            // uint32_uip
	Qq        uint32               `protobuf:"varint,2,opt,name=qq,proto3" json:"qq,omitempty"`              // uint32_qq
	DnameInfo []*DomainIpDnameInfo `protobuf:"bytes,3,rep,name=dnameInfo,proto3" json:"dnameInfo,omitempty"` // dnameInfo
}

func (x *DomainIp_SubCmdName_Req) Reset() {
	*x = DomainIp_SubCmdName_Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_service_pb_domain_ip_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainIp_SubCmdName_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainIp_SubCmdName_Req) ProtoMessage() {}

func (x *DomainIp_SubCmdName_Req) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_service_pb_domain_ip_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainIp_SubCmdName_Req.ProtoReflect.Descriptor instead.
func (*DomainIp_SubCmdName_Req) Descriptor() ([]byte, []int) {
	return file_daemon_service_pb_domain_ip_proto_rawDescGZIP(), []int{0, 3}
}

func (x *DomainIp_SubCmdName_Req) GetUip() uint32 {
	if x != nil {
		return x.Uip
	}
	return 0
}

func (x *DomainIp_SubCmdName_Req) GetQq() uint32 {
	if x != nil {
		return x.Qq
	}
	return 0
}

func (x *DomainIp_SubCmdName_Req) GetDnameInfo() []*DomainIpDnameInfo {
	if x != nil {
		return x.DnameInfo
	}
	return nil
}

// SubCmd_name_Rsp is the message type for the SubCmd_name_Rsp.
type DomainIp_SubCmdName_Rsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uip          uint32                `protobuf:"varint,1,opt,name=uip,proto3" json:"uip,omitempty"`                  // uint32_uip
	Qq           uint32                `protobuf:"varint,2,opt,name=qq,proto3" json:"qq,omitempty"`                    // uint32_qq
	IplistInfo   []*DomainIpIplistInfo `protobuf:"bytes,3,rep,name=iplistInfo,proto3" json:"iplistInfo,omitempty"`     // iplistInfo
	IplistInfoV6 []*DomainIpIplistInfo `protobuf:"bytes,4,rep,name=iplistInfoV6,proto3" json:"iplistInfoV6,omitempty"` // iplistInfoV6
}

func (x *DomainIp_SubCmdName_Rsp) Reset() {
	*x = DomainIp_SubCmdName_Rsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_service_pb_domain_ip_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainIp_SubCmdName_Rsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainIp_SubCmdName_Rsp) ProtoMessage() {}

func (x *DomainIp_SubCmdName_Rsp) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_service_pb_domain_ip_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainIp_SubCmdName_Rsp.ProtoReflect.Descriptor instead.
func (*DomainIp_SubCmdName_Rsp) Descriptor() ([]byte, []int) {
	return file_daemon_service_pb_domain_ip_proto_rawDescGZIP(), []int{0, 4}
}

func (x *DomainIp_SubCmdName_Rsp) GetUip() uint32 {
	if x != nil {
		return x.Uip
	}
	return 0
}

func (x *DomainIp_SubCmdName_Rsp) GetQq() uint32 {
	if x != nil {
		return x.Qq
	}
	return 0
}

func (x *DomainIp_SubCmdName_Rsp) GetIplistInfo() []*DomainIpIplistInfo {
	if x != nil {
		return x.IplistInfo
	}
	return nil
}

func (x *DomainIp_SubCmdName_Rsp) GetIplistInfoV6() []*DomainIpIplistInfo {
	if x != nil {
		return x.IplistInfoV6
	}
	return nil
}

// dnameInfo is the message type for the dnameInfo.
type DomainIpDnameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dname string `protobuf:"bytes,2,opt,name=dname,proto3" json:"dname,omitempty"` // string_dname
	Type  uint32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`  // uint32_type
}

func (x *DomainIpDnameInfo) Reset() {
	*x = DomainIpDnameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_service_pb_domain_ip_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainIpDnameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainIpDnameInfo) ProtoMessage() {}

func (x *DomainIpDnameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_service_pb_domain_ip_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainIpDnameInfo.ProtoReflect.Descriptor instead.
func (*DomainIpDnameInfo) Descriptor() ([]byte, []int) {
	return file_daemon_service_pb_domain_ip_proto_rawDescGZIP(), []int{0, 5}
}

func (x *DomainIpDnameInfo) GetDname() string {
	if x != nil {
		return x.Dname
	}
	return ""
}

func (x *DomainIpDnameInfo) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// iplistInfo is the message type for the iplistInfo.
type DomainIpIplistInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result         int32                  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`                                      // int32_result
	Dname          string                 `protobuf:"bytes,2,opt,name=dname,proto3" json:"dname,omitempty"`                                         // string_dname
	Type           uint32                 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`                                          // uint32_type
	Ttl            uint32                 `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`                                            // uint32_ttl
	ServerListData []*DomainIp_ServerList `protobuf:"bytes,5,rep,name=ServerList_data,json=ServerListData,proto3" json:"ServerList_data,omitempty"` // ServerList_data
}

func (x *DomainIpIplistInfo) Reset() {
	*x = DomainIpIplistInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_service_pb_domain_ip_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainIpIplistInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainIpIplistInfo) ProtoMessage() {}

func (x *DomainIpIplistInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_service_pb_domain_ip_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainIpIplistInfo.ProtoReflect.Descriptor instead.
func (*DomainIpIplistInfo) Descriptor() ([]byte, []int) {
	return file_daemon_service_pb_domain_ip_proto_rawDescGZIP(), []int{0, 6}
}

func (x *DomainIpIplistInfo) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *DomainIpIplistInfo) GetDname() string {
	if x != nil {
		return x.Dname
	}
	return ""
}

func (x *DomainIpIplistInfo) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DomainIpIplistInfo) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *DomainIpIplistInfo) GetServerListData() []*DomainIp_ServerList {
	if x != nil {
		return x.ServerListData
	}
	return nil
}

var File_daemon_service_pb_domain_ip_proto protoreflect.FileDescriptor

var file_daemon_service_pb_domain_ip_proto_rawDesc = []byte{
	0x0a, 0x21, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x70, 0x62, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x05, 0x0a, 0x08, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x70,
	0x1a, 0x50, 0x0a, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x41, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x43, 0x6d, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x52,
	0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x70, 0x2e, 0x53, 0x75, 0x62, 0x43, 0x6d, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x52, 0x65, 0x71, 0x52, 0x0d, 0x53, 0x75, 0x62, 0x43, 0x6d, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x50, 0x0a, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x73, 0x70, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x41, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x43, 0x6d, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x52, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x70, 0x2e, 0x53, 0x75, 0x62, 0x43, 0x6d, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x52, 0x73, 0x70, 0x52, 0x0d, 0x53, 0x75, 0x62, 0x43, 0x6d, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x73, 0x70, 0x1a, 0x30, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x1a, 0x66, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x43, 0x6d, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x71,
	0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x71, 0x71, 0x12, 0x31, 0x0a, 0x09, 0x64,
	0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x70, 0x2e, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xa3,
	0x01, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x43, 0x6d, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x52,
	0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x75, 0x69, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x71, 0x71, 0x12, 0x34, 0x0a, 0x0a, 0x69, 0x70, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x70, 0x2e, 0x69, 0x70, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x69, 0x70, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0c, 0x69, 0x70,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x36, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x70, 0x2e, 0x69, 0x70, 0x6c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x69, 0x70, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x56, 0x36, 0x1a, 0x35, 0x0a, 0x09, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x9f, 0x01, 0x0a, 0x0a,
	0x69, 0x70, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x74, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x3d,
	0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x2d, 0x5a,
	0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6c, 0x61, 0x70,
	0x35, 0x65, 0x2f, 0x70, 0x65, 0x6e, 0x67, 0x75, 0x69, 0x6e, 0x2f, 0x64, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_daemon_service_pb_domain_ip_proto_rawDescOnce sync.Once
	file_daemon_service_pb_domain_ip_proto_rawDescData = file_daemon_service_pb_domain_ip_proto_rawDesc
)

func file_daemon_service_pb_domain_ip_proto_rawDescGZIP() []byte {
	file_daemon_service_pb_domain_ip_proto_rawDescOnce.Do(func() {
		file_daemon_service_pb_domain_ip_proto_rawDescData = protoimpl.X.CompressGZIP(file_daemon_service_pb_domain_ip_proto_rawDescData)
	})
	return file_daemon_service_pb_domain_ip_proto_rawDescData
}

var file_daemon_service_pb_domain_ip_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_daemon_service_pb_domain_ip_proto_goTypes = []interface{}{
	(*DomainIp)(nil),                // 0: DomainIp
	(*DomainIp_NameReqBody)(nil),    // 1: DomainIp.NameReqBody
	(*DomainIp_NameRspBody)(nil),    // 2: DomainIp.NameRspBody
	(*DomainIp_ServerList)(nil),     // 3: DomainIp.ServerList
	(*DomainIp_SubCmdName_Req)(nil), // 4: DomainIp.SubCmd_name_Req
	(*DomainIp_SubCmdName_Rsp)(nil), // 5: DomainIp.SubCmd_name_Rsp
	(*DomainIpDnameInfo)(nil),       // 6: DomainIp.dnameInfo
	(*DomainIpIplistInfo)(nil),      // 7: DomainIp.iplistInfo
}
var file_daemon_service_pb_domain_ip_proto_depIdxs = []int32{
	4, // 0: DomainIp.NameReqBody.SubCmd_name_Req:type_name -> DomainIp.SubCmd_name_Req
	5, // 1: DomainIp.NameRspBody.SubCmd_name_Rsp:type_name -> DomainIp.SubCmd_name_Rsp
	6, // 2: DomainIp.SubCmd_name_Req.dnameInfo:type_name -> DomainIp.dnameInfo
	7, // 3: DomainIp.SubCmd_name_Rsp.iplistInfo:type_name -> DomainIp.iplistInfo
	7, // 4: DomainIp.SubCmd_name_Rsp.iplistInfoV6:type_name -> DomainIp.iplistInfo
	3, // 5: DomainIp.iplistInfo.ServerList_data:type_name -> DomainIp.ServerList
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_daemon_service_pb_domain_ip_proto_init() }
func file_daemon_service_pb_domain_ip_proto_init() {
	if File_daemon_service_pb_domain_ip_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_daemon_service_pb_domain_ip_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainIp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_service_pb_domain_ip_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainIp_NameReqBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_service_pb_domain_ip_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainIp_NameRspBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_service_pb_domain_ip_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainIp_ServerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_service_pb_domain_ip_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainIp_SubCmdName_Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_service_pb_domain_ip_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainIp_SubCmdName_Rsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_service_pb_domain_ip_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainIpDnameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_service_pb_domain_ip_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainIpIplistInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_daemon_service_pb_domain_ip_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_daemon_service_pb_domain_ip_proto_goTypes,
		DependencyIndexes: file_daemon_service_pb_domain_ip_proto_depIdxs,
		MessageInfos:      file_daemon_service_pb_domain_ip_proto_msgTypes,
	}.Build()
	File_daemon_service_pb_domain_ip_proto = out.File
	file_daemon_service_pb_domain_ip_proto_rawDesc = nil
	file_daemon_service_pb_domain_ip_proto_goTypes = nil
	file_daemon_service_pb_domain_ip_proto_depIdxs = nil
}
