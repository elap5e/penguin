// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: daemon/contact/pb/mutual_mark.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message generated by proto-message-gen. DO NOT EDIT.
// source: tencent.p1298im.mutualmark.C72454mutualmark
//
// MutualMark is the message type for the C72454mutualmark.
type MutualMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MutualMark) Reset() {
	*x = MutualMark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_contact_pb_mutual_mark_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutualMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutualMark) ProtoMessage() {}

func (x *MutualMark) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_contact_pb_mutual_mark_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutualMark.ProtoReflect.Descriptor instead.
func (*MutualMark) Descriptor() ([]byte, []int) {
	return file_daemon_contact_pb_mutual_mark_proto_rawDescGZIP(), []int{0}
}

// MutualActionDay is the message type for the MutualActionDay.
type MutualMark_MutualActionDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type uint64 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` // uint64_type
	Day  uint64 `protobuf:"varint,2,opt,name=day,proto3" json:"day,omitempty"`   // uint64_day
	Time uint64 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"` // uint64_time
}

func (x *MutualMark_MutualActionDay) Reset() {
	*x = MutualMark_MutualActionDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_contact_pb_mutual_mark_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutualMark_MutualActionDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutualMark_MutualActionDay) ProtoMessage() {}

func (x *MutualMark_MutualActionDay) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_contact_pb_mutual_mark_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutualMark_MutualActionDay.ProtoReflect.Descriptor instead.
func (*MutualMark_MutualActionDay) Descriptor() ([]byte, []int) {
	return file_daemon_contact_pb_mutual_mark_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MutualMark_MutualActionDay) GetType() uint64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MutualMark_MutualActionDay) GetDay() uint64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *MutualMark_MutualActionDay) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// ResourceInfo is the message type for the ResourceInfo.
type MutualMark_ResourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DynamicUrl  []byte `protobuf:"bytes,1,opt,name=dynamic_url,json=dynamicUrl,proto3" json:"dynamic_url,omitempty"`     // bytes_dynamic_url
	StaticUrl   []byte `protobuf:"bytes,2,opt,name=static_url,json=staticUrl,proto3" json:"static_url,omitempty"`        // bytes_static_url
	CartoonUrl  []byte `protobuf:"bytes,3,opt,name=cartoon_url,json=cartoonUrl,proto3" json:"cartoon_url,omitempty"`     // bytes_cartoon_url
	CartoonMd5  []byte `protobuf:"bytes,4,opt,name=cartoon_md5,json=cartoonMd5,proto3" json:"cartoon_md5,omitempty"`     // bytes_cartoon_md5
	PlayCartoon uint32 `protobuf:"varint,5,opt,name=play_cartoon,json=playCartoon,proto3" json:"play_cartoon,omitempty"` // uint32_play_cartoon
	Word        []byte `protobuf:"bytes,6,opt,name=word,proto3" json:"word,omitempty"`                                   // bytes_word
}

func (x *MutualMark_ResourceInfo) Reset() {
	*x = MutualMark_ResourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_contact_pb_mutual_mark_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutualMark_ResourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutualMark_ResourceInfo) ProtoMessage() {}

func (x *MutualMark_ResourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_contact_pb_mutual_mark_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutualMark_ResourceInfo.ProtoReflect.Descriptor instead.
func (*MutualMark_ResourceInfo) Descriptor() ([]byte, []int) {
	return file_daemon_contact_pb_mutual_mark_proto_rawDescGZIP(), []int{0, 1}
}

func (x *MutualMark_ResourceInfo) GetDynamicUrl() []byte {
	if x != nil {
		return x.DynamicUrl
	}
	return nil
}

func (x *MutualMark_ResourceInfo) GetStaticUrl() []byte {
	if x != nil {
		return x.StaticUrl
	}
	return nil
}

func (x *MutualMark_ResourceInfo) GetCartoonUrl() []byte {
	if x != nil {
		return x.CartoonUrl
	}
	return nil
}

func (x *MutualMark_ResourceInfo) GetCartoonMd5() []byte {
	if x != nil {
		return x.CartoonMd5
	}
	return nil
}

func (x *MutualMark_ResourceInfo) GetPlayCartoon() uint32 {
	if x != nil {
		return x.PlayCartoon
	}
	return 0
}

func (x *MutualMark_ResourceInfo) GetWord() []byte {
	if x != nil {
		return x.Word
	}
	return nil
}

// ResourceInfo_17 is the message type for the ResourceInfo_17.
type MutualMark_ResourceInfo_17 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DynamicUrl  []byte `protobuf:"bytes,1,opt,name=dynamic_url,json=dynamicUrl,proto3" json:"dynamic_url,omitempty"`     // bytes_dynamic_url
	StaticUrl   []byte `protobuf:"bytes,2,opt,name=static_url,json=staticUrl,proto3" json:"static_url,omitempty"`        // bytes_static_url
	CartoonUrl  []byte `protobuf:"bytes,3,opt,name=cartoon_url,json=cartoonUrl,proto3" json:"cartoon_url,omitempty"`     // bytes_cartoon_url
	CartoonMd5  []byte `protobuf:"bytes,4,opt,name=cartoon_md5,json=cartoonMd5,proto3" json:"cartoon_md5,omitempty"`     // bytes_cartoon_md5
	PlayCartoon uint32 `protobuf:"varint,5,opt,name=play_cartoon,json=playCartoon,proto3" json:"play_cartoon,omitempty"` // uint32_play_cartoon
	Word        []byte `protobuf:"bytes,6,opt,name=word,proto3" json:"word,omitempty"`                                   // bytes_word
}

func (x *MutualMark_ResourceInfo_17) Reset() {
	*x = MutualMark_ResourceInfo_17{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_contact_pb_mutual_mark_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutualMark_ResourceInfo_17) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutualMark_ResourceInfo_17) ProtoMessage() {}

func (x *MutualMark_ResourceInfo_17) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_contact_pb_mutual_mark_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutualMark_ResourceInfo_17.ProtoReflect.Descriptor instead.
func (*MutualMark_ResourceInfo_17) Descriptor() ([]byte, []int) {
	return file_daemon_contact_pb_mutual_mark_proto_rawDescGZIP(), []int{0, 2}
}

func (x *MutualMark_ResourceInfo_17) GetDynamicUrl() []byte {
	if x != nil {
		return x.DynamicUrl
	}
	return nil
}

func (x *MutualMark_ResourceInfo_17) GetStaticUrl() []byte {
	if x != nil {
		return x.StaticUrl
	}
	return nil
}

func (x *MutualMark_ResourceInfo_17) GetCartoonUrl() []byte {
	if x != nil {
		return x.CartoonUrl
	}
	return nil
}

func (x *MutualMark_ResourceInfo_17) GetCartoonMd5() []byte {
	if x != nil {
		return x.CartoonMd5
	}
	return nil
}

func (x *MutualMark_ResourceInfo_17) GetPlayCartoon() uint32 {
	if x != nil {
		return x.PlayCartoon
	}
	return 0
}

func (x *MutualMark_ResourceInfo_17) GetWord() []byte {
	if x != nil {
		return x.Word
	}
	return nil
}

// SpecialWordAttribute is the message type for the SpecialWordAttribute.
type MutualMark_SpecialWordAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId                       []byte                             `protobuf:"bytes,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`                                                                             // bytes_card_id
	CardColor                    []byte                             `protobuf:"bytes,2,opt,name=card_color,json=cardColor,proto3" json:"card_color,omitempty"`                                                                    // bytes_card_color
	SetUin                       uint64                             `protobuf:"varint,3,opt,name=set_uin,json=setUin,proto3" json:"set_uin,omitempty"`                                                                            // uint64_set_uin
	LastSetTime                  uint64                             `protobuf:"varint,4,opt,name=last_set_time,json=lastSetTime,proto3" json:"last_set_time,omitempty"`                                                           // uint64_last_set_time
	LastOnTime                   uint64                             `protobuf:"varint,5,opt,name=last_on_time,json=lastOnTime,proto3" json:"last_on_time,omitempty"`                                                              // uint64_last_on_time
	LastOffTime                  uint64                             `protobuf:"varint,6,opt,name=last_off_time,json=lastOffTime,proto3" json:"last_off_time,omitempty"`                                                           // uint64_last_off_time
	WordLightUpTime              uint64                             `protobuf:"varint,7,opt,name=word_light_up_time,json=wordLightUpTime,proto3" json:"word_light_up_time,omitempty"`                                             // uint64_word_light_up_time
	MsgMinSpecialWordCardGetInfo *MutualMark_SpecialWordCardGetInfo `protobuf:"bytes,8,opt,name=msg_min_special_word_card_get_info,json=msgMinSpecialWordCardGetInfo,proto3" json:"msg_min_special_word_card_get_info,omitempty"` // msg_min_special_word_card_get_info
	MsgMaxSpecialWordCardGetInfo *MutualMark_SpecialWordCardGetInfo `protobuf:"bytes,9,opt,name=msg_max_special_word_card_get_info,json=msgMaxSpecialWordCardGetInfo,proto3" json:"msg_max_special_word_card_get_info,omitempty"` // msg_max_special_word_card_get_info
}

func (x *MutualMark_SpecialWordAttribute) Reset() {
	*x = MutualMark_SpecialWordAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_contact_pb_mutual_mark_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutualMark_SpecialWordAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutualMark_SpecialWordAttribute) ProtoMessage() {}

func (x *MutualMark_SpecialWordAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_contact_pb_mutual_mark_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutualMark_SpecialWordAttribute.ProtoReflect.Descriptor instead.
func (*MutualMark_SpecialWordAttribute) Descriptor() ([]byte, []int) {
	return file_daemon_contact_pb_mutual_mark_proto_rawDescGZIP(), []int{0, 3}
}

func (x *MutualMark_SpecialWordAttribute) GetCardId() []byte {
	if x != nil {
		return x.CardId
	}
	return nil
}

func (x *MutualMark_SpecialWordAttribute) GetCardColor() []byte {
	if x != nil {
		return x.CardColor
	}
	return nil
}

func (x *MutualMark_SpecialWordAttribute) GetSetUin() uint64 {
	if x != nil {
		return x.SetUin
	}
	return 0
}

func (x *MutualMark_SpecialWordAttribute) GetLastSetTime() uint64 {
	if x != nil {
		return x.LastSetTime
	}
	return 0
}

func (x *MutualMark_SpecialWordAttribute) GetLastOnTime() uint64 {
	if x != nil {
		return x.LastOnTime
	}
	return 0
}

func (x *MutualMark_SpecialWordAttribute) GetLastOffTime() uint64 {
	if x != nil {
		return x.LastOffTime
	}
	return 0
}

func (x *MutualMark_SpecialWordAttribute) GetWordLightUpTime() uint64 {
	if x != nil {
		return x.WordLightUpTime
	}
	return 0
}

func (x *MutualMark_SpecialWordAttribute) GetMsgMinSpecialWordCardGetInfo() *MutualMark_SpecialWordCardGetInfo {
	if x != nil {
		return x.MsgMinSpecialWordCardGetInfo
	}
	return nil
}

func (x *MutualMark_SpecialWordAttribute) GetMsgMaxSpecialWordCardGetInfo() *MutualMark_SpecialWordCardGetInfo {
	if x != nil {
		return x.MsgMaxSpecialWordCardGetInfo
	}
	return nil
}

// SpecialWordCardGetInfo is the message type for the SpecialWordCardGetInfo.
type MutualMark_SpecialWordCardGetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin              uint64 `protobuf:"varint,1,opt,name=uin,proto3" json:"uin,omitempty"`                                                       // uint64_uin
	CanGetCardCount  uint32 `protobuf:"varint,2,opt,name=can_get_card_count,json=canGetCardCount,proto3" json:"can_get_card_count,omitempty"`    // uint32_can_get_card_count
	LastGiveCardTime uint64 `protobuf:"varint,3,opt,name=last_give_card_time,json=lastGiveCardTime,proto3" json:"last_give_card_time,omitempty"` // uint64_last_give_card_time
}

func (x *MutualMark_SpecialWordCardGetInfo) Reset() {
	*x = MutualMark_SpecialWordCardGetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_contact_pb_mutual_mark_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutualMark_SpecialWordCardGetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutualMark_SpecialWordCardGetInfo) ProtoMessage() {}

func (x *MutualMark_SpecialWordCardGetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_contact_pb_mutual_mark_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutualMark_SpecialWordCardGetInfo.ProtoReflect.Descriptor instead.
func (*MutualMark_SpecialWordCardGetInfo) Descriptor() ([]byte, []int) {
	return file_daemon_contact_pb_mutual_mark_proto_rawDescGZIP(), []int{0, 4}
}

func (x *MutualMark_SpecialWordCardGetInfo) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *MutualMark_SpecialWordCardGetInfo) GetCanGetCardCount() uint32 {
	if x != nil {
		return x.CanGetCardCount
	}
	return 0
}

func (x *MutualMark_SpecialWordCardGetInfo) GetLastGiveCardTime() uint64 {
	if x != nil {
		return x.LastGiveCardTime
	}
	return 0
}

// MutualMark is the message type for the MutualMark.
type MutualMark_MutualMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                    uint64                        `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                                                                               // uint64_type
	Level                   uint64                        `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                                                                             // uint64_level
	SrcUin                  uint64                        `protobuf:"varint,3,opt,name=src_uin,json=srcUin,proto3" json:"src_uin,omitempty"`                                                             // uint64_src_uin
	DstUin                  uint64                        `protobuf:"varint,4,opt,name=dst_uin,json=dstUin,proto3" json:"dst_uin,omitempty"`                                                             // uint64_dst_uin
	Count                   float32                       `protobuf:"fixed32,5,opt,name=count,proto3" json:"count,omitempty"`                                                                            // float_count
	Day                     uint64                        `protobuf:"varint,6,opt,name=day,proto3" json:"day,omitempty"`                                                                                 // uint64_day
	Time                    uint64                        `protobuf:"varint,7,opt,name=time,proto3" json:"time,omitempty"`                                                                               // uint64_time
	IconStatus              uint64                        `protobuf:"varint,8,opt,name=icon_status,json=iconStatus,proto3" json:"icon_status,omitempty"`                                                 // uint64_icon_status
	IconStatusEndTime       uint64                        `protobuf:"varint,9,opt,name=icon_status_end_time,json=iconStatusEndTime,proto3" json:"icon_status_end_time,omitempty"`                        // uint64_icon_status_end_time
	CloseFlag               uint32                        `protobuf:"varint,10,opt,name=close_flag,json=closeFlag,proto3" json:"close_flag,omitempty"`                                                   // uint32_close_flag
	ResourceInfo            []byte                        `protobuf:"bytes,11,opt,name=resource_info,json=resourceInfo,proto3" json:"resource_info,omitempty"`                                           // bytes_resource_info
	Cluster                 []byte                        `protobuf:"bytes,12,opt,name=cluster,proto3" json:"cluster,omitempty"`                                                                         // bytes_cluster
	SubLevel                uint64                        `protobuf:"varint,13,opt,name=sub_level,json=subLevel,proto3" json:"sub_level,omitempty"`                                                      // uint64_sub_level
	GradeResourceInfo       []byte                        `protobuf:"bytes,14,opt,name=grade_resource_info,json=gradeResourceInfo,proto3" json:"grade_resource_info,omitempty"`                          // bytes_grade_resource_info
	ModifyTime              uint64                        `protobuf:"varint,100,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`                                               // uint64_modify_time
	MinVer                  []byte                        `protobuf:"bytes,200,opt,name=min_ver,json=minVer,proto3" json:"min_ver,omitempty"`                                                            // bytes_min_ver
	MaxVer                  []byte                        `protobuf:"bytes,201,opt,name=max_ver,json=maxVer,proto3" json:"max_ver,omitempty"`                                                            // bytes_max_ver
	MutualActionDay         []*MutualMark_MutualActionDay `protobuf:"bytes,1000,rep,name=mutual_action_day,json=mutualActionDay,proto3" json:"mutual_action_day,omitempty"`                              // rpt_mutual_action_day
	LastWeekCount           float32                       `protobuf:"fixed32,1001,opt,name=last_week_count,json=lastWeekCount,proto3" json:"last_week_count,omitempty"`                                  // float_last_week_count
	AddFriendTime           uint64                        `protobuf:"varint,5000,opt,name=add_friend_time,json=addFriendTime,proto3" json:"add_friend_time,omitempty"`                                   // uint64_add_friend_time
	AddFriendFlag           uint64                        `protobuf:"varint,5001,opt,name=add_friend_flag,json=addFriendFlag,proto3" json:"add_friend_flag,omitempty"`                                   // uint64_add_friend_flag
	AddFriendTimeUpdateTime uint64                        `protobuf:"varint,5002,opt,name=add_friend_time_update_time,json=addFriendTimeUpdateTime,proto3" json:"add_friend_time_update_time,omitempty"` // uint64_add_friend_time_update_time
	DegradeTime             uint64                        `protobuf:"varint,6000,opt,name=degrade_time,json=degradeTime,proto3" json:"degrade_time,omitempty"`                                           // uint64_degrade_time
	PushTimeC2C_50          uint64                        `protobuf:"varint,15000,opt,name=push_time_c2c_50,json=pushTimeC2c50,proto3" json:"push_time_c2c_50,omitempty"`                                // uint64_push_time_c2c_50
	PushTimeC2C_100         uint64                        `protobuf:"varint,15001,opt,name=push_time_c2c_100,json=pushTimeC2c100,proto3" json:"push_time_c2c_100,omitempty"`                             // uint64_push_time_c2c_100
	PushTimeTalk            uint64                        `protobuf:"varint,15002,opt,name=push_time_talk,json=pushTimeTalk,proto3" json:"push_time_talk,omitempty"`                                     // uint64_push_time_talk
	PushTimeScore_200       uint64                        `protobuf:"varint,16000,opt,name=push_time_score_200,json=pushTimeScore200,proto3" json:"push_time_score_200,omitempty"`                       // uint64_push_time_score_200
	PushTimeScore_400       uint64                        `protobuf:"varint,16001,opt,name=push_time_score_400,json=pushTimeScore400,proto3" json:"push_time_score_400,omitempty"`                       // uint64_push_time_score_400
	PushTimeScore_600       uint64                        `protobuf:"varint,16002,opt,name=push_time_score_600,json=pushTimeScore600,proto3" json:"push_time_score_600,omitempty"`                       // uint64_push_time_score_600
	PushTimeScore_800       uint64                        `protobuf:"varint,16003,opt,name=push_time_score_800,json=pushTimeScore800,proto3" json:"push_time_score_800,omitempty"`                       // uint64_push_time_score_800
	PushTimeScore_1000      uint64                        `protobuf:"varint,16004,opt,name=push_time_score_1000,json=pushTimeScore1000,proto3" json:"push_time_score_1000,omitempty"`                    // uint64_push_time_score_1000
	PushTimeScore_1200      uint64                        `protobuf:"varint,16005,opt,name=push_time_score_1200,json=pushTimeScore1200,proto3" json:"push_time_score_1200,omitempty"`                    // uint64_push_time_score_1200
	SpecialWordAttribute    []byte                        `protobuf:"bytes,17000,opt,name=special_word_attribute,json=specialWordAttribute,proto3" json:"special_word_attribute,omitempty"`              // bytes_special_word_attribute
}

func (x *MutualMark_MutualMark) Reset() {
	*x = MutualMark_MutualMark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_contact_pb_mutual_mark_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutualMark_MutualMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutualMark_MutualMark) ProtoMessage() {}

func (x *MutualMark_MutualMark) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_contact_pb_mutual_mark_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutualMark_MutualMark.ProtoReflect.Descriptor instead.
func (*MutualMark_MutualMark) Descriptor() ([]byte, []int) {
	return file_daemon_contact_pb_mutual_mark_proto_rawDescGZIP(), []int{0, 5}
}

func (x *MutualMark_MutualMark) GetType() uint64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MutualMark_MutualMark) GetLevel() uint64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *MutualMark_MutualMark) GetSrcUin() uint64 {
	if x != nil {
		return x.SrcUin
	}
	return 0
}

func (x *MutualMark_MutualMark) GetDstUin() uint64 {
	if x != nil {
		return x.DstUin
	}
	return 0
}

func (x *MutualMark_MutualMark) GetCount() float32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MutualMark_MutualMark) GetDay() uint64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *MutualMark_MutualMark) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *MutualMark_MutualMark) GetIconStatus() uint64 {
	if x != nil {
		return x.IconStatus
	}
	return 0
}

func (x *MutualMark_MutualMark) GetIconStatusEndTime() uint64 {
	if x != nil {
		return x.IconStatusEndTime
	}
	return 0
}

func (x *MutualMark_MutualMark) GetCloseFlag() uint32 {
	if x != nil {
		return x.CloseFlag
	}
	return 0
}

func (x *MutualMark_MutualMark) GetResourceInfo() []byte {
	if x != nil {
		return x.ResourceInfo
	}
	return nil
}

func (x *MutualMark_MutualMark) GetCluster() []byte {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *MutualMark_MutualMark) GetSubLevel() uint64 {
	if x != nil {
		return x.SubLevel
	}
	return 0
}

func (x *MutualMark_MutualMark) GetGradeResourceInfo() []byte {
	if x != nil {
		return x.GradeResourceInfo
	}
	return nil
}

func (x *MutualMark_MutualMark) GetModifyTime() uint64 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

func (x *MutualMark_MutualMark) GetMinVer() []byte {
	if x != nil {
		return x.MinVer
	}
	return nil
}

func (x *MutualMark_MutualMark) GetMaxVer() []byte {
	if x != nil {
		return x.MaxVer
	}
	return nil
}

func (x *MutualMark_MutualMark) GetMutualActionDay() []*MutualMark_MutualActionDay {
	if x != nil {
		return x.MutualActionDay
	}
	return nil
}

func (x *MutualMark_MutualMark) GetLastWeekCount() float32 {
	if x != nil {
		return x.LastWeekCount
	}
	return 0
}

func (x *MutualMark_MutualMark) GetAddFriendTime() uint64 {
	if x != nil {
		return x.AddFriendTime
	}
	return 0
}

func (x *MutualMark_MutualMark) GetAddFriendFlag() uint64 {
	if x != nil {
		return x.AddFriendFlag
	}
	return 0
}

func (x *MutualMark_MutualMark) GetAddFriendTimeUpdateTime() uint64 {
	if x != nil {
		return x.AddFriendTimeUpdateTime
	}
	return 0
}

func (x *MutualMark_MutualMark) GetDegradeTime() uint64 {
	if x != nil {
		return x.DegradeTime
	}
	return 0
}

func (x *MutualMark_MutualMark) GetPushTimeC2C_50() uint64 {
	if x != nil {
		return x.PushTimeC2C_50
	}
	return 0
}

func (x *MutualMark_MutualMark) GetPushTimeC2C_100() uint64 {
	if x != nil {
		return x.PushTimeC2C_100
	}
	return 0
}

func (x *MutualMark_MutualMark) GetPushTimeTalk() uint64 {
	if x != nil {
		return x.PushTimeTalk
	}
	return 0
}

func (x *MutualMark_MutualMark) GetPushTimeScore_200() uint64 {
	if x != nil {
		return x.PushTimeScore_200
	}
	return 0
}

func (x *MutualMark_MutualMark) GetPushTimeScore_400() uint64 {
	if x != nil {
		return x.PushTimeScore_400
	}
	return 0
}

func (x *MutualMark_MutualMark) GetPushTimeScore_600() uint64 {
	if x != nil {
		return x.PushTimeScore_600
	}
	return 0
}

func (x *MutualMark_MutualMark) GetPushTimeScore_800() uint64 {
	if x != nil {
		return x.PushTimeScore_800
	}
	return 0
}

func (x *MutualMark_MutualMark) GetPushTimeScore_1000() uint64 {
	if x != nil {
		return x.PushTimeScore_1000
	}
	return 0
}

func (x *MutualMark_MutualMark) GetPushTimeScore_1200() uint64 {
	if x != nil {
		return x.PushTimeScore_1200
	}
	return 0
}

func (x *MutualMark_MutualMark) GetSpecialWordAttribute() []byte {
	if x != nil {
		return x.SpecialWordAttribute
	}
	return nil
}

var File_daemon_contact_pb_mutual_mark_proto protoreflect.FileDescriptor

var file_daemon_contact_pb_mutual_mark_proto_rawDesc = []byte{
	0x0a, 0x23, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x2f, 0x70, 0x62, 0x2f, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x12, 0x0a, 0x0a, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c,
	0x4d, 0x61, 0x72, 0x6b, 0x1a, 0x4b, 0x0a, 0x0f, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x1a, 0xc7, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x55,
	0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x74, 0x6f, 0x6f, 0x6e, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x74, 0x6f, 0x6f, 0x6e,
	0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x74, 0x6f, 0x6f, 0x6e, 0x5f, 0x6d,
	0x64, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x74, 0x6f, 0x6f,
	0x6e, 0x4d, 0x64, 0x35, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x61, 0x72,
	0x74, 0x6f, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x43, 0x61, 0x72, 0x74, 0x6f, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0xca, 0x01, 0x0a, 0x0f,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x31, 0x37, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x55, 0x72, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x74, 0x6f, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x74, 0x6f, 0x6f, 0x6e, 0x55, 0x72, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x74, 0x6f, 0x6f, 0x6e, 0x5f, 0x6d, 0x64, 0x35, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x74, 0x6f, 0x6f, 0x6e, 0x4d, 0x64,
	0x35, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x61, 0x72, 0x74, 0x6f, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x72,
	0x74, 0x6f, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0xda, 0x03, 0x0a, 0x14, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x63, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x74,
	0x5f, 0x75, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x74, 0x55,
	0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x4f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12,
	0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x22, 0x6d, 0x73, 0x67,
	0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72,
	0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61,
	0x72, 0x6b, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1c, 0x6d, 0x73, 0x67, 0x4d, 0x69,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6c, 0x0a, 0x22, 0x6d, 0x73, 0x67, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1c, 0x6d, 0x73, 0x67, 0x4d, 0x61, 0x78, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x72, 0x64, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x86, 0x01, 0x0a, 0x16, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x72, 0x64, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75,
	0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x63, 0x61, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2d, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x47, 0x69, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xf7,
	0x09, 0x0a, 0x0a, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x75,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x72, 0x63, 0x55, 0x69, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x73, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x64, 0x73, 0x74, 0x55, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x61,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x63, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x69, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x11, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x18, 0xc8,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x65, 0x72, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x6d, 0x61, 0x78, 0x56, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x11, 0x6d, 0x75, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x18, 0xe8, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b,
	0x2e, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79,
	0x52, 0x0f, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x79, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64,
	0x64, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x88, 0x27,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x89, 0x27, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61,
	0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3d, 0x0a, 0x1b,
	0x61, 0x64, 0x64, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x8a, 0x27, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x17, 0x61, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64,
	0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xf0, 0x2e, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x32, 0x63,
	0x5f, 0x35, 0x30, 0x18, 0x98, 0x75, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x75, 0x73, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x43, 0x32, 0x63, 0x35, 0x30, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x73,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x32, 0x63, 0x5f, 0x31, 0x30, 0x30, 0x18, 0x99,
	0x75, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x43,
	0x32, 0x63, 0x31, 0x30, 0x30, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x74, 0x61, 0x6c, 0x6b, 0x18, 0x9a, 0x75, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x70, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x32, 0x30, 0x30, 0x18, 0x80, 0x7d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x75, 0x73, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x32, 0x30, 0x30, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x34, 0x30, 0x30, 0x18, 0x81, 0x7d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x75, 0x73, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x34, 0x30, 0x30, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x36, 0x30, 0x30, 0x18, 0x82, 0x7d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x75, 0x73, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x36, 0x30, 0x30, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x38, 0x30, 0x30, 0x18, 0x83, 0x7d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x75, 0x73, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x38, 0x30, 0x30, 0x12, 0x30, 0x0a, 0x14,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x31, 0x30, 0x30, 0x30, 0x18, 0x84, 0x7d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x75, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x31, 0x30, 0x30, 0x30, 0x12, 0x30,
	0x0a, 0x14, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x31, 0x32, 0x30, 0x30, 0x18, 0x85, 0x7d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70,
	0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x31, 0x32, 0x30, 0x30,
	0x12, 0x36, 0x0a, 0x16, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0xe8, 0x84, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x14, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x64, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6c, 0x61, 0x70, 0x35, 0x65, 0x2f, 0x70, 0x65,
	0x6e, 0x67, 0x75, 0x69, 0x6e, 0x2f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_daemon_contact_pb_mutual_mark_proto_rawDescOnce sync.Once
	file_daemon_contact_pb_mutual_mark_proto_rawDescData = file_daemon_contact_pb_mutual_mark_proto_rawDesc
)

func file_daemon_contact_pb_mutual_mark_proto_rawDescGZIP() []byte {
	file_daemon_contact_pb_mutual_mark_proto_rawDescOnce.Do(func() {
		file_daemon_contact_pb_mutual_mark_proto_rawDescData = protoimpl.X.CompressGZIP(file_daemon_contact_pb_mutual_mark_proto_rawDescData)
	})
	return file_daemon_contact_pb_mutual_mark_proto_rawDescData
}

var file_daemon_contact_pb_mutual_mark_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_daemon_contact_pb_mutual_mark_proto_goTypes = []interface{}{
	(*MutualMark)(nil),                        // 0: MutualMark
	(*MutualMark_MutualActionDay)(nil),        // 1: MutualMark.MutualActionDay
	(*MutualMark_ResourceInfo)(nil),           // 2: MutualMark.ResourceInfo
	(*MutualMark_ResourceInfo_17)(nil),        // 3: MutualMark.ResourceInfo_17
	(*MutualMark_SpecialWordAttribute)(nil),   // 4: MutualMark.SpecialWordAttribute
	(*MutualMark_SpecialWordCardGetInfo)(nil), // 5: MutualMark.SpecialWordCardGetInfo
	(*MutualMark_MutualMark)(nil),             // 6: MutualMark.MutualMark
}
var file_daemon_contact_pb_mutual_mark_proto_depIdxs = []int32{
	5, // 0: MutualMark.SpecialWordAttribute.msg_min_special_word_card_get_info:type_name -> MutualMark.SpecialWordCardGetInfo
	5, // 1: MutualMark.SpecialWordAttribute.msg_max_special_word_card_get_info:type_name -> MutualMark.SpecialWordCardGetInfo
	1, // 2: MutualMark.MutualMark.mutual_action_day:type_name -> MutualMark.MutualActionDay
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_daemon_contact_pb_mutual_mark_proto_init() }
func file_daemon_contact_pb_mutual_mark_proto_init() {
	if File_daemon_contact_pb_mutual_mark_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_daemon_contact_pb_mutual_mark_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutualMark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_contact_pb_mutual_mark_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutualMark_MutualActionDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_contact_pb_mutual_mark_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutualMark_ResourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_contact_pb_mutual_mark_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutualMark_ResourceInfo_17); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_contact_pb_mutual_mark_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutualMark_SpecialWordAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_contact_pb_mutual_mark_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutualMark_SpecialWordCardGetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_contact_pb_mutual_mark_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutualMark_MutualMark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_daemon_contact_pb_mutual_mark_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_daemon_contact_pb_mutual_mark_proto_goTypes,
		DependencyIndexes: file_daemon_contact_pb_mutual_mark_proto_depIdxs,
		MessageInfos:      file_daemon_contact_pb_mutual_mark_proto_msgTypes,
	}.Build()
	File_daemon_contact_pb_mutual_mark_proto = out.File
	file_daemon_contact_pb_mutual_mark_proto_rawDesc = nil
	file_daemon_contact_pb_mutual_mark_proto_goTypes = nil
	file_daemon_contact_pb_mutual_mark_proto_depIdxs = nil
}
