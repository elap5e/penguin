// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: daemon/message/pb/head.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message generated by proto-message-gen. DO NOT EDIT.
// source: tencent.p1298im.msg.im_msg_head
//
// im_msg_head is the message type for the im_msg_head.
type IMMsgHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IMMsgHead) Reset() {
	*x = IMMsgHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_head_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgHead) ProtoMessage() {}

func (x *IMMsgHead) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_head_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgHead.ProtoReflect.Descriptor instead.
func (*IMMsgHead) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_head_proto_rawDescGZIP(), []int{0}
}

// C2CHead is the message type for the C2CHead.
type IMMsgHead_C2CHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToUin       uint64 `protobuf:"varint,1,opt,name=to_uin,json=toUin,proto3" json:"to_uin,omitempty"`                   // uint64_to_uin
	FromUin     uint64 `protobuf:"varint,2,opt,name=from_uin,json=fromUin,proto3" json:"from_uin,omitempty"`             // uint64_from_uin
	CcType      uint32 `protobuf:"varint,3,opt,name=cc_type,json=ccType,proto3" json:"cc_type,omitempty"`                // uint32_cc_type
	CcCmd       uint32 `protobuf:"varint,4,opt,name=cc_cmd,json=ccCmd,proto3" json:"cc_cmd,omitempty"`                   // uint32_cc_cmd
	AuthPicSig  []byte `protobuf:"bytes,5,opt,name=auth_pic_sig,json=authPicSig,proto3" json:"auth_pic_sig,omitempty"`   // bytes_auth_pic_sig
	AuthSig     []byte `protobuf:"bytes,6,opt,name=auth_sig,json=authSig,proto3" json:"auth_sig,omitempty"`              // bytes_auth_sig
	AuthBuf     []byte `protobuf:"bytes,7,opt,name=auth_buf,json=authBuf,proto3" json:"auth_buf,omitempty"`              // bytes_auth_buf
	ServerTime  uint32 `protobuf:"varint,8,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`    // uint32_server_time
	ClientTime  uint32 `protobuf:"varint,9,opt,name=client_time,json=clientTime,proto3" json:"client_time,omitempty"`    // uint32_client_time
	Rand        uint32 `protobuf:"varint,10,opt,name=rand,proto3" json:"rand,omitempty"`                                 // uint32_rand
	PhoneNumber string `protobuf:"bytes,11,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"` // string_phone_number
}

func (x *IMMsgHead_C2CHead) Reset() {
	*x = IMMsgHead_C2CHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_head_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgHead_C2CHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgHead_C2CHead) ProtoMessage() {}

func (x *IMMsgHead_C2CHead) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_head_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgHead_C2CHead.ProtoReflect.Descriptor instead.
func (*IMMsgHead_C2CHead) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_head_proto_rawDescGZIP(), []int{0, 0}
}

func (x *IMMsgHead_C2CHead) GetToUin() uint64 {
	if x != nil {
		return x.ToUin
	}
	return 0
}

func (x *IMMsgHead_C2CHead) GetFromUin() uint64 {
	if x != nil {
		return x.FromUin
	}
	return 0
}

func (x *IMMsgHead_C2CHead) GetCcType() uint32 {
	if x != nil {
		return x.CcType
	}
	return 0
}

func (x *IMMsgHead_C2CHead) GetCcCmd() uint32 {
	if x != nil {
		return x.CcCmd
	}
	return 0
}

func (x *IMMsgHead_C2CHead) GetAuthPicSig() []byte {
	if x != nil {
		return x.AuthPicSig
	}
	return nil
}

func (x *IMMsgHead_C2CHead) GetAuthSig() []byte {
	if x != nil {
		return x.AuthSig
	}
	return nil
}

func (x *IMMsgHead_C2CHead) GetAuthBuf() []byte {
	if x != nil {
		return x.AuthBuf
	}
	return nil
}

func (x *IMMsgHead_C2CHead) GetServerTime() uint32 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

func (x *IMMsgHead_C2CHead) GetClientTime() uint32 {
	if x != nil {
		return x.ClientTime
	}
	return 0
}

func (x *IMMsgHead_C2CHead) GetRand() uint32 {
	if x != nil {
		return x.Rand
	}
	return 0
}

func (x *IMMsgHead_C2CHead) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

// CSHead is the message type for the CSHead.
type IMMsgHead_CSHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin           uint64 `protobuf:"varint,1,opt,name=uin,proto3" json:"uin,omitempty"`                                           // uint64_uin
	Command       uint32 `protobuf:"varint,2,opt,name=command,proto3" json:"command,omitempty"`                                   // uint32_command
	Seq           uint32 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`                                           // uint32_seq
	Version       uint32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`                                   // uint32_version
	RetryTimes    uint32 `protobuf:"varint,5,opt,name=retry_times,json=retryTimes,proto3" json:"retry_times,omitempty"`           // uint32_retry_times
	ClientType    uint32 `protobuf:"varint,6,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`           // uint32_client_type
	Pubno         uint32 `protobuf:"varint,7,opt,name=pubno,proto3" json:"pubno,omitempty"`                                       // uint32_pubno
	Localid       uint32 `protobuf:"varint,8,opt,name=localid,proto3" json:"localid,omitempty"`                                   // uint32_localid
	Timezone      uint32 `protobuf:"varint,9,opt,name=timezone,proto3" json:"timezone,omitempty"`                                 // uint32_timezone
	ClientIp      uint32 `protobuf:"fixed32,10,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`               // uint32_client_ip
	ClientPort    uint32 `protobuf:"varint,11,opt,name=client_port,json=clientPort,proto3" json:"client_port,omitempty"`          // uint32_client_port
	ConnIp        uint32 `protobuf:"fixed32,12,opt,name=conn_ip,json=connIp,proto3" json:"conn_ip,omitempty"`                     // uint32_conn_ip
	ConnPort      uint32 `protobuf:"varint,13,opt,name=conn_port,json=connPort,proto3" json:"conn_port,omitempty"`                // uint32_conn_port
	InterfaceIp   uint32 `protobuf:"fixed32,14,opt,name=interface_ip,json=interfaceIp,proto3" json:"interface_ip,omitempty"`      // uint32_interface_ip
	InterfacePort uint32 `protobuf:"varint,15,opt,name=interface_port,json=interfacePort,proto3" json:"interface_port,omitempty"` // uint32_interface_port
	ActualIp      uint32 `protobuf:"fixed32,16,opt,name=actual_ip,json=actualIp,proto3" json:"actual_ip,omitempty"`               // uint32_actual_ip
	Flag          uint32 `protobuf:"varint,17,opt,name=flag,proto3" json:"flag,omitempty"`                                        // uint32_flag
	Timestamp     uint32 `protobuf:"fixed32,18,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                             // uint32_timestamp
	Subcmd        uint32 `protobuf:"varint,19,opt,name=subcmd,proto3" json:"subcmd,omitempty"`                                    // uint32_subcmd
	Result        uint32 `protobuf:"varint,20,opt,name=result,proto3" json:"result,omitempty"`                                    // uint32_result
	AppId         uint32 `protobuf:"varint,21,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`                         // uint32_app_id
	InstanceId    uint32 `protobuf:"varint,22,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`          // uint32_instance_id
	SessionId     uint64 `protobuf:"varint,23,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`             // uint64_session_id
	IdcId         uint32 `protobuf:"varint,24,opt,name=idc_id,json=idcId,proto3" json:"idc_id,omitempty"`                         // uint32_idc_id
}

func (x *IMMsgHead_CSHead) Reset() {
	*x = IMMsgHead_CSHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_head_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgHead_CSHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgHead_CSHead) ProtoMessage() {}

func (x *IMMsgHead_CSHead) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_head_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgHead_CSHead.ProtoReflect.Descriptor instead.
func (*IMMsgHead_CSHead) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_head_proto_rawDescGZIP(), []int{0, 1}
}

func (x *IMMsgHead_CSHead) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *IMMsgHead_CSHead) GetCommand() uint32 {
	if x != nil {
		return x.Command
	}
	return 0
}

func (x *IMMsgHead_CSHead) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *IMMsgHead_CSHead) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *IMMsgHead_CSHead) GetRetryTimes() uint32 {
	if x != nil {
		return x.RetryTimes
	}
	return 0
}

func (x *IMMsgHead_CSHead) GetClientType() uint32 {
	if x != nil {
		return x.ClientType
	}
	return 0
}

func (x *IMMsgHead_CSHead) GetPubno() uint32 {
	if x != nil {
		return x.Pubno
	}
	return 0
}

func (x *IMMsgHead_CSHead) GetLocalid() uint32 {
	if x != nil {
		return x.Localid
	}
	return 0
}

func (x *IMMsgHead_CSHead) GetTimezone() uint32 {
	if x != nil {
		return x.Timezone
	}
	return 0
}

func (x *IMMsgHead_CSHead) GetClientIp() uint32 {
	if x != nil {
		return x.ClientIp
	}
	return 0
}

func (x *IMMsgHead_CSHead) GetClientPort() uint32 {
	if x != nil {
		return x.ClientPort
	}
	return 0
}

func (x *IMMsgHead_CSHead) GetConnIp() uint32 {
	if x != nil {
		return x.ConnIp
	}
	return 0
}

func (x *IMMsgHead_CSHead) GetConnPort() uint32 {
	if x != nil {
		return x.ConnPort
	}
	return 0
}

func (x *IMMsgHead_CSHead) GetInterfaceIp() uint32 {
	if x != nil {
		return x.InterfaceIp
	}
	return 0
}

func (x *IMMsgHead_CSHead) GetInterfacePort() uint32 {
	if x != nil {
		return x.InterfacePort
	}
	return 0
}

func (x *IMMsgHead_CSHead) GetActualIp() uint32 {
	if x != nil {
		return x.ActualIp
	}
	return 0
}

func (x *IMMsgHead_CSHead) GetFlag() uint32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *IMMsgHead_CSHead) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *IMMsgHead_CSHead) GetSubcmd() uint32 {
	if x != nil {
		return x.Subcmd
	}
	return 0
}

func (x *IMMsgHead_CSHead) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *IMMsgHead_CSHead) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *IMMsgHead_CSHead) GetInstanceId() uint32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *IMMsgHead_CSHead) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *IMMsgHead_CSHead) GetIdcId() uint32 {
	if x != nil {
		return x.IdcId
	}
	return 0
}

// DeltaHead is the message type for the DeltaHead.
type IMMsgHead_DeltaHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalLen  uint64 `protobuf:"varint,1,opt,name=total_len,json=totalLen,proto3" json:"total_len,omitempty"`    // uint64_total_len
	Offset    uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`                        // uint64_offset
	AckOffset uint64 `protobuf:"varint,3,opt,name=ack_offset,json=ackOffset,proto3" json:"ack_offset,omitempty"` // uint64_ack_offset
	Cookie    []byte `protobuf:"bytes,4,opt,name=cookie,proto3" json:"cookie,omitempty"`                         // bytes_cookie
	AckCookie []byte `protobuf:"bytes,5,opt,name=ack_cookie,json=ackCookie,proto3" json:"ack_cookie,omitempty"`  // bytes_ack_cookie
	Result    uint32 `protobuf:"varint,6,opt,name=result,proto3" json:"result,omitempty"`                        // uint32_result
	Flags     uint32 `protobuf:"varint,7,opt,name=flags,proto3" json:"flags,omitempty"`                          // uint32_flags
}

func (x *IMMsgHead_DeltaHead) Reset() {
	*x = IMMsgHead_DeltaHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_head_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgHead_DeltaHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgHead_DeltaHead) ProtoMessage() {}

func (x *IMMsgHead_DeltaHead) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_head_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgHead_DeltaHead.ProtoReflect.Descriptor instead.
func (*IMMsgHead_DeltaHead) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_head_proto_rawDescGZIP(), []int{0, 2}
}

func (x *IMMsgHead_DeltaHead) GetTotalLen() uint64 {
	if x != nil {
		return x.TotalLen
	}
	return 0
}

func (x *IMMsgHead_DeltaHead) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *IMMsgHead_DeltaHead) GetAckOffset() uint64 {
	if x != nil {
		return x.AckOffset
	}
	return 0
}

func (x *IMMsgHead_DeltaHead) GetCookie() []byte {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *IMMsgHead_DeltaHead) GetAckCookie() []byte {
	if x != nil {
		return x.AckCookie
	}
	return nil
}

func (x *IMMsgHead_DeltaHead) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *IMMsgHead_DeltaHead) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

// Head is the message type for the Head.
type IMMsgHead_Head struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadType        uint32                  `protobuf:"varint,1,opt,name=head_type,json=headType,proto3" json:"head_type,omitempty"`                       // uint32_head_type
	MsgCsHead       *IMMsgHead_CSHead       `protobuf:"bytes,2,opt,name=msg_cs_head,json=msgCsHead,proto3" json:"msg_cs_head,omitempty"`                   // msg_cs_head
	MsgS2CHead      *IMMsgHead_S2CHead      `protobuf:"bytes,3,opt,name=msg_s2c_head,json=msgS2cHead,proto3" json:"msg_s2c_head,omitempty"`                // msg_s2c_head
	MsgHttpconnHead *IMMsgHead_HttpConnHead `protobuf:"bytes,4,opt,name=msg_httpconn_head,json=msgHttpconnHead,proto3" json:"msg_httpconn_head,omitempty"` // msg_httpconn_head
	PaintFlag       uint32                  `protobuf:"varint,5,opt,name=paint_flag,json=paintFlag,proto3" json:"paint_flag,omitempty"`                    // uint32_paint_flag
	MsgLoginSig     *IMMsgHead_LoginSig     `protobuf:"bytes,6,opt,name=msg_login_sig,json=msgLoginSig,proto3" json:"msg_login_sig,omitempty"`             // msg_login_sig
	MsgDeltaHead    *IMMsgHead_DeltaHead    `protobuf:"bytes,7,opt,name=msg_delta_head,json=msgDeltaHead,proto3" json:"msg_delta_head,omitempty"`          // msg_delta_head
	MsgC2CHead      *IMMsgHead_C2CHead      `protobuf:"bytes,8,opt,name=msg_c2c_head,json=msgC2cHead,proto3" json:"msg_c2c_head,omitempty"`                // msg_c2c_head
	MsgSconnHead    *IMMsgHead_SConnHead    `protobuf:"bytes,9,opt,name=msg_sconn_head,json=msgSconnHead,proto3" json:"msg_sconn_head,omitempty"`          // msg_sconn_head
	MsgInstCtrl     *IMMsgHead_InstCtrl     `protobuf:"bytes,10,opt,name=msg_inst_ctrl,json=msgInstCtrl,proto3" json:"msg_inst_ctrl,omitempty"`            // msg_inst_ctrl
}

func (x *IMMsgHead_Head) Reset() {
	*x = IMMsgHead_Head{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_head_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgHead_Head) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgHead_Head) ProtoMessage() {}

func (x *IMMsgHead_Head) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_head_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgHead_Head.ProtoReflect.Descriptor instead.
func (*IMMsgHead_Head) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_head_proto_rawDescGZIP(), []int{0, 3}
}

func (x *IMMsgHead_Head) GetHeadType() uint32 {
	if x != nil {
		return x.HeadType
	}
	return 0
}

func (x *IMMsgHead_Head) GetMsgCsHead() *IMMsgHead_CSHead {
	if x != nil {
		return x.MsgCsHead
	}
	return nil
}

func (x *IMMsgHead_Head) GetMsgS2CHead() *IMMsgHead_S2CHead {
	if x != nil {
		return x.MsgS2CHead
	}
	return nil
}

func (x *IMMsgHead_Head) GetMsgHttpconnHead() *IMMsgHead_HttpConnHead {
	if x != nil {
		return x.MsgHttpconnHead
	}
	return nil
}

func (x *IMMsgHead_Head) GetPaintFlag() uint32 {
	if x != nil {
		return x.PaintFlag
	}
	return 0
}

func (x *IMMsgHead_Head) GetMsgLoginSig() *IMMsgHead_LoginSig {
	if x != nil {
		return x.MsgLoginSig
	}
	return nil
}

func (x *IMMsgHead_Head) GetMsgDeltaHead() *IMMsgHead_DeltaHead {
	if x != nil {
		return x.MsgDeltaHead
	}
	return nil
}

func (x *IMMsgHead_Head) GetMsgC2CHead() *IMMsgHead_C2CHead {
	if x != nil {
		return x.MsgC2CHead
	}
	return nil
}

func (x *IMMsgHead_Head) GetMsgSconnHead() *IMMsgHead_SConnHead {
	if x != nil {
		return x.MsgSconnHead
	}
	return nil
}

func (x *IMMsgHead_Head) GetMsgInstCtrl() *IMMsgHead_InstCtrl {
	if x != nil {
		return x.MsgInstCtrl
	}
	return nil
}

// HttpConnHead is the message type for the HttpConnHead.
type IMMsgHead_HttpConnHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin          uint64                   `protobuf:"varint,1,opt,name=uin,proto3" json:"uin,omitempty"`                                        // uint64_uin
	Command      uint32                   `protobuf:"varint,2,opt,name=command,proto3" json:"command,omitempty"`                                // uint32_command
	SubCommand   uint32                   `protobuf:"varint,3,opt,name=sub_command,json=subCommand,proto3" json:"sub_command,omitempty"`        // uint32_sub_command
	Seq          uint32                   `protobuf:"varint,4,opt,name=seq,proto3" json:"seq,omitempty"`                                        // uint32_seq
	Version      uint32                   `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`                                // uint32_version
	RetryTimes   uint32                   `protobuf:"varint,6,opt,name=retry_times,json=retryTimes,proto3" json:"retry_times,omitempty"`        // uint32_retry_times
	ClientType   uint32                   `protobuf:"varint,7,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`        // uint32_client_type
	PubNo        uint32                   `protobuf:"varint,8,opt,name=pub_no,json=pubNo,proto3" json:"pub_no,omitempty"`                       // uint32_pub_no
	LocalId      uint32                   `protobuf:"varint,9,opt,name=local_id,json=localId,proto3" json:"local_id,omitempty"`                 // uint32_local_id
	TimeZone     uint32                   `protobuf:"varint,10,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`             // uint32_time_zone
	ClientIp     uint32                   `protobuf:"fixed32,11,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`            // uint32_client_ip
	ClientPort   uint32                   `protobuf:"varint,12,opt,name=client_port,json=clientPort,proto3" json:"client_port,omitempty"`       // uint32_client_port
	QzhttpIp     uint32                   `protobuf:"fixed32,13,opt,name=qzhttp_ip,json=qzhttpIp,proto3" json:"qzhttp_ip,omitempty"`            // uint32_qzhttp_ip
	QzhttpPort   uint32                   `protobuf:"varint,14,opt,name=qzhttp_port,json=qzhttpPort,proto3" json:"qzhttp_port,omitempty"`       // uint32_qzhttp_port
	SppIp        uint32                   `protobuf:"fixed32,15,opt,name=spp_ip,json=sppIp,proto3" json:"spp_ip,omitempty"`                     // uint32_spp_ip
	SppPort      uint32                   `protobuf:"varint,16,opt,name=spp_port,json=sppPort,proto3" json:"spp_port,omitempty"`                // uint32_spp_port
	Flag         uint32                   `protobuf:"varint,17,opt,name=flag,proto3" json:"flag,omitempty"`                                     // uint32_flag
	Key          []byte                   `protobuf:"bytes,18,opt,name=key,proto3" json:"key,omitempty"`                                        // bytes_key
	CompressType uint32                   `protobuf:"varint,19,opt,name=compress_type,json=compressType,proto3" json:"compress_type,omitempty"` // uint32_compress_type
	OriginSize   uint32                   `protobuf:"varint,20,opt,name=origin_size,json=originSize,proto3" json:"origin_size,omitempty"`       // uint32_origin_size
	ErrorCode    uint32                   `protobuf:"varint,21,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`          // uint32_error_code
	MsgRedirect  *IMMsgHead_RedirectMsg   `protobuf:"bytes,22,opt,name=msg_redirect,json=msgRedirect,proto3" json:"msg_redirect,omitempty"`     // msg_redirect
	CommandId    uint32                   `protobuf:"varint,23,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`          // uint32_command_id
	ServiceCmdid uint32                   `protobuf:"varint,24,opt,name=service_cmdid,json=serviceCmdid,proto3" json:"service_cmdid,omitempty"` // uint32_service_cmdid
	MsgOidbhead  *IMMsgHead_TransOidbHead `protobuf:"bytes,25,opt,name=msg_oidbhead,json=msgOidbhead,proto3" json:"msg_oidbhead,omitempty"`     // msg_oidbhead
}

func (x *IMMsgHead_HttpConnHead) Reset() {
	*x = IMMsgHead_HttpConnHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_head_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgHead_HttpConnHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgHead_HttpConnHead) ProtoMessage() {}

func (x *IMMsgHead_HttpConnHead) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_head_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgHead_HttpConnHead.ProtoReflect.Descriptor instead.
func (*IMMsgHead_HttpConnHead) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_head_proto_rawDescGZIP(), []int{0, 4}
}

func (x *IMMsgHead_HttpConnHead) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *IMMsgHead_HttpConnHead) GetCommand() uint32 {
	if x != nil {
		return x.Command
	}
	return 0
}

func (x *IMMsgHead_HttpConnHead) GetSubCommand() uint32 {
	if x != nil {
		return x.SubCommand
	}
	return 0
}

func (x *IMMsgHead_HttpConnHead) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *IMMsgHead_HttpConnHead) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *IMMsgHead_HttpConnHead) GetRetryTimes() uint32 {
	if x != nil {
		return x.RetryTimes
	}
	return 0
}

func (x *IMMsgHead_HttpConnHead) GetClientType() uint32 {
	if x != nil {
		return x.ClientType
	}
	return 0
}

func (x *IMMsgHead_HttpConnHead) GetPubNo() uint32 {
	if x != nil {
		return x.PubNo
	}
	return 0
}

func (x *IMMsgHead_HttpConnHead) GetLocalId() uint32 {
	if x != nil {
		return x.LocalId
	}
	return 0
}

func (x *IMMsgHead_HttpConnHead) GetTimeZone() uint32 {
	if x != nil {
		return x.TimeZone
	}
	return 0
}

func (x *IMMsgHead_HttpConnHead) GetClientIp() uint32 {
	if x != nil {
		return x.ClientIp
	}
	return 0
}

func (x *IMMsgHead_HttpConnHead) GetClientPort() uint32 {
	if x != nil {
		return x.ClientPort
	}
	return 0
}

func (x *IMMsgHead_HttpConnHead) GetQzhttpIp() uint32 {
	if x != nil {
		return x.QzhttpIp
	}
	return 0
}

func (x *IMMsgHead_HttpConnHead) GetQzhttpPort() uint32 {
	if x != nil {
		return x.QzhttpPort
	}
	return 0
}

func (x *IMMsgHead_HttpConnHead) GetSppIp() uint32 {
	if x != nil {
		return x.SppIp
	}
	return 0
}

func (x *IMMsgHead_HttpConnHead) GetSppPort() uint32 {
	if x != nil {
		return x.SppPort
	}
	return 0
}

func (x *IMMsgHead_HttpConnHead) GetFlag() uint32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *IMMsgHead_HttpConnHead) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *IMMsgHead_HttpConnHead) GetCompressType() uint32 {
	if x != nil {
		return x.CompressType
	}
	return 0
}

func (x *IMMsgHead_HttpConnHead) GetOriginSize() uint32 {
	if x != nil {
		return x.OriginSize
	}
	return 0
}

func (x *IMMsgHead_HttpConnHead) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *IMMsgHead_HttpConnHead) GetMsgRedirect() *IMMsgHead_RedirectMsg {
	if x != nil {
		return x.MsgRedirect
	}
	return nil
}

func (x *IMMsgHead_HttpConnHead) GetCommandId() uint32 {
	if x != nil {
		return x.CommandId
	}
	return 0
}

func (x *IMMsgHead_HttpConnHead) GetServiceCmdid() uint32 {
	if x != nil {
		return x.ServiceCmdid
	}
	return 0
}

func (x *IMMsgHead_HttpConnHead) GetMsgOidbhead() *IMMsgHead_TransOidbHead {
	if x != nil {
		return x.MsgOidbhead
	}
	return nil
}

// InstCtrl is the message type for the InstCtrl.
type IMMsgHead_InstCtrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgSendToInst  []*IMMsgHead_InstInfo `protobuf:"bytes,1,rep,name=msg_send_to_inst,json=msgSendToInst,proto3" json:"msg_send_to_inst,omitempty"`  // rpt_msg_send_to_inst
	MsgExcludeInst []*IMMsgHead_InstInfo `protobuf:"bytes,2,rep,name=msg_exclude_inst,json=msgExcludeInst,proto3" json:"msg_exclude_inst,omitempty"` // rpt_msg_exclude_inst
	MsgFromInst    *IMMsgHead_InstInfo   `protobuf:"bytes,3,opt,name=msg_from_inst,json=msgFromInst,proto3" json:"msg_from_inst,omitempty"`          // msg_from_inst
}

func (x *IMMsgHead_InstCtrl) Reset() {
	*x = IMMsgHead_InstCtrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_head_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgHead_InstCtrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgHead_InstCtrl) ProtoMessage() {}

func (x *IMMsgHead_InstCtrl) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_head_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgHead_InstCtrl.ProtoReflect.Descriptor instead.
func (*IMMsgHead_InstCtrl) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_head_proto_rawDescGZIP(), []int{0, 5}
}

func (x *IMMsgHead_InstCtrl) GetMsgSendToInst() []*IMMsgHead_InstInfo {
	if x != nil {
		return x.MsgSendToInst
	}
	return nil
}

func (x *IMMsgHead_InstCtrl) GetMsgExcludeInst() []*IMMsgHead_InstInfo {
	if x != nil {
		return x.MsgExcludeInst
	}
	return nil
}

func (x *IMMsgHead_InstCtrl) GetMsgFromInst() *IMMsgHead_InstInfo {
	if x != nil {
		return x.MsgFromInst
	}
	return nil
}

// InstInfo is the message type for the InstInfo.
type IMMsgHead_InstInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apppid         uint32 `protobuf:"varint,1,opt,name=apppid,proto3" json:"apppid,omitempty"`                                          // uint32_apppid
	Instid         uint32 `protobuf:"varint,2,opt,name=instid,proto3" json:"instid,omitempty"`                                          // uint32_instid
	Platform       uint32 `protobuf:"varint,3,opt,name=platform,proto3" json:"platform,omitempty"`                                      // uint32_platform
	EnumDeviceType int32  `protobuf:"varint,10,opt,name=enum_device_type,json=enumDeviceType,proto3" json:"enum_device_type,omitempty"` // enum_device_type
}

func (x *IMMsgHead_InstInfo) Reset() {
	*x = IMMsgHead_InstInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_head_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgHead_InstInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgHead_InstInfo) ProtoMessage() {}

func (x *IMMsgHead_InstInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_head_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgHead_InstInfo.ProtoReflect.Descriptor instead.
func (*IMMsgHead_InstInfo) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_head_proto_rawDescGZIP(), []int{0, 6}
}

func (x *IMMsgHead_InstInfo) GetApppid() uint32 {
	if x != nil {
		return x.Apppid
	}
	return 0
}

func (x *IMMsgHead_InstInfo) GetInstid() uint32 {
	if x != nil {
		return x.Instid
	}
	return 0
}

func (x *IMMsgHead_InstInfo) GetPlatform() uint32 {
	if x != nil {
		return x.Platform
	}
	return 0
}

func (x *IMMsgHead_InstInfo) GetEnumDeviceType() int32 {
	if x != nil {
		return x.EnumDeviceType
	}
	return 0
}

// LoginSig is the message type for the LoginSig.
type IMMsgHead_LoginSig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` // uint32_type
	Sig  []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`    // bytes_sig
}

func (x *IMMsgHead_LoginSig) Reset() {
	*x = IMMsgHead_LoginSig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_head_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgHead_LoginSig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgHead_LoginSig) ProtoMessage() {}

func (x *IMMsgHead_LoginSig) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_head_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgHead_LoginSig.ProtoReflect.Descriptor instead.
func (*IMMsgHead_LoginSig) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_head_proto_rawDescGZIP(), []int{0, 7}
}

func (x *IMMsgHead_LoginSig) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *IMMsgHead_LoginSig) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

// RedirectMsg is the message type for the RedirectMsg.
type IMMsgHead_RedirectMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastRedirectIp   uint32 `protobuf:"fixed32,1,opt,name=last_redirect_ip,json=lastRedirectIp,proto3" json:"last_redirect_ip,omitempty"`      // uint32_last_redirect_ip
	LastRedirectPort uint32 `protobuf:"varint,2,opt,name=last_redirect_port,json=lastRedirectPort,proto3" json:"last_redirect_port,omitempty"` // uint32_last_redirect_port
	RedirectIp       uint32 `protobuf:"fixed32,3,opt,name=redirect_ip,json=redirectIp,proto3" json:"redirect_ip,omitempty"`                    // uint32_redirect_ip
	RedirectPort     uint32 `protobuf:"varint,4,opt,name=redirect_port,json=redirectPort,proto3" json:"redirect_port,omitempty"`               // uint32_redirect_port
	RedirectCount    uint32 `protobuf:"varint,5,opt,name=redirect_count,json=redirectCount,proto3" json:"redirect_count,omitempty"`            // uint32_redirect_count
}

func (x *IMMsgHead_RedirectMsg) Reset() {
	*x = IMMsgHead_RedirectMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_head_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgHead_RedirectMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgHead_RedirectMsg) ProtoMessage() {}

func (x *IMMsgHead_RedirectMsg) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_head_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgHead_RedirectMsg.ProtoReflect.Descriptor instead.
func (*IMMsgHead_RedirectMsg) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_head_proto_rawDescGZIP(), []int{0, 8}
}

func (x *IMMsgHead_RedirectMsg) GetLastRedirectIp() uint32 {
	if x != nil {
		return x.LastRedirectIp
	}
	return 0
}

func (x *IMMsgHead_RedirectMsg) GetLastRedirectPort() uint32 {
	if x != nil {
		return x.LastRedirectPort
	}
	return 0
}

func (x *IMMsgHead_RedirectMsg) GetRedirectIp() uint32 {
	if x != nil {
		return x.RedirectIp
	}
	return 0
}

func (x *IMMsgHead_RedirectMsg) GetRedirectPort() uint32 {
	if x != nil {
		return x.RedirectPort
	}
	return 0
}

func (x *IMMsgHead_RedirectMsg) GetRedirectCount() uint32 {
	if x != nil {
		return x.RedirectCount
	}
	return 0
}

// S2CHead is the message type for the S2CHead.
type IMMsgHead_S2CHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubMsgtype uint32 `protobuf:"varint,1,opt,name=sub_msgtype,json=subMsgtype,proto3" json:"sub_msgtype,omitempty"` // uint32_sub_msgtype
	MsgType    uint32 `protobuf:"varint,2,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"`          // uint32_msg_type
	FromUin    uint64 `protobuf:"varint,3,opt,name=from_uin,json=fromUin,proto3" json:"from_uin,omitempty"`          // uint64_from_uin
	MsgId      uint32 `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`                // uint32_msg_id
	RelayIp    uint32 `protobuf:"fixed32,5,opt,name=relay_ip,json=relayIp,proto3" json:"relay_ip,omitempty"`         // uint32_relay_ip
	RelayPort  uint32 `protobuf:"varint,6,opt,name=relay_port,json=relayPort,proto3" json:"relay_port,omitempty"`    // uint32_relay_port
	ToUin      uint64 `protobuf:"varint,7,opt,name=to_uin,json=toUin,proto3" json:"to_uin,omitempty"`                // uint64_to_uin
}

func (x *IMMsgHead_S2CHead) Reset() {
	*x = IMMsgHead_S2CHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_head_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgHead_S2CHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgHead_S2CHead) ProtoMessage() {}

func (x *IMMsgHead_S2CHead) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_head_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgHead_S2CHead.ProtoReflect.Descriptor instead.
func (*IMMsgHead_S2CHead) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_head_proto_rawDescGZIP(), []int{0, 9}
}

func (x *IMMsgHead_S2CHead) GetSubMsgtype() uint32 {
	if x != nil {
		return x.SubMsgtype
	}
	return 0
}

func (x *IMMsgHead_S2CHead) GetMsgType() uint32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *IMMsgHead_S2CHead) GetFromUin() uint64 {
	if x != nil {
		return x.FromUin
	}
	return 0
}

func (x *IMMsgHead_S2CHead) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *IMMsgHead_S2CHead) GetRelayIp() uint32 {
	if x != nil {
		return x.RelayIp
	}
	return 0
}

func (x *IMMsgHead_S2CHead) GetRelayPort() uint32 {
	if x != nil {
		return x.RelayPort
	}
	return 0
}

func (x *IMMsgHead_S2CHead) GetToUin() uint64 {
	if x != nil {
		return x.ToUin
	}
	return 0
}

// SConnHead is the message type for the SConnHead.
type IMMsgHead_SConnHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IMMsgHead_SConnHead) Reset() {
	*x = IMMsgHead_SConnHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_head_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgHead_SConnHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgHead_SConnHead) ProtoMessage() {}

func (x *IMMsgHead_SConnHead) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_head_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgHead_SConnHead.ProtoReflect.Descriptor instead.
func (*IMMsgHead_SConnHead) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_head_proto_rawDescGZIP(), []int{0, 10}
}

// TransOidbHead is the message type for the TransOidbHead.
type IMMsgHead_TransOidbHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command     uint32 `protobuf:"varint,1,opt,name=command,proto3" json:"command,omitempty"`                            // uint32_command
	ServiceType uint32 `protobuf:"varint,2,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"` // uint32_service_type
	Result      uint32 `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`                              // uint32_result
	ErrorMsg    string `protobuf:"bytes,4,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`           // str_error_msg
}

func (x *IMMsgHead_TransOidbHead) Reset() {
	*x = IMMsgHead_TransOidbHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_head_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgHead_TransOidbHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgHead_TransOidbHead) ProtoMessage() {}

func (x *IMMsgHead_TransOidbHead) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_head_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgHead_TransOidbHead.ProtoReflect.Descriptor instead.
func (*IMMsgHead_TransOidbHead) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_head_proto_rawDescGZIP(), []int{0, 11}
}

func (x *IMMsgHead_TransOidbHead) GetCommand() uint32 {
	if x != nil {
		return x.Command
	}
	return 0
}

func (x *IMMsgHead_TransOidbHead) GetServiceType() uint32 {
	if x != nil {
		return x.ServiceType
	}
	return 0
}

func (x *IMMsgHead_TransOidbHead) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *IMMsgHead_TransOidbHead) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

var File_daemon_message_pb_head_proto protoreflect.FileDescriptor

var file_daemon_message_pb_head_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2f, 0x70, 0x62, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9,
	0x1a, 0x0a, 0x09, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x1a, 0xbc, 0x02, 0x0a,
	0x07, 0x43, 0x32, 0x43, 0x48, 0x65, 0x61, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x6f, 0x5f, 0x75,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x63,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x63, 0x5f, 0x63, 0x6d, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x63, 0x43, 0x6d, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x50, 0x69, 0x63, 0x53, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x61, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x62, 0x75, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x42,
	0x75, 0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x99, 0x05, 0x0a, 0x06,
	0x43, 0x53, 0x48, 0x65, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x73, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x75, 0x62, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x70, 0x75, 0x62, 0x6e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x6e, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x70,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62,
	0x63, 0x6d, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x75, 0x62, 0x63, 0x6d,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x69, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x64, 0x63, 0x49, 0x64, 0x1a, 0xc4, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c,
	0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x6b, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x61, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x1a, 0x90,
	0x04, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x73, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x49, 0x4d, 0x4d, 0x73,
	0x67, 0x48, 0x65, 0x61, 0x64, 0x2e, 0x43, 0x53, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x6d, 0x73,
	0x67, 0x43, 0x73, 0x48, 0x65, 0x61, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x6d, 0x73, 0x67, 0x5f, 0x73,
	0x32, 0x63, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x49, 0x4d, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x2e, 0x53, 0x32, 0x43, 0x48, 0x65, 0x61,
	0x64, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x53, 0x32, 0x63, 0x48, 0x65, 0x61, 0x64, 0x12, 0x43, 0x0a,
	0x11, 0x6d, 0x73, 0x67, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67,
	0x48, 0x65, 0x61, 0x64, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x65, 0x61,
	0x64, 0x52, 0x0f, 0x6d, 0x73, 0x67, 0x48, 0x74, 0x74, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x48, 0x65,
	0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x37, 0x0a, 0x0d, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x73,
	0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67,
	0x48, 0x65, 0x61, 0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x69, 0x67, 0x52, 0x0b, 0x6d,
	0x73, 0x67, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x0e, 0x6d, 0x73,
	0x67, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x2e, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x48, 0x65, 0x61, 0x64, 0x52, 0x0c, 0x6d, 0x73, 0x67, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x48, 0x65, 0x61, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x32,
	0x63, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x49,
	0x4d, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x2e, 0x43, 0x32, 0x43, 0x48, 0x65, 0x61, 0x64,
	0x52, 0x0a, 0x6d, 0x73, 0x67, 0x43, 0x32, 0x63, 0x48, 0x65, 0x61, 0x64, 0x12, 0x3a, 0x0a, 0x0e,
	0x6d, 0x73, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64,
	0x2e, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x52, 0x0c, 0x6d, 0x73, 0x67, 0x53,
	0x63, 0x6f, 0x6e, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x6d, 0x73, 0x67, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x43, 0x74, 0x72, 0x6c, 0x52, 0x0b, 0x6d, 0x73, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x43, 0x74, 0x72,
	0x6c, 0x1a, 0x8d, 0x06, 0x0a, 0x0c, 0x48, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x65,
	0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x75, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65,
	0x71, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x70, 0x75, 0x62, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70,
	0x75, 0x62, 0x4e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x7a,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x69, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x71,
	0x7a, 0x68, 0x74, 0x74, 0x70, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x7a, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x71, 0x7a,
	0x68, 0x74, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x70, 0x5f,
	0x69, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x73, 0x70, 0x70, 0x49, 0x70, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x70, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x73, 0x70, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x49, 0x4d,
	0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x4d, 0x73, 0x67, 0x52, 0x0b, 0x6d, 0x73, 0x67, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6d, 0x64, 0x69, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6d, 0x64, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x69, 0x64, 0x62,
	0x68, 0x65, 0x61, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x49, 0x4d, 0x4d,
	0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4f, 0x69, 0x64, 0x62,
	0x48, 0x65, 0x61, 0x64, 0x52, 0x0b, 0x6d, 0x73, 0x67, 0x4f, 0x69, 0x64, 0x62, 0x68, 0x65, 0x61,
	0x64, 0x1a, 0xc0, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x43, 0x74, 0x72, 0x6c, 0x12, 0x3c,
	0x0a, 0x10, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67,
	0x48, 0x65, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6d,
	0x73, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x10,
	0x6d, 0x73, 0x67, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x48, 0x65,
	0x61, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6d, 0x73, 0x67,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0d, 0x6d,
	0x73, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d,
	0x49, 0x6e, 0x73, 0x74, 0x1a, 0x80, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x61, 0x70, 0x70, 0x70, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x73,
	0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x28, 0x0a,
	0x10, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x30, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x53, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x69, 0x67, 0x1a, 0xd2, 0x01, 0x0a, 0x0b, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x49, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x49, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xc8,
	0x01, 0x0a, 0x07, 0x53, 0x32, 0x43, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x75, 0x62, 0x4d, 0x73, 0x67, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69,
	0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x49, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x6e, 0x1a, 0x0b, 0x0a, 0x09, 0x53, 0x43, 0x6f,
	0x6e, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x1a, 0x81, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x4f, 0x69, 0x64, 0x62, 0x48, 0x65, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6c, 0x61, 0x70, 0x35, 0x65, 0x2f,
	0x70, 0x65, 0x6e, 0x67, 0x75, 0x69, 0x6e, 0x2f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_daemon_message_pb_head_proto_rawDescOnce sync.Once
	file_daemon_message_pb_head_proto_rawDescData = file_daemon_message_pb_head_proto_rawDesc
)

func file_daemon_message_pb_head_proto_rawDescGZIP() []byte {
	file_daemon_message_pb_head_proto_rawDescOnce.Do(func() {
		file_daemon_message_pb_head_proto_rawDescData = protoimpl.X.CompressGZIP(file_daemon_message_pb_head_proto_rawDescData)
	})
	return file_daemon_message_pb_head_proto_rawDescData
}

var file_daemon_message_pb_head_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_daemon_message_pb_head_proto_goTypes = []interface{}{
	(*IMMsgHead)(nil),               // 0: IMMsgHead
	(*IMMsgHead_C2CHead)(nil),       // 1: IMMsgHead.C2CHead
	(*IMMsgHead_CSHead)(nil),        // 2: IMMsgHead.CSHead
	(*IMMsgHead_DeltaHead)(nil),     // 3: IMMsgHead.DeltaHead
	(*IMMsgHead_Head)(nil),          // 4: IMMsgHead.Head
	(*IMMsgHead_HttpConnHead)(nil),  // 5: IMMsgHead.HttpConnHead
	(*IMMsgHead_InstCtrl)(nil),      // 6: IMMsgHead.InstCtrl
	(*IMMsgHead_InstInfo)(nil),      // 7: IMMsgHead.InstInfo
	(*IMMsgHead_LoginSig)(nil),      // 8: IMMsgHead.LoginSig
	(*IMMsgHead_RedirectMsg)(nil),   // 9: IMMsgHead.RedirectMsg
	(*IMMsgHead_S2CHead)(nil),       // 10: IMMsgHead.S2CHead
	(*IMMsgHead_SConnHead)(nil),     // 11: IMMsgHead.SConnHead
	(*IMMsgHead_TransOidbHead)(nil), // 12: IMMsgHead.TransOidbHead
}
var file_daemon_message_pb_head_proto_depIdxs = []int32{
	2,  // 0: IMMsgHead.Head.msg_cs_head:type_name -> IMMsgHead.CSHead
	10, // 1: IMMsgHead.Head.msg_s2c_head:type_name -> IMMsgHead.S2CHead
	5,  // 2: IMMsgHead.Head.msg_httpconn_head:type_name -> IMMsgHead.HttpConnHead
	8,  // 3: IMMsgHead.Head.msg_login_sig:type_name -> IMMsgHead.LoginSig
	3,  // 4: IMMsgHead.Head.msg_delta_head:type_name -> IMMsgHead.DeltaHead
	1,  // 5: IMMsgHead.Head.msg_c2c_head:type_name -> IMMsgHead.C2CHead
	11, // 6: IMMsgHead.Head.msg_sconn_head:type_name -> IMMsgHead.SConnHead
	6,  // 7: IMMsgHead.Head.msg_inst_ctrl:type_name -> IMMsgHead.InstCtrl
	9,  // 8: IMMsgHead.HttpConnHead.msg_redirect:type_name -> IMMsgHead.RedirectMsg
	12, // 9: IMMsgHead.HttpConnHead.msg_oidbhead:type_name -> IMMsgHead.TransOidbHead
	7,  // 10: IMMsgHead.InstCtrl.msg_send_to_inst:type_name -> IMMsgHead.InstInfo
	7,  // 11: IMMsgHead.InstCtrl.msg_exclude_inst:type_name -> IMMsgHead.InstInfo
	7,  // 12: IMMsgHead.InstCtrl.msg_from_inst:type_name -> IMMsgHead.InstInfo
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_daemon_message_pb_head_proto_init() }
func file_daemon_message_pb_head_proto_init() {
	if File_daemon_message_pb_head_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_daemon_message_pb_head_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_head_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgHead_C2CHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_head_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgHead_CSHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_head_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgHead_DeltaHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_head_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgHead_Head); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_head_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgHead_HttpConnHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_head_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgHead_InstCtrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_head_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgHead_InstInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_head_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgHead_LoginSig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_head_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgHead_RedirectMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_head_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgHead_S2CHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_head_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgHead_SConnHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_head_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgHead_TransOidbHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_daemon_message_pb_head_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_daemon_message_pb_head_proto_goTypes,
		DependencyIndexes: file_daemon_message_pb_head_proto_depIdxs,
		MessageInfos:      file_daemon_message_pb_head_proto_msgTypes,
	}.Build()
	File_daemon_message_pb_head_proto = out.File
	file_daemon_message_pb_head_proto_rawDesc = nil
	file_daemon_message_pb_head_proto_goTypes = nil
	file_daemon_message_pb_head_proto_depIdxs = nil
}
