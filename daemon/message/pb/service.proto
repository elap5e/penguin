syntax = "proto3";

import "daemon/message/pb/body.proto";
import "daemon/message/pb/common.proto";
import "daemon/message/pb/control.proto";
import "daemon/message/pb/head.proto";
import "daemon/message/pb/receipt.proto";
import "daemon/message/pb/sub_type_0x1a.proto";
import "daemon/message/pb/sub_type_0xc1.proto";

option go_package = "github.com/elap5e/penguin/daemon/message/pb";

// Message generated by proto-message-gen. DO NOT EDIT.
// source: msf.msgsvc.msg_svc
//
// msg_svc is the message type for the msg_svc.
message MsgService {
  // AccostTmp is the message type for the AccostTmp.
  message AccostTmp {
    uint64 to_uin = 1; // to_uin
    bytes sig     = 2; // sig
    bool reply    = 3; // reply
  }
  // AddressListTmp is the message type for the AddressListTmp.
  message AddressListTmp {
    string from_phone        = 1; // from_phone
    string to_phone          = 2; // to_phone
    uint64 to_uin            = 3; // to_uin
    bytes sig                = 4; // sig
    uint32 from_contact_size = 5; // from_contact_size
  }
  // AuthTmp is the message type for the AuthTmp.
  message AuthTmp {
    uint64 to_uin = 1; // to_uin
    bytes sig     = 2; // sig
  }
  // BsnsTmp is the message type for the BsnsTmp.
  message BsnsTmp {
    uint64 to_uin = 1; // to_uin
    bytes sig     = 2; // sig
  }
  // BusinessWPATmp is the message type for the BusinessWPATmp.
  message BusinessWPATmp {
    uint64 to_uin = 1; // to_uin
    bytes sig     = 2; // sig
    bytes sigt    = 3; // sigt
  }
  // C2C is the message type for the C2C.
  message C2C {
    uint64 to_uin = 1; // to_uin
  }
  // CommTmp is the message type for the CommTmp.
  message CommTmp {
    uint64 to_uin   = 1; // to_uin
    uint32 c2c_type = 2; // c2c_type
    uint32 svr_type = 3; // svr_type
    bytes sig       = 4; // sig
    bytes reserved  = 5; // reserved
  }
  // Dis is the message type for the Dis.
  message Dis {
    uint64 dis_uin = 1; // dis_uin
  }
  // DisTmp is the message type for the DisTmp.
  message DisTmp {
    uint64 dis_uin = 1; // dis_uin
    uint64 to_uin  = 2; // to_uin
  }
  // Grp is the message type for the Grp.
  message Grp {
    uint64 group_code = 1; // group_code
  }
  // GrpTmp is the message type for the GrpTmp.
  message GrpTmp {
    uint64 group_uin = 1; // group_uin
    uint64 to_uin    = 2; // to_uin
  }
  // MsgSendInfo is the message type for the MsgSendInfo.
  message MsgSendInfo {
    uint32 receiver = 1; // receiver
  }
  // MultiMsgAssist is the message type for the MultiMsgAssist.
  message MultiMsgAssist {
    repeated RoutingHead repeated_routing = 1; // repeated_routing
    int32 msg_use                         = 2; // msg_use
    uint64 temp_id                        = 3; // uint64_temp_id
    uint64 vedio_len                      = 4; // uint64_vedio_len
    bytes redbag_id                       = 5; // bytes_redbag_id
    uint64 redbag_amount                  = 6; // uint64_redbag_amount
    uint32 has_readbag                    = 7; // uint32_has_readbag
    uint32 has_vedio                      = 8; // uint32_has_vedio
  }
  // NearByAssistantTmp is the message type for the NearByAssistantTmp.
  message NearByAssistantTmp {
    uint64 to_uin = 1; // to_uin
    bytes sig     = 2; // sig
    bool reply    = 3; // reply
  }
  // NearByDatingTmp is the message type for the NearByDatingTmp.
  message NearByDatingTmp {
    uint64 to_uin = 1; // to_uin
    bytes sig     = 2; // sig
    bool reply    = 3; // reply
  }
  // PbBindUinGetMsgReq is the message type for the PbBindUinGetMsgReq.
  message PbBindUinGetMsgReq {
    uint64 bind_uin    = 1; // bind_uin
    bytes bind_uin_sig = 2; // bind_uin_sig
    int32 sync_flag    = 3; // sync_flag
    bytes sync_cookie  = 4; // sync_cookie
  }
  // PbBindUinMsgReadedConfirmReq is the message type for the PbBindUinMsgReadedConfirmReq.
  message PbBindUinMsgReadedConfirmReq {
    bytes sync_cookie = 1; // sync_cookie
    uint64 bind_uin   = 2; // bind_uin
  }
  // PbBindUinMsgReadedConfirmResp is the message type for the PbBindUinMsgReadedConfirmResp.
  message PbBindUinMsgReadedConfirmResp {
    uint32 result     = 1; // result
    string errmsg     = 2; // errmsg
    bytes sync_cookie = 3; // sync_cookie
    uint64 bind_uin   = 4; // bind_uin
  }
  // PbBindUinUnReadMsgNumReq is the message type for the PbBindUinUnReadMsgNumReq.
  message PbBindUinUnReadMsgNumReq {
    uint64 bind_uin   = 1; // bind_uin
    bytes sync_cookie = 2; // sync_cookie
  }
  // PbBindUinUnReadMsgNumResp is the message type for the PbBindUinUnReadMsgNumResp.
  message PbBindUinUnReadMsgNumResp {
    uint32 result   = 1; // result
    string errmsg   = 2; // errmsg
    uint64 bind_uin = 3; // bind_uin
    uint32 msg_num  = 4; // msg_num
  }
  // PbC2CMsgWithDrawReq is the message type for the PbC2CMsgWithDrawReq.
  message PbC2CMsgWithDrawReq {
    repeated MsgInfo msg_info = 1; // msg_info
    uint32 long_message_flag  = 2; // uint32_long_message_flag
    bytes reserved            = 3; // bytes_reserved
    uint32 sub_cmd            = 4; // uint32_sub_cmd
    // MsgInfo is the message type for the MsgInfo.
    message MsgInfo {
      uint64 from_uin          = 1; // uint64_from_uin
      uint64 to_uin            = 2; // uint64_to_uin
      uint32 msg_seq           = 3; // uint32_msg_seq
      uint64 msg_uid           = 4; // uint64_msg_uid
      uint64 msg_time          = 5; // uint64_msg_time
      uint32 msg_random        = 6; // uint32_msg_random
      uint32 pkg_num           = 7; // uint32_pkg_num
      uint32 pkg_index         = 8; // uint32_pkg_index
      uint32 div_seq           = 9; // uint32_div_seq
      uint32 msg_type          = 10; // uint32_msg_type
      RoutingHead routing_head = 20; // routing_head
    }
  }
  // PbC2CMsgWithDrawResp is the message type for the PbC2CMsgWithDrawResp.
  message PbC2CMsgWithDrawResp {
    uint32 result                        = 1; // result
    string errmsg                        = 2; // errmsg
    repeated MsgStatus msg_status        = 3; // msg_status
    uint32 sub_cmd                       = 4; // uint32_sub_cmd
    WithDrawWordingInfo msg_wording_info = 5; // msg_wording_info
    // MsgStatus is the message type for the MsgStatus.
    message MsgStatus {
      PbC2CMsgWithDrawReq.MsgInfo msg_info = 1; // msg_info
      uint32 status                        = 2; // uint32_status
    }
  }
  // PbC2CReadedReportReq is the message type for the PbC2CReadedReportReq.
  message PbC2CReadedReportReq {
    bytes sync_cookie                  = 1; // sync_cookie
    repeated UinPairReadInfo pair_info = 2; // pair_info
    // UinPairReadInfo is the message type for the UinPairReadInfo.
    message UinPairReadInfo {
      uint64 peer_uin       = 1; // peer_uin
      uint32 last_read_time = 2; // last_read_time
      bytes crm_sig         = 3; // crm_sig
      int32 peer_type       = 4; // peer_type
      uint32 chat_type      = 5; // chat_type
      uint64 cpid           = 6; // cpid
      uint32 aio_type       = 7; // aio_type
      uint64 to_tiny_id     = 9; // uint64_to_tiny_id
    }
  }
  // PbC2CReadedReportResp is the message type for the PbC2CReadedReportResp.
  message PbC2CReadedReportResp {
    uint32 result     = 1; // result
    string errmsg     = 2; // errmsg
    bytes sync_cookie = 3; // sync_cookie
  }
  // PbC2CUnReadMsgNumReq is the message type for the PbC2CUnReadMsgNumReq.
  message PbC2CUnReadMsgNumReq {}
  // PbC2CUnReadMsgNumResp is the message type for the PbC2CUnReadMsgNumResp.
  message PbC2CUnReadMsgNumResp {
    uint32 result  = 1; // result
    string errmsg  = 2; // errmsg
    uint32 msg_num = 3; // msg_num
  }
  // PbDelRoamMsgReq is the message type for the PbDelRoamMsgReq.
  message PbDelRoamMsgReq {
    C2CMsg c2c_msg = 1; // c2c_msg
    GrpMsg grp_msg = 2; // grp_msg
    DisMsg dis_msg = 3; // dis_msg
    // C2CMsg is the message type for the C2CMsg.
    message C2CMsg {
      uint64 from_uin   = 1; // from_uin
      uint64 peer_uin   = 2; // peer_uin
      uint32 msg_time   = 3; // msg_time
      uint32 msg_random = 4; // msg_random
      uint32 msg_seq    = 5; // msg_seq
    }
    // DisMsg is the message type for the DisMsg.
    message DisMsg {
      uint64 discuss_uin = 1; // discuss_uin
      uint64 msg_seq     = 2; // msg_seq
    }
    // GrpMsg is the message type for the GrpMsg.
    message GrpMsg {
      uint64 group_code = 1; // group_code
      uint64 msg_seq    = 2; // msg_seq
      uint32 resv_flag  = 3; // uint32_resv_flag
    }
  }
  // PbDelRoamMsgResp is the message type for the PbDelRoamMsgResp.
  message PbDelRoamMsgResp {
    uint32 result = 1; // result
    string errmsg = 2; // errmsg
  }
  // PbDeleteMsgReq is the message type for the PbDeleteMsgReq.
  message PbDeleteMsgReq {
    repeated MsgItem msgItems = 1; // msgItems
    // MsgItem is the message type for the MsgItem.
    message MsgItem {
      uint64 from_uin = 1; // from_uin
      uint64 to_uin   = 2; // to_uin
      uint32 msg_type = 3; // msg_type
      uint32 msg_seq  = 4; // msg_seq
      uint64 msg_uid  = 5; // msg_uid
      bytes sig       = 7; // sig
    }
  }
  // PbDeleteMsgResp is the message type for the PbDeleteMsgResp.
  message PbDeleteMsgResp {
    uint32 result = 1; // result
    string errmsg = 2; // errmsg
  }
  // PbDiscussReadedReportReq is the message type for the PbDiscussReadedReportReq.
  message PbDiscussReadedReportReq {
    uint64 conf_uin      = 1; // conf_uin
    uint64 last_read_seq = 2; // last_read_seq
  }
  // PbDiscussReadedReportResp is the message type for the PbDiscussReadedReportResp.
  message PbDiscussReadedReportResp {
    uint32 result     = 1; // result
    string errmsg     = 2; // errmsg
    uint64 conf_uin   = 3; // conf_uin
    uint64 member_seq = 4; // member_seq
    uint64 conf_seq   = 5; // conf_seq
  }
  // PbGetDiscussMsgReq is the message type for the PbGetDiscussMsgReq.
  message PbGetDiscussMsgReq {
    uint64 discuss_uin      = 1; // discuss_uin
    uint64 end_seq          = 2; // end_seq
    uint64 begin_seq        = 3; // begin_seq
    uint64 last_get_time    = 4; // last_get_time
    uint64 discuss_info_seq = 5; // discuss_info_seq
    int32 filter            = 6; // filter
    uint64 member_seq       = 7; // member_seq
  }
  // PbGetDiscussMsgResp is the message type for the PbGetDiscussMsgResp.
  message PbGetDiscussMsgResp {
    uint32 result           = 1; // result
    string errmsg           = 2; // errmsg
    uint64 discuss_uin      = 3; // discuss_uin
    uint64 return_end_seq   = 4; // return_end_seq
    uint64 return_begin_seq = 5; // return_begin_seq
    uint64 last_get_time    = 7; // last_get_time
    uint64 discuss_info_seq = 8; // discuss_info_seq
  }
  // PbGetGroupMsgReq is the message type for the PbGetGroupMsgReq.
  message PbGetGroupMsgReq {
    uint64 group_code        = 1; // group_code
    uint64 begin_seq         = 2; // begin_seq
    uint64 end_seq           = 3; // end_seq
    int32 filter             = 4; // filter
    uint64 member_seq        = 5; // member_seq
    bool public_group        = 6; // public_group
    uint32 shield_flag       = 7; // shield_flag
    uint32 save_traffic_flag = 8; // save_traffic_flag
  }
  // PbGetGroupMsgResp is the message type for the PbGetGroupMsgResp.
  message PbGetGroupMsgResp {
    uint32 result                = 1; // result
    string errmsg                = 2; // errmsg
    uint64 group_code            = 3; // group_code
    uint64 return_begin_seq      = 4; // return_begin_seq
    uint64 return_end_seq        = 5; // return_end_seq
    uint32 has_share_history_msg = 9; // uint32_has_share_history_msg
  }
  // PbGetMsgReq is the message type for the PbGetMsgReq.
  message PbGetMsgReq {
    int32 sync_flag             = 1; // sync_flag
    bytes sync_cookie           = 2; // sync_cookie
    uint32 ramble_flag          = 3; // ramble_flag
    uint32 latest_ramble_number = 4; // latest_ramble_number
    uint32 other_ramble_number  = 5; // other_ramble_number
    uint32 online_sync_flag     = 6; // online_sync_flag
    uint32 context_flag         = 7; // context_flag
    uint32 whisper_session_id   = 8; // whisper_session_id
    uint32 msg_req_type         = 9; // msg_req_type
    bytes pubaccount_cookie     = 10; // pubaccount_cookie
    bytes msg_ctrl_buf          = 11; // msg_ctrl_buf
    bytes server_buf            = 12; // bytes_server_buf
  }
  // PbGetMsgResp is the message type for the PbGetMsgResp.
  message PbGetMsgResp {
    uint32 result                              = 1; // result
    string errmsg                              = 2; // errmsg
    bytes sync_cookie                          = 3; // sync_cookie
    int32 sync_flag                            = 4; // sync_flag
    repeated MsgCommon.UinPairMsg uin_pair_msgs = 5; // uin_pair_msgs
    uint64 bind_uin                            = 6; // bind_uin
    uint32 msg_rsp_type                        = 7; // msg_rsp_type
    bytes pubaccount_cookie                    = 8; // pubaccount_cookie
    bool is_partial_sync                       = 9; // is_partial_sync
    bytes msg_ctrl_buf                         = 10; // msg_ctrl_buf
  }
  // PbGetOneDayRoamMsgReq is the message type for the PbGetOneDayRoamMsgReq.
  message PbGetOneDayRoamMsgReq {
    uint64 peer_uin     = 1; // peer_uin
    uint64 last_msgtime = 2; // last_msgtime
    uint64 random       = 3; // random
    uint32 read_cnt     = 4; // read_cnt
  }
  // PbGetOneDayRoamMsgResp is the message type for the PbGetOneDayRoamMsgResp.
  message PbGetOneDayRoamMsgResp {
    uint32 result       = 1; // result
    string errmsg       = 2; // errmsg
    uint64 peer_uin     = 3; // peer_uin
    uint64 last_msgtime = 4; // last_msgtime
    uint64 random       = 5; // random
    uint32 iscomplete   = 7; // iscomplete
  }
  // PbGetRoamMsgReq is the message type for the PbGetRoamMsgReq.
  message PbGetRoamMsgReq {
    uint64 peer_uin      = 1; // peer_uin
    uint64 last_msgtime  = 2; // last_msgtime
    uint64 random        = 3; // random
    uint32 read_cnt      = 4; // read_cnt
    uint32 check_pwd     = 5; // check_pwd
    bytes sig            = 6; // sig
    bytes pwd            = 7; // pwd
    uint32 subcmd        = 8; // subcmd
    uint64 begin_msgtime = 9; // begin_msgtime
    uint32 req_type      = 10; // req_type
  }
  // PbGetRoamMsgResp is the message type for the PbGetRoamMsgResp.
  message PbGetRoamMsgResp {
    uint32 result       = 1; // result
    string errmsg       = 2; // errmsg
    uint64 peer_uin     = 3; // peer_uin
    uint64 last_msgtime = 4; // last_msgtime
    uint64 random       = 5; // random
    bytes sig           = 7; // sig
  }
  // PbGroupMsgWithDrawReq is the message type for the PbGroupMsgWithDrawReq.
  message PbGroupMsgWithDrawReq {
    uint32 sub_cmd                = 1; // uint32_sub_cmd
    uint32 group_type             = 2; // uint32_group_type
    uint64 group_code             = 3; // uint64_group_code
    repeated MessageInfo msg_list = 4; // msg_list
    bytes userdef                 = 5; // bytes_userdef
    // MessageInfo is the message type for the MessageInfo.
    message MessageInfo {
      uint32 msg_seq    = 1; // uint32_msg_seq
      uint32 msg_random = 2; // uint32_msg_random
      uint32 msg_type   = 3; // uint32_msg_type
      uint32 resv_flag  = 4; // uint32_resv_flag
    }
  }
  // PbGroupMsgWithDrawResp is the message type for the PbGroupMsgWithDrawResp.
  message PbGroupMsgWithDrawResp {
    uint32 result                          = 1; // result
    string errmsg                          = 2; // errmsg
    uint32 sub_cmd                         = 3; // uint32_sub_cmd
    uint32 group_type                      = 4; // uint32_group_type
    uint64 group_code                      = 5; // uint64_group_code
    repeated MessageResult failed_msg_list = 6; // failed_msg_list
    bytes userdef                          = 7; // bytes_userdef
    WithDrawWordingInfo msg_wording_info   = 8; // msg_wording_info
    // MessageResult is the message type for the MessageResult.
    message MessageResult {
      uint32 result     = 1; // uint32_result
      uint32 msg_seq    = 2; // uint32_msg_seq
      uint32 msg_time   = 3; // uint32_msg_time
      uint32 msg_random = 4; // uint32_msg_random
      bytes err_msg     = 5; // bytes_err_msg
      uint32 msg_type   = 6; // uint32_msg_type
    }
  }
  // PbGroupReadedReportReq is the message type for the PbGroupReadedReportReq.
  message PbGroupReadedReportReq {
    uint64 group_code    = 1; // group_code
    uint64 last_read_seq = 2; // last_read_seq
  }
  // PbGroupReadedReportResp is the message type for the PbGroupReadedReportResp.
  message PbGroupReadedReportResp {
    uint32 result        = 1; // result
    string errmsg        = 2; // errmsg
    uint64 group_code    = 3; // group_code
    uint64 member_seq    = 4; // member_seq
    uint64 group_msg_seq = 5; // group_msg_seq
  }
  // PbInputNotifyInfo is the message type for the PbInputNotifyInfo.
  message PbInputNotifyInfo {
    uint64 to_uin          = 1; // to_uin
    uint32 ime             = 2; // ime
    uint32 notify_flag     = 3; // notify_flag
    bytes pb_reserve       = 4; // bytes_pb_reserve
    bytes ios_push_wording = 5; // ios_push_wording
  }
  // PbMsgReadedReportReq is the message type for the PbMsgReadedReportReq.
  message PbMsgReadedReportReq {
    repeated PbGroupReadedReportReq grp_read_report   = 1; // grp_read_report
    repeated PbDiscussReadedReportReq dis_read_report = 2; // dis_read_report
    PbC2CReadedReportReq c2c_read_report              = 3; // c2c_read_report
    PbBindUinMsgReadedConfirmReq bind_uin_read_report = 4; // bind_uin_read_report
  }
  // PbMsgReadedReportResp is the message type for the PbMsgReadedReportResp.
  message PbMsgReadedReportResp {
    repeated PbGroupReadedReportResp grp_read_report   = 1; // grp_read_report
    repeated PbDiscussReadedReportResp dis_read_report = 2; // dis_read_report
    PbC2CReadedReportResp c2c_read_report              = 3; // c2c_read_report
    PbBindUinMsgReadedConfirmResp bind_uin_read_report = 4; // bind_uin_read_report
  }
  // PbMsgWithDrawReq is the message type for the PbMsgWithDrawReq.
  message PbMsgWithDrawReq {
    repeated PbC2CMsgWithDrawReq c2c_with_draw     = 1; // c2c_with_draw
    repeated PbGroupMsgWithDrawReq group_with_draw = 2; // group_with_draw
  }
  // PbMsgWithDrawResp is the message type for the PbMsgWithDrawResp.
  message PbMsgWithDrawResp {
    repeated PbC2CMsgWithDrawResp c2c_with_draw     = 1; // c2c_with_draw
    repeated PbGroupMsgWithDrawResp group_with_draw = 2; // group_with_draw
  }
  // PbPullDiscussMsgSeqReq is the message type for the PbPullDiscussMsgSeqReq.
  message PbPullDiscussMsgSeqReq {
    repeated DiscussInfoReq discuss_info_req = 1; // discuss_info_req
    // DiscussInfoReq is the message type for the DiscussInfoReq.
    message DiscussInfoReq {
      uint64 conf_uin = 1; // conf_uin
      uint64 last_seq = 2; // last_seq
    }
  }
  // PbPullDiscussMsgSeqResp is the message type for the PbPullDiscussMsgSeqResp.
  message PbPullDiscussMsgSeqResp {
    uint32 result                              = 1; // result
    string errmsg                              = 2; // errmsg
    repeated DiscussInfoResp discuss_info_resp = 3; // discuss_info_resp
    // DiscussInfoResp is the message type for the DiscussInfoResp.
    message DiscussInfoResp {
      uint64 conf_uin   = 1; // conf_uin
      uint64 member_seq = 2; // member_seq
      uint64 conf_seq   = 3; // conf_seq
    }
  }
  // PbPullGroupMsgSeqReq is the message type for the PbPullGroupMsgSeqReq.
  message PbPullGroupMsgSeqReq {
    repeated GroupInfoReq group_info_req = 1; // group_info_req
    // GroupInfoReq is the message type for the GroupInfoReq.
    message GroupInfoReq {
      uint64 group_code = 1; // group_code
      uint64 last_seq   = 2; // last_seq
    }
  }
  // PbPullGroupMsgSeqResp is the message type for the PbPullGroupMsgSeqResp.
  message PbPullGroupMsgSeqResp {
    uint32 result                          = 1; // result
    string errmsg                          = 2; // errmsg
    repeated GroupInfoResp group_info_resp = 3; // group_info_resp
    // GroupInfoResp is the message type for the GroupInfoResp.
    message GroupInfoResp {
      uint64 group_code = 1; // group_code
      uint64 member_seq = 2; // member_seq
      uint64 group_seq  = 3; // group_seq
    }
  }
  // PbSearchRoamMsgInCloudReq is the message type for the PbSearchRoamMsgInCloudReq.
  message PbSearchRoamMsgInCloudReq {
    bytes serialize_reqbody = 1; // serialize_reqbody
  }
  // PbSearchRoamMsgInCloudResp is the message type for the PbSearchRoamMsgInCloudResp.
  message PbSearchRoamMsgInCloudResp {
    bytes serialize_rspbody = 2; // serialize_rspbody
  }
  // PbSendMsgReq is the message type for the PbSendMsgReq.
  message PbSendMsgReq {
    RoutingHead routing_head            = 1; // routing_head
    MsgCommon.ContentHead content_head   = 2; // content_head
    IMMsgBody.MsgBody msg_body        = 3; // msg_body
    uint32 msg_seq                      = 4; // msg_seq
    uint32 msg_rand                     = 5; // msg_rand
    bytes sync_cookie                   = 6; // sync_cookie
    MsgCommon.AppShareInfo app_share     = 7; // app_share
    uint32 msg_via                      = 8; // msg_via
    uint32 data_statist                 = 9; // data_statist
    MultiMsgAssist multi_msg_assist     = 10; // multi_msg_assist
    PbInputNotifyInfo input_notify_info = 11; // input_notify_info
    MsgControl.MsgCtrl msg_ctrl           = 12; // msg_ctrl
    IMReceipt.ReceiptReq receipt_req   = 13; // receipt_req
    uint32 multi_send_seq               = 14; // multi_send_seq
  }
  // PbSendMsgResp is the message type for the PbSendMsgResp.
  message PbSendMsgResp {
    uint32 result                       = 1; // result
    string errmsg                       = 2; // errmsg
    uint32 send_time                    = 3; // send_time
    uint32 svrbusy_wait_time            = 4; // uint32_svrbusy_wait_time
    MsgSendInfo msg_send_info           = 5; // msg_send_info
    uint32 errtype                      = 6; // errtype
    TransSvrInfo trans_svr_info         = 7; // trans_svr_info
    IMReceipt.ReceiptResp receipt_resp = 8; // receipt_resp
    uint32 text_analysis_result         = 9; // text_analysis_result
    uint32 msg_info_flag                = 10; // uint32_msg_info_flag
    bytes msgeleminfo_servtype37        = 13; // msgeleminfo_servtype37
  }
  // PbThirdQQUnReadMsgNumReq is the message type for the PbThirdQQUnReadMsgNumReq.
  message PbThirdQQUnReadMsgNumReq {
    repeated ThirdQQReqInfo thirdqq_req_info = 1; // thirdqq_req_info
    uint32 source                            = 2; // source
    // ThirdQQReqInfo is the message type for the ThirdQQReqInfo.
    message ThirdQQReqInfo {
      uint64 third_uin       = 1; // third_uin
      bytes third_uin_sig    = 2; // third_uin_sig
      bytes third_uin_cookie = 3; // third_uin_cookie
    }
  }
  // PbThirdQQUnReadMsgNumResp is the message type for the PbThirdQQUnReadMsgNumResp.
  message PbThirdQQUnReadMsgNumResp {
    uint32 result                              = 1; // result
    string errmsg                              = 2; // errmsg
    repeated ThirdQQRespInfo thirdqq_resp_info = 3; // thirdqq_resp_info
    uint32 interval                            = 4; // interval
    // ThirdQQRespInfo is the message type for the ThirdQQRespInfo.
    message ThirdQQRespInfo {
      uint64 third_uin       = 1; // third_uin
      bytes third_uin_cookie = 2; // third_uin_cookie
      uint32 msg_num         = 3; // msg_num
      uint32 msg_flag        = 4; // msg_flag
      uint32 redbag_time     = 5; // redbag_time
      uint32 status          = 6; // status
      uint32 last_msg_time   = 7; // last_msg_time
    }
  }
  // PbUnReadMsgSeqReq is the message type for the PbUnReadMsgSeqReq.
  message PbUnReadMsgSeqReq {
    PbC2CUnReadMsgNumReq c2c_unread_info                  = 1; // c2c_unread_info
    repeated PbBindUinUnReadMsgNumReq binduin_unread_info = 2; // binduin_unread_info
    PbPullGroupMsgSeqReq group_unread_info                = 3; // group_unread_info
    PbPullDiscussMsgSeqReq discuss_unread_info            = 4; // discuss_unread_info
    PbThirdQQUnReadMsgNumReq thirdqq_unread_info          = 5; // thirdqq_unread_info
  }
  // PbUnReadMsgSeqResp is the message type for the PbUnReadMsgSeqResp.
  message PbUnReadMsgSeqResp {
    PbC2CUnReadMsgNumResp c2c_unread_info                  = 1; // c2c_unread_info
    repeated PbBindUinUnReadMsgNumResp binduin_unread_info = 2; // binduin_unread_info
    PbPullGroupMsgSeqResp group_unread_info                = 3; // group_unread_info
    PbPullDiscussMsgSeqResp discuss_unread_info            = 4; // discuss_unread_info
    PbThirdQQUnReadMsgNumResp thirdqq_unread_info          = 5; // thirdqq_unread_info
  }
  // PubGroupTmp is the message type for the PubGroupTmp.
  message PubGroupTmp {
    uint64 to_uin    = 1; // to_uin
    bytes sig        = 2; // sig
    uint64 group_uin = 3; // group_uin
  }
  // PublicPlat is the message type for the PublicPlat.
  message PublicPlat {
    uint64 to_uin = 1; // to_uin
    bytes sig     = 2; // sig
  }
  // QQQueryBusinessTmp is the message type for the QQQueryBusinessTmp.
  message QQQueryBusinessTmp {
    uint64 to_uin = 1; // to_uin
    bytes sig     = 2; // sig
  }
  // RichStatusTmp is the message type for the RichStatusTmp.
  message RichStatusTmp {
    uint64 to_uin = 1; // to_uin
    bytes sig     = 2; // sig
  }
  // RoutingHead is the message type for the RoutingHead.
  message RoutingHead {
    C2C c2c                                 = 1; // c2c
    Grp grp                                 = 2; // grp
    GrpTmp grp_tmp                          = 3; // grp_tmp
    Dis dis                                 = 4; // dis
    DisTmp dis_tmp                          = 5; // dis_tmp
    WPATmp wpa_tmp                          = 6; // wpa_tmp
    SecretFileHead secret_file              = 7; // secret_file
    PublicPlat public_plat                  = 8; // public_plat
    TransMsg trans_msg                      = 9; // trans_msg
    AddressListTmp address_list             = 10; // address_list
    RichStatusTmp rich_status_tmp           = 11; // rich_status_tmp
    TransCmd trans_cmd                      = 12; // trans_cmd
    AccostTmp accost_tmp                    = 13; // accost_tmp
    PubGroupTmp pub_group_tmp               = 14; // pub_group_tmp
    Trans0x211 trans_0x211                  = 15; // trans_0x211
    BusinessWPATmp business_wpa_tmp         = 16; // business_wpa_tmp
    AuthTmp auth_tmp                        = 17; // auth_tmp
    BsnsTmp bsns_tmp                        = 18; // bsns_tmp
    QQQueryBusinessTmp qq_querybusiness_tmp = 19; // qq_querybusiness_tmp
    NearByDatingTmp nearby_dating_tmp       = 20; // nearby_dating_tmp
    NearByAssistantTmp nearby_assistant_tmp = 21; // nearby_assistant_tmp
    CommTmp comm_tmp                        = 22; // comm_tmp
  }
  // SecretFileHead is the message type for the SecretFileHead.
  message SecretFileHead {
    SubMsgType0xc1.MsgBody secret_file_msg    = 1; // secret_file_msg
    SubMsgType0x1a.MsgBody secret_file_status = 2; // secret_file_status
  }
  // Trans0x211 is the message type for the Trans0x211.
  message Trans0x211 {
    uint64 to_uin                  = 1; // to_uin
    uint32 cc_cmd                  = 2; // cc_cmd
    IMMsgHead.InstCtrl inst_ctrl = 3; // inst_ctrl
    bytes sig                      = 4; // sig
    uint32 c2c_type                = 5; // c2c_type
    uint32 service_type            = 6; // service_type
    uint32 dataline_flag           = 7; // dataline_flag
  }
  // TransCmd is the message type for the TransCmd.
  message TransCmd {
    uint64 to_uin   = 1; // to_uin
    uint32 msg_type = 2; // msg_type
  }
  // TransMsg is the message type for the TransMsg.
  message TransMsg {
    uint64 to_uin  = 1; // to_uin
    uint32 c2c_cmd = 2; // c2c_cmd
  }
  // TransReq is the message type for the TransReq.
  message TransReq {
    int32 command  = 1; // command
    uint32 req_tag = 2; // req_tag
    bytes req_buff = 3; // req_buff
  }
  // TransResp is the message type for the TransResp.
  message TransResp {
    uint32 result   = 1; // result
    string errmsg   = 2; // errmsg
    uint32 resp_tag = 3; // resp_tag
    bytes resp_buff = 4; // resp_buff
  }
  // TransSvrInfo is the message type for the TransSvrInfo.
  message TransSvrInfo {
    uint32 sub_type  = 1; // uint32_sub_type
    int32 ret_code   = 2; // int32_ret_code
    bytes err_msg    = 3; // bytes_err_msg
    bytes trans_info = 4; // bytes_trans_info
  }
  // WPATmp is the message type for the WPATmp.
  message WPATmp {
    uint64 to_uin = 1; // to_uin
    bytes sig     = 2; // sig
  }
  // WithDrawWordingInfo is the message type for the WithDrawWordingInfo.
  message WithDrawWordingInfo {
    int32 item_id    = 1; // int32_item_id
    string item_name = 2; // string_item_name
  }
}
