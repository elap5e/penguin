syntax = "proto3";

option go_package = "github.com/elap5e/penguin/daemon/message/pb";

// Message generated by proto-message-gen. DO NOT EDIT.
// source: tencent.p1298im.msg.im_msg_body
//
// im_msg_body is the message type for the im_msg_body.
message IMMsgBody {
  // AnonymousGroupMsg is the message type for the AnonymousGroupMsg.
  message AnonymousGroupMsg {
    uint32 flags         = 1; // uint32_flags
    bytes anon_id        = 2; // str_anon_id
    bytes anon_nick      = 3; // str_anon_nick
    uint32 head_portrait = 4; // uint32_head_portrait
    uint32 expire_time   = 5; // uint32_expire_time
    uint32 bubble_id     = 6; // uint32_bubble_id
    bytes rank_color     = 7; // str_rank_color
  }
  // ApolloActMsg is the message type for the ApolloActMsg.
  message ApolloActMsg {
    uint32 action_id      = 1; // uint32_action_id
    bytes action_name     = 2; // bytes_action_name
    bytes action_text     = 3; // bytes_action_text
    uint32 flag           = 4; // uint32_flag
    uint32 peer_uin       = 5; // uint32_peer_uin
    uint32 sender_ts      = 6; // uint32_sender_ts
    uint32 peer_ts        = 7; // uint32_peer_ts
    int32 sender_status   = 8; // int32_sender_status
    int32 peer_status     = 9; // int32_peer_status
    uint32 diytext_id     = 10; // diytext_id
    bytes diytext_content = 11; // diytext_content
    bytes input_text      = 12; // input_text
    bytes pb_reserve      = 13; // bytes_pb_reserve
  }
  // ArkAppElem is the message type for the ArkAppElem.
  message ArkAppElem {
    string app_name     = 1; // app_name
    string min_version  = 2; // min_version
    string xml_template = 3; // xml_template
    bytes data          = 4; // bytes_data
  }
  // Attr is the message type for the Attr.
  message Attr {
    sint32 code_page        = 1; // code_page
    uint32 time             = 2; // time
    uint32 random           = 3; // random
    uint32 color            = 4; // color
    uint32 size             = 5; // size
    uint32 effect           = 6; // effect
    uint32 char_set         = 7; // char_set
    uint32 pitch_and_family = 8; // pitch_and_family
    string font_name        = 9; // font_name
    bytes reserve_data      = 10; // reserve_data
  }
  // BitAppMsg is the message type for the BitAppMsg.
  message BitAppMsg {
    bytes buf = 1; // bytes_buf
  }
  // BlessingMessage is the message type for the BlessingMessage.
  message BlessingMessage {
    uint32 msg_type = 1; // uint32_msg_type
    uint32 ex_flag  = 2; // uint32_ex_flag
  }
  // CommonElem is the message type for the CommonElem.
  message CommonElem {
    uint32 service_type  = 1; // uint32_service_type
    bytes pb_elem        = 2; // bytes_pb_elem
    uint32 business_type = 3; // uint32_business_type
  }
  // ConferenceTipsInfo is the message type for the ConferenceTipsInfo.
  message ConferenceTipsInfo {
    uint32 session_type = 1; // uint32_session_type
    uint64 session_uin  = 2; // uint64_session_uin
    string text         = 3; // str_text
  }
  // CrmElem is the message type for the CrmElem.
  message CrmElem {
    bytes crm_buf      = 1; // crm_buf
    bytes msg_resid    = 2; // bytes_msg_resid
    uint32 qidian_flag = 3; // uint32_qidian_flag
    uint32 push_flag   = 4; // uint32_push_flag
    uint32 count_flag  = 5; // uint32_count_flag
  }
  // CustomElem is the message type for the CustomElem.
  message CustomElem {
    bytes desc      = 1; // bytes_desc
    bytes data      = 2; // bytes_data
    int32 enum_type = 3; // enum_type
    bytes ext       = 4; // bytes_ext
    bytes sound     = 5; // bytes_sound
  }
  // CustomFace is the message type for the CustomFace.
  message CustomFace {
    bytes guid          = 1; // bytes_guid
    string file_path    = 2; // str_file_path
    string shortcut     = 3; // str_shortcut
    bytes buffer        = 4; // bytes_buffer
    bytes flag          = 5; // bytes_flag
    bytes old_data      = 6; // bytes_old_data
    uint32 file_id      = 7; // uint32_file_id
    uint32 server_ip    = 8; // uint32_server_ip
    uint32 server_port  = 9; // uint32_server_port
    uint32 file_type    = 10; // uint32_file_type
    bytes signature     = 11; // bytes_signature
    uint32 useful       = 12; // uint32_useful
    bytes md5           = 13; // bytes_md5
    string thumb_url    = 14; // str_thumb_url
    string big_url      = 15; // str_big_url
    string orig_url     = 16; // str_orig_url
    uint32 biz_type     = 17; // biz_type
    uint32 repeat_index = 18; // repeat_index
    uint32 repeat_image = 19; // repeat_image
    uint32 image_type   = 20; // image_type
    uint32 index        = 21; // index
    uint32 width        = 22; // uint32_width
    uint32 height       = 23; // uint32_height
    uint32 source       = 24; // uint32_source
    uint32 size         = 25; // uint32_size
    uint32 origin       = 26; // uint32_origin
    uint32 thumb_width  = 27; // uint32_thumb_width
    uint32 thumb_height = 28; // uint32_thumb_height
    uint32 show_len     = 29; // uint32_show_len
    uint32 download_len = 30; // uint32_download_len
    string url_400      = 31; // str_400_url
    uint32 width_400    = 32; // uint32_400_width
    uint32 height_400   = 33; // uint32_400_height
    bytes pb_reserve    = 34; // bytes_pb_reserve
  }
  // DeliverGiftMsg is the message type for the DeliverGiftMsg.
  message DeliverGiftMsg {
    bytes gray_tip_content        = 1; // bytes_gray_tip_content
    uint32 animation_package_id   = 2; // uint32_animation_package_id
    bytes animation_package_url_a = 3; // bytes_animation_package_url_a
    bytes animation_package_url_i = 4; // bytes_animation_package_url_i
    bytes remind_brief            = 5; // bytes_remind_brief
    uint32 gift_id                = 6; // uint32_gift_id
    uint32 gift_count             = 7; // uint32_gift_count
    bytes animation_brief         = 8; // bytes_animation_brief
    uint64 sender_uin             = 9; // uint64_sender_uin
    uint64 receiver_uin           = 10; // uint64_receiver_uin
    bytes stmessage_title         = 11; // bytes_stmessage_title
    bytes stmessage_subtitle      = 12; // bytes_stmessage_subtitle
    bytes stmessage_message       = 13; // bytes_stmessage_message
    uint32 stmessage_giftpicid    = 14; // uint32_stmessage_giftpicid
    bytes stmessage_comefrom      = 15; // bytes_stmessage_comefrom
    uint32 stmessage_exflag       = 16; // uint32_stmessage_exflag
    bytes to_all_gift_id          = 17; // bytes_to_all_gift_id
    bytes comefrom_link           = 18; // bytes_comefrom_link
    bytes pb_reserve              = 19; // bytes_pb_reserve
    bytes receiver_name           = 20; // bytes_receiver_name
    bytes receiver_pic            = 21; // bytes_receiver_pic
    bytes stmessage_gifturl       = 22; // bytes_stmessage_gifturl
  }
  // EIMInfo is the message type for the EIMInfo.
  message EIMInfo {
    uint64 root_id = 1; // uint64_root_id
    uint32 flag    = 2; // uint32_flag
  }
  // Elem is the message type for the Elem.
  message Elem {
    Text text                               = 1; // text
    Face face                               = 2; // face
    OnlineImage online_image                = 3; // online_image
    NotOnlineImage not_online_image         = 4; // not_online_image
    TransElem trans_elem_info               = 5; // trans_elem_info
    MarketFace market_face                  = 6; // market_face
    ElemFlags elem_flags                    = 7; // elem_flags
    CustomFace custom_face                  = 8; // custom_face
    ElemFlags2 elem_flags2                  = 9; // elem_flags2
    FunFace fun_face                        = 10; // fun_face
    SecretFileMsg secret_file               = 11; // secret_file
    RichMsg rich_msg                        = 12; // rich_msg
    GroupFile group_file                    = 13; // group_file
    PubGroup pub_group                      = 14; // pub_group
    MarketTrans market_trans                = 15; // market_trans
    ExtraInfo extra_info                    = 16; // extra_info
    ShakeWindow shake_window                = 17; // shake_window
    PubAccount pub_account                  = 18; // pub_account
    VideoFile video_file                    = 19; // video_file
    TipsInfo tips_info                      = 20; // tips_info
    AnonymousGroupMsg anon_group_msg        = 21; // anon_group_msg
    QQLiveOld qq_live_old                   = 22; // qq_live_old
    LifeOnlineAccount life_online           = 23; // life_online
    QQWalletMsg qqwallet_msg                = 24; // qqwallet_msg
    CrmElem crm_elem                        = 25; // crm_elem
    ConferenceTipsInfo conference_tips_info = 26; // conference_tips_info
    RedBagInfo redbag_info                  = 27; // redbag_info
    LowVersionTips low_version_tips         = 28; // low_version_tips
    bytes bankcode_ctrl_info                = 29; // bankcode_ctrl_info
    NearByMessageType near_by_msg           = 30; // near_by_msg
    CustomElem custom_elem                  = 31; // custom_elem
    LocationInfo location_info              = 32; // location_info
    PubAccInfo pub_acc_info                 = 33; // pub_acc_info
    SmallEmoji small_emoji                  = 34; // small_emoji
    FSJMessageElem fsj_msg_elem             = 35; // fsj_msg_elem
    ArkAppElem ark_app                      = 36; // ark_app
    GeneralFlags general_flags              = 37; // general_flags
    CustomFace hc_flash_pic                 = 38; // hc_flash_pic
    DeliverGiftMsg deliver_gift_msg         = 39; // deliver_gift_msg
    BitAppMsg bitapp_msg                    = 40; // bitapp_msg
    OpenQQData open_qq_data                 = 41; // open_qq_data
    ApolloActMsg apollo_msg                 = 42; // apollo_msg
    GroupPubAccountInfo group_pub_acc_info  = 43; // group_pub_acc_info
    BlessingMessage bless_msg               = 44; // bless_msg
    SourceMsg src_msg                       = 45; // src_msg
    LolaMsg lola_msg                        = 46; // lola_msg
    GroupBusinessMsg group_business_msg     = 47; // group_business_msg
    WorkflowNotifyMsg msg_workflow_notify   = 48; // msg_workflow_notify
    PatsElem pat_elem                       = 49; // pat_elem
    GroupPostElem group_post_elem           = 50; // group_post_elem
    LightAppElem light_app                  = 51; // light_app
    EIMInfo eim_info                        = 52; // eim_info
    CommonElem common_elem                  = 53; // common_elem
  }
  // ElemFlags is the message type for the ElemFlags.
  message ElemFlags {
    bytes flags1        = 1; // bytes_flags1
    bytes business_data = 2; // bytes_business_data
  }
  // ElemFlags2 is the message type for the ElemFlags2.
  message ElemFlags2 {
    uint32 color_text_id        = 1; // uint32_color_text_id
    uint64 msg_id               = 2; // uint64_msg_id
    uint32 whisper_session_id   = 3; // uint32_whisper_session_id
    uint32 ptt_change_bit       = 4; // uint32_ptt_change_bit
    uint32 vip_status           = 5; // uint32_vip_status
    uint32 compatible_id        = 6; // uint32_compatible_id
    repeated Inst insts         = 7; // rpt_insts
    uint32 msg_rpt_cnt          = 8; // uint32_msg_rpt_cnt
    Inst src_inst               = 9; // src_inst
    uint32 longtitude           = 10; // uint32_longtitude
    uint32 latitude             = 11; // uint32_latitude
    uint32 custom_font          = 12; // uint32_custom_font
    PcSupportDef pc_support_def = 13; // pc_support_def
    uint32 crm_flags            = 14; // uint32_crm_flags
    // Inst is the message type for the Inst.
    message Inst {
      uint32 app_id  = 1; // uint32_app_id
      uint32 inst_id = 2; // uint32_inst_id
    }
  }
  // ExtraInfo is the message type for the ExtraInfo.
  message ExtraInfo {
    bytes nick             = 1; // bytes_nick
    bytes group_card       = 2; // bytes_group_card
    uint32 level           = 3; // uint32_level
    uint32 flags           = 4; // uint32_flags
    uint32 group_mask      = 5; // uint32_group_mask
    uint32 msg_tail_id     = 6; // uint32_msg_tail_id
    bytes sender_title     = 7; // bytes_sender_title
    bytes apns_tips        = 8; // bytes_apns_tips
    uint64 uin             = 9; // uint64_uin
    uint32 msg_state_flag  = 10; // uint32_msg_state_flag
    uint32 apns_sound_type = 11; // uint32_apns_sound_type
    uint32 new_group_flag  = 12; // uint32_new_group_flag
  }
  // FSJMessageElem is the message type for the FSJMessageElem.
  message FSJMessageElem {
    uint32 msg_type = 1; // uint32_msg_type
  }
  // Face is the message type for the Face.
  message Face {
    uint32 index = 1; // index
    bytes old    = 2; // old
    bytes buf    = 11; // buf
  }
  // FunFace is the message type for the FunFace.
  message FunFace {
    Turntable msg_turntable = 1; // msg_turntable
    Bomb msg_bomb           = 2; // msg_bomb
    // Bomb is the message type for the Bomb.
    message Bomb {
      bool burst = 1; // bool_burst
    }
    // Turntable is the message type for the Turntable.
    message Turntable {
      repeated uint64 uin_list = 1; // rpt_uint64_uin_list
      uint64 hit_uin           = 2; // uint64_hit_uin
      string hit_uin_nick      = 3; // str_hit_uin_nick
    }
  }
  // GeneralFlags is the message type for the GeneralFlags.
  message GeneralFlags {
    uint32 bubble_diy_text_id    = 1; // uint32_bubble_diy_text_id
    uint32 group_flag_new        = 2; // uint32_group_flag_new
    uint64 uin                   = 3; // uint64_uin
    bytes rp_id                  = 4; // bytes_rp_id
    uint32 prp_fold              = 5; // uint32_prp_fold
    uint32 long_text_flag        = 6; // long_text_flag
    bytes long_text_resid        = 7; // long_text_resid
    uint32 group_type            = 8; // uint32_group_type
    uint32 to_uin_flag           = 9; // uint32_to_uin_flag
    uint32 glamour_level         = 10; // uint32_glamour_level
    uint32 member_level          = 11; // uint32_member_level
    uint64 group_rank_seq        = 12; // uint64_group_rank_seq
    uint32 olympic_torch         = 13; // uint32_olympic_torch
    bytes babyq_guide_msg_cookie = 14; // babyq_guide_msg_cookie
    uint32 uin32_expert_flag     = 15; // uin32_expert_flag
    uint32 bubble_sub_id         = 16; // uint32_bubble_sub_id
    uint64 pendant_id            = 17; // uint64_pendant_id
    bytes rp_index               = 18; // bytes_rp_index
    bytes pb_reserve             = 19; // bytes_pb_reserve
  }
  // GroupBusinessMsg is the message type for the GroupBusinessMsg.
  message GroupBusinessMsg {
    uint32 flags       = 1; // uint32_flags
    bytes head_url     = 2; // bytes_head_url
    bytes head_clk_url = 3; // bytes_head_clk_url
    bytes nick         = 4; // bytes_nick
    bytes nick_color   = 5; // bytes_nick_color
    bytes rank         = 6; // bytes_rank
    bytes rank_color   = 7; // bytes_rank_color
    bytes rank_bgcolor = 8; // bytes_rank_bgcolor
  }
  // GroupFile is the message type for the GroupFile.
  message GroupFile {
    bytes filename       = 1; // bytes_filename
    uint64 file_size     = 2; // uint64_file_size
    bytes file_id        = 3; // bytes_file_id
    bytes batch_id       = 4; // bytes_batch_id
    bytes file_key       = 5; // bytes_file_key
    bytes mark           = 6; // bytes_mark
    uint64 sequence      = 7; // uint64_sequence
    bytes batch_item_id  = 8; // bytes_batch_item_id
    uint32 feed_msg_time = 9; // uint32_feed_msg_time
    bytes pb_reserve     = 10; // bytes_pb_reserve
  }
  // GroupPostElem is the message type for the GroupPostElem.
  message GroupPostElem {
    uint32 trans_type = 1; // uint32_trans_type
    bytes trans_msg   = 2; // bytes_trans_msg
  }
  // GroupPubAccountInfo is the message type for the GroupPubAccountInfo.
  message GroupPubAccountInfo {
    uint64 pub_account = 1; // uint64_pub_account
  }
  // LifeOnlineAccount is the message type for the LifeOnlineAccount.
  message LifeOnlineAccount {
    uint64 unique_id   = 1; // uint64_unique_id
    uint32 op          = 2; // uint32_op
    uint32 show_time   = 3; // uint32_show_time
    uint32 report      = 4; // uint32_report
    uint32 ack         = 5; // uint32_ack
    uint64 bitmap      = 6; // uint64_bitmap
    bytes gdt_imp_data = 7; // gdt_imp_data
    bytes gdt_cli_data = 8; // gdt_cli_data
    bytes view_id      = 9; // view_id
  }
  // LightAppElem is the message type for the LightAppElem.
  message LightAppElem {
    bytes data      = 1; // bytes_data
    bytes msg_resid = 2; // bytes_msg_resid
  }
  // LolaMsg is the message type for the LolaMsg.
  message LolaMsg {
    bytes msg_resid      = 1; // bytes_msg_resid
    bytes encode_content = 2; // bytes_encode_content
    bytes long_msg_url   = 3; // bytes_long_msg_url
    bytes download_key   = 4; // bytes_download_key
  }
  // LowVersionTips is the message type for the LowVersionTips.
  message LowVersionTips {
    uint32 business_id  = 1; // uint32_business_id
    uint32 session_type = 2; // uint32_session_type
    uint64 session_uin  = 3; // uint64_session_uin
    uint64 sender_uin   = 4; // uint64_sender_uin
    string text         = 5; // str_text
  }
  // MarketFace is the message type for the MarketFace.
  message MarketFace {
    bytes face_name     = 1; // bytes_face_name
    uint32 item_type    = 2; // uint32_item_type
    uint32 face_info    = 3; // uint32_face_info
    bytes face_id       = 4; // bytes_face_id
    uint32 tab_id       = 5; // uint32_tab_id
    uint32 sub_type     = 6; // uint32_sub_type
    bytes key           = 7; // bytes_key
    bytes param         = 8; // bytes_param
    uint32 media_type   = 9; // uint32_media_type
    uint32 image_width  = 10; // uint32_image_width
    uint32 image_height = 11; // uint32_image_height
    bytes mobileparam   = 12; // bytes_mobileparam
    bytes pb_reserve    = 13; // bytes_pb_reserve
  }
  // MarketTrans is the message type for the MarketTrans.
  message MarketTrans {
    int32 flag         = 1; // int32_flag
    bytes xml          = 2; // bytes_xml
    bytes msg_resid    = 3; // bytes_msg_resid
    uint32 ability     = 4; // uint32_ability
    uint32 min_ability = 5; // uint32_min_ability
  }
  // MsgBody is the message type for the MsgBody.
  message MsgBody {
    RichText rich_text        = 1; // rich_text
    bytes msg_content         = 2; // msg_content
    bytes msg_encrypt_content = 3; // msg_encrypt_content
  }
  // MsgBody_subtype4 is the message type for the MsgBody_subtype4.
  message MsgBody_subtype4 {
    NotOnlineFile msg_not_online_file = 1; // msg_not_online_file
    uint32 msg_time                   = 2; // uint32_msg_time
  }
  // NearByMessageType is the message type for the NearByMessageType.
  message NearByMessageType {
    uint32 type          = 1; // uint32_type
    uint32 identify_type = 2; // uint32_identify_type
  }
  // NotOnlineFile is the message type for the NotOnlineFile.
  message NotOnlineFile {
    uint32 file_type         = 1; // uint32_file_type
    bytes sig                = 2; // bytes_sig
    bytes file_uuid          = 3; // bytes_file_uuid
    bytes file_md5           = 4; // bytes_file_md5
    bytes file_name          = 5; // bytes_file_name
    uint64 file_size         = 6; // uint64_file_size
    bytes note               = 7; // bytes_note
    uint32 reserved          = 8; // uint32_reserved
    uint32 subcmd            = 9; // uint32_subcmd
    uint32 micro_cloud       = 10; // uint32_micro_cloud
    repeated bytes file_urls = 11; // rpt_bytes_file_urls
    uint32 download_flag     = 12; // uint32_download_flag
    uint32 danger_evel       = 50; // uint32_danger_evel
    uint32 life_time         = 51; // uint32_life_time
    uint32 upload_time       = 52; // uint32_upload_time
    uint32 abs_file_type     = 53; // uint32_abs_file_type
    uint32 client_type       = 54; // uint32_client_type
    uint32 expire_time       = 55; // uint32_expire_time
    bytes pb_reserve         = 56; // bytes_pb_reserve
    string fileidcrc_media   = 57; // str_fileidcrc_media
  }
  // NotOnlineImage is the message type for the NotOnlineImage.
  message NotOnlineImage {
    bytes file_path         = 1; // file_path
    uint32 file_len         = 2; // file_len
    bytes download_path     = 3; // download_path
    bytes old_ver_send_file = 4; // old_ver_send_file
    uint32 img_type         = 5; // img_type
    bytes previews_image    = 6; // previews_image
    bytes pic_md5           = 7; // pic_md5
    uint32 pic_height       = 8; // pic_height
    uint32 pic_width        = 9; // pic_width
    bytes res_id            = 10; // res_id
    bytes flag              = 11; // flag
    string thumb_url        = 12; // str_thumb_url
    uint32 original         = 13; // original
    string big_url          = 14; // str_big_url
    string orig_url         = 15; // str_orig_url
    uint32 biz_type         = 16; // biz_type
    uint32 result           = 17; // result
    uint32 index            = 18; // index
    bytes op_face_buf       = 19; // op_face_buf
    bool old_pic_md5        = 20; // old_pic_md5
    uint32 thumb_width      = 21; // uint32_thumb_width
    uint32 thumb_height     = 22; // uint32_thumb_height
    uint32 file_id          = 23; // uint32_file_id
    uint32 show_len         = 24; // uint32_show_len
    uint32 download_len     = 25; // uint32_download_len
    string url_400          = 26; // str_400_url
    uint32 width_400        = 27; // uint32_400_width
    uint32 height_400       = 28; // uint32_400_height
    bytes pb_reserve        = 29; // bytes_pb_reserve
  }
  // OnlineImage is the message type for the OnlineImage.
  message OnlineImage {
    bytes guid              = 1; // guid
    bytes file_path         = 2; // file_path
    bytes old_ver_send_file = 3; // old_ver_send_file
  }
  // OpenQQData is the message type for the OpenQQData.
  message OpenQQData {
    bytes car_qq_data = 1; // bytes_car_qq_data
  }
  // PatsElem is the message type for the PatsElem.
  message PatsElem {
    uint32 pat_type  = 1; // uint32_pat_type
    uint32 pat_count = 2; // uint32_pat_count
  }
  // PcSupportDef is the message type for the PcSupportDef.
  message PcSupportDef {
    uint32 pc_ptl_begin              = 1; // uint32_pc_ptl_begin
    uint32 pc_ptl_end                = 2; // uint32_pc_ptl_end
    uint32 mac_ptl_begin             = 3; // uint32_mac_ptl_begin
    uint32 mac_ptl_end               = 4; // uint32_mac_ptl_end
    repeated uint32 ptls_support     = 5; // rpt_ptls_support
    repeated uint32 ptls_not_support = 6; // rpt_ptls_not_support
  }
  // Ptt is the message type for the Ptt.
  message Ptt {
    uint32 file_type        = 1; // uint32_file_type
    uint64 src_uin          = 2; // uint64_src_uin
    bytes file_uuid         = 3; // bytes_file_uuid
    bytes file_md5          = 4; // bytes_file_md5
    bytes file_name         = 5; // bytes_file_name
    uint32 file_size        = 6; // uint32_file_size
    bytes reserve           = 7; // bytes_reserve
    uint32 file_id          = 8; // uint32_file_id
    uint32 server_ip        = 9; // uint32_server_ip
    uint32 server_port      = 10; // uint32_server_port
    bool valid              = 11; // bool_valid
    bytes signature         = 12; // bytes_signature
    bytes shortcut          = 13; // bytes_shortcut
    bytes file_key          = 14; // bytes_file_key
    uint32 magic_ptt_index  = 15; // uint32_magic_ptt_index
    uint32 voice_switch     = 16; // uint32_voice_switch
    bytes ptt_url           = 17; // bytes_ptt_url
    bytes group_file_key    = 18; // bytes_group_file_key
    uint32 time             = 19; // uint32_time
    bytes down_para         = 20; // bytes_down_para
    uint32 format           = 29; // uint32_format
    bytes pb_reserve        = 30; // bytes_pb_reserve
    repeated bytes ptt_urls = 31; // rpt_bytes_ptt_urls
    uint32 download_flag    = 32; // uint32_download_flag
  }
  // PubAccInfo is the message type for the PubAccInfo.
  message PubAccInfo {
    uint32 is_inter_num    = 1; // uint32_is_inter_num
    string msg_template_id = 2; // string_msg_template_id
    string long_msg_url    = 3; // string_long_msg_url
    bytes download_key     = 4; // bytes_download_key
  }
  // PubAccount is the message type for the PubAccount.
  message PubAccount {
    bytes buf              = 1; // bytes_buf
    uint64 pub_account_uin = 2; // uint64_pub_account_uin
  }
  // PubGroup is the message type for the PubGroup.
  message PubGroup {
    bytes nickname  = 1; // bytes_nickname
    uint32 gender   = 2; // uint32_gender
    uint32 age      = 3; // uint32_age
    uint32 distance = 4; // uint32_distance
  }
  // QQLiveOld is the message type for the QQLiveOld.
  message QQLiveOld {
    uint32 sub_cmd  = 1; // uint32_sub_cmd
    bytes show_text = 2; // str_show_text
    bytes param     = 3; // str_param
    bytes introduce = 4; // str_introduce
  }
  // QQWalletAioBody is the message type for the QQWalletAioBody.
  message QQWalletAioBody {
    uint64 senduin           = 1; // uint64_senduin
    QQWalletAioElem sender   = 2; // sender
    QQWalletAioElem receiver = 3; // receiver
    sint32 channelid         = 4; // sint32_channelid
    sint32 templateid        = 5; // sint32_templateid
    uint32 resend            = 6; // uint32_resend
    uint32 msg_priority      = 7; // uint32_msg_priority
    sint32 redtype           = 8; // sint32_redtype
    bytes billno             = 9; // bytes_billno
    bytes authkey            = 10; // bytes_authkey
    sint32 sessiontype       = 11; // sint32_sessiontype
    sint32 msgtype           = 12; // sint32_msgtype
    sint32 envelopeid        = 13; // sint32_envelopeid
    bytes name               = 14; // bytes_name
    sint32 conftype          = 15; // sint32_conftype
    sint32 msg_from          = 16; // sint32_msg_from
    bytes pc_body            = 17; // bytes_pc_body
    bytes index              = 18; // string_index
    uint32 redchannel        = 19; // uint32_redchannel
    repeated uint64 grap_uin = 20; // uint64_grap_uin
    bytes pb_reserve         = 21; // bytes_pb_reserve
  }
  // QQWalletAioElem is the message type for the QQWalletAioElem.
  message QQWalletAioElem {
    uint32 background      = 1; // uint32_background
    uint32 icon            = 2; // uint32_icon
    bytes title            = 3; // bytes_title
    bytes subtitle         = 4; // bytes_subtitle
    bytes content          = 5; // bytes_content
    bytes linkurl          = 6; // bytes_linkurl
    bytes blackstripe      = 7; // bytes_blackstripe
    bytes notice           = 8; // bytes_notice
    uint32 title_color     = 9; // uint32_title_color
    uint32 subtitle_color  = 10; // uint32_subtitle_color
    bytes actions_priority = 11; // bytes_actions_priority
    bytes jump_url         = 12; // bytes_jump_url
    bytes native_ios       = 13; // bytes_native_ios
    bytes native_android   = 14; // bytes_native_android
    bytes iconurl          = 15; // bytes_iconurl
    uint32 content_color   = 16; // uint32_content_color
    uint32 content_bgcolor = 17; // uint32_content_bgcolor
    bytes aio_image_left   = 18; // bytes_aio_image_left
    bytes aio_image_right  = 19; // bytes_aio_image_right
    bytes cft_image        = 20; // bytes_cft_image
    bytes pb_reserve       = 21; // bytes_pb_reserve
  }
  // QQWalletMsg is the message type for the QQWalletMsg.
  message QQWalletMsg {
    QQWalletAioBody aio_body = 1; // aio_body
  }
  // RedBagInfo is the message type for the RedBagInfo.
  message RedBagInfo {
    uint32 redbag_type = 1; // redbag_type
  }
  // RichMsg is the message type for the RichMsg.
  message RichMsg {
    bytes template_1  = 1; // bytes_template_1
    uint32 service_id = 2; // uint32_service_id
    bytes msg_resid   = 3; // bytes_msg_resid
    uint32 rand       = 4; // uint32_rand
    uint32 seq        = 5; // uint32_seq
    uint32 flags      = 6; // uint32_flags
  }
  // RichText is the message type for the RichText.
  message RichText {
    Attr attr                        = 1; // attr
    repeated Elem elems              = 2; // elems
    NotOnlineFile not_online_file    = 3; // not_online_file
    Ptt ptt                          = 4; // ptt
    TmpPtt tmp_ptt                   = 5; // tmp_ptt
    Trans211TmpMsg trans_211_tmp_msg = 6; // trans_211_tmp_msg
  }
  // SecretFileMsg is the message type for the SecretFileMsg.
  message SecretFileMsg {
    bytes file_key                  = 1; // bytes_file_key
    uint64 from_uin                 = 2; // uint64_from_uin
    uint64 to_uin                   = 3; // uint64_to_uin
    uint32 status                   = 4; // uint32_status
    uint32 ttl                      = 5; // uint32_ttl
    uint32 type                     = 6; // uint32_type
    uint32 encrypt_prehead_length   = 7; // uint32_encrypt_prehead_length
    uint32 encrypt_type             = 8; // uint32_encrypt_type
    bytes encrypt_key               = 9; // bytes_encrypt_key
    uint32 read_times               = 10; // uint32_read_times
    uint32 left_time                = 11; // uint32_left_time
    NotOnlineImage not_online_image = 12; // not_online_image
    ElemFlags2 elem_flags2          = 13; // elem_flags2
    uint32 opertype                 = 14; // uint32_opertype
    string fromphonenum             = 15; // str_fromphonenum
  }
  // ShakeWindow is the message type for the ShakeWindow.
  message ShakeWindow {
    uint32 type    = 1; // uint32_type
    uint32 reserve = 2; // uint32_reserve
    uint64 uin     = 3; // uint64_uin
  }
  // SmallEmoji is the message type for the SmallEmoji.
  message SmallEmoji {
    uint32 packIdSum = 1; // packIdSum
    uint32 imageType = 2; // imageType
  }
  // SourceMsg is the message type for the SourceMsg.
  message SourceMsg {
    repeated uint32 orig_seqs = 1; // uint32_orig_seqs
    uint64 sender_uin         = 2; // uint64_sender_uin
    uint32 time               = 3; // uint32_time
    uint32 flag               = 4; // uint32_flag
    repeated Elem elems       = 5; // elems
    uint32 type               = 6; // uint32_type
    bytes richMsg             = 7; // bytes_richMsg
    bytes pb_reserve          = 8; // bytes_pb_reserve
    bytes src_msg             = 9; // bytes_src_msg
    uint64 to_uin             = 10; // uint64_to_uin
    bytes troop_name          = 11; // bytes_troop_name
  }
  // Text is the message type for the Text.
  message Text {
    bytes str        = 1; // str
    string link      = 2; // link
    bytes attr_6_buf = 3; // attr_6_buf
    bytes attr_7_buf = 4; // attr_7_buf
    bytes buf        = 11; // buf
    bytes pb_reserve = 12; // bytes_pb_reserve
  }
  // TipsInfo is the message type for the TipsInfo.
  message TipsInfo {
    string text = 1; // text
  }
  // TmpPtt is the message type for the TmpPtt.
  message TmpPtt {
    uint32 file_type      = 1; // uint32_file_type
    bytes file_uuid       = 2; // bytes_file_uuid
    bytes file_md5        = 3; // bytes_file_md5
    bytes file_name       = 4; // bytes_file_name
    uint32 file_size      = 5; // uint32_file_size
    uint32 ptt_times      = 6; // uint64_ptt_times
    uint32 user_type      = 7; // uint32_user_type
    uint32 ptttrans_flag  = 8; // uint32_ptttrans_flag
    uint32 busi_type      = 9; // uint32_busi_type
    uint64 msg_id         = 10; // uint64_msg_id
    bytes pb_reserve      = 30; // bytes_pb_reserve
    bytes ptt_encode_data = 31; // ptt_encode_data
  }
  // Trans211TmpMsg is the message type for the Trans211TmpMsg.
  message Trans211TmpMsg {
    bytes msg_body = 1; // bytes_msg_body
    uint32 c2c_cmd = 2; // uint32_c2c_cmd
  }
  // TransElem is the message type for the TransElem.
  message TransElem {
    uint32 elem_type = 1; // elem_type
    bytes elem_value = 2; // elem_value
  }
  // VideoFile is the message type for the VideoFile.
  message VideoFile {
    bytes file_uuid                = 1; // bytes_file_uuid
    bytes file_md5                 = 2; // bytes_file_md5
    bytes file_name                = 3; // bytes_file_name
    uint32 file_format             = 4; // uint32_file_format
    uint32 file_time               = 5; // uint32_file_time
    uint32 file_size               = 6; // uint32_file_size
    uint32 thumb_width             = 7; // uint32_thumb_width
    uint32 thumb_height            = 8; // uint32_thumb_height
    bytes thumb_file_md5           = 9; // bytes_thumb_file_md5
    bytes source                   = 10; // bytes_source
    uint32 thumb_file_size         = 11; // uint32_thumb_file_size
    uint32 busi_type               = 12; // uint32_busi_type
    uint32 from_chat_type          = 13; // uint32_from_chat_type
    uint32 to_chat_type            = 14; // uint32_to_chat_type
    bool support_progressive       = 15; // bool_support_progressive
    uint32 file_width              = 16; // uint32_file_width
    uint32 file_height             = 17; // uint32_file_height
    uint32 sub_busi_type           = 18; // uint32_sub_busi_type
    uint32 video_attr              = 19; // uint32_video_attr
    repeated bytes thumb_file_urls = 20; // rpt_bytes_thumb_file_urls
    repeated bytes video_file_urls = 21; // rpt_bytes_video_file_urls
    uint32 thumb_download_flag     = 22; // uint32_thumb_download_flag
    uint32 video_download_flag     = 23; // uint32_video_download_flag
    bytes pb_reserve               = 24; // bytes_pb_reserve
  }
  // WorkflowNotifyMsg is the message type for the WorkflowNotifyMsg.
  message WorkflowNotifyMsg {
    bytes ext_msg     = 1; // bytes_ext_msg
    uint64 create_uin = 2; // uint64_create_uin
  }
  // LocationInfo is the message type for the LocationInfo.
  message LocationInfo {
    double longitude = 1; // double_longitude
    double latitude  = 2; // double_latitude
    bytes desc                     = 3; // bytes_desc
  }
}
