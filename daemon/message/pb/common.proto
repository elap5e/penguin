syntax = "proto3";

import "daemon/message/pb/body.proto";
import "daemon/message/pb/head.proto";

option go_package = "github.com/elap5e/penguin/daemon/message/pb";

// Message generated by proto-message-gen. DO NOT EDIT.
// source: msf.msgcomm.msg_comm
//
// msg_comm is the message type for the msg_comm.
message MsgCommon {
  // AppShareInfo is the message type for the AppShareInfo.
  message AppShareInfo {
    uint32 appshare_id           = 1; // appshare_id
    bytes appshare_cookie        = 2; // appshare_cookie
    PluginInfo appshare_resource = 3; // appshare_resource
  }
  // C2CTmpMsgHead is the message type for the C2CTmpMsgHead.
  message C2CTmpMsgHead {
    uint32 c2c_type            = 1; // c2c_type
    uint32 service_type        = 2; // service_type
    uint64 group_uin           = 3; // group_uin
    uint64 group_code          = 4; // group_code
    bytes sig                  = 5; // sig
    uint32 sig_type            = 6; // sig_type
    string from_phone          = 7; // from_phone
    string to_phone            = 8; // to_phone
    uint32 lock_display        = 9; // lock_display
    uint32 direction_flag      = 10; // direction_flag
    bytes reserved             = 11; // reserved
    bytes business_name        = 14; // business_name
    bytes business_sub_content = 15; // business_sub_content
  }
  // ContentHead is the message type for the ContentHead.
  message ContentHead {
    uint32 pkg_num    = 1; // pkg_num
    uint32 pkg_index  = 2; // pkg_index
    uint32 div_seq    = 3; // div_seq
    uint32 auto_reply = 4; // auto_reply
  }
  // DiscussInfo is the message type for the DiscussInfo.
  message DiscussInfo {
    uint64 discuss_uin      = 1; // discuss_uin
    uint32 discuss_type     = 2; // discuss_type
    uint64 discuss_info_seq = 3; // discuss_info_seq
    bytes discuss_remark    = 4; // discuss_remark
    bytes discuss_name      = 5; // discuss_name
  }
  // ExtGroupKeyInfo is the message type for the ExtGroupKeyInfo.
  message ExtGroupKeyInfo {
    uint32 cur_max_seq        = 1; // cur_max_seq
    uint64 cur_time           = 2; // cur_time
    uint32 operate_by_parents = 3; // operate_by_parents
    bytes ext_group_info      = 4; // bytes_ext_group_info
  }
  // GroupInfo is the message type for the GroupInfo.
  message GroupInfo {
    uint64 group_code      = 1; // group_code
    uint32 group_type      = 2; // group_type
    uint64 group_info_seq  = 3; // group_info_seq
    bytes group_card       = 4; // group_card
    bytes group_rank       = 5; // group_rank
    uint32 group_level     = 6; // group_level
    uint32 group_card_type = 7; // group_card_type
    bytes group_name       = 8; // group_name
  }
  // Msg is the message type for the Msg.
  message Msg {
    MsgHead msg_head           = 1; // msg_head
    ContentHead content_head   = 2; // content_head
    IMMsgBody.MsgBody msg_body = 3; // msg_body
    AppShareInfo appshare_info = 4; // appshare_info
  }
  // MsgHead is the message type for the MsgHead.
  message MsgHead {
    uint64 from_uin                       = 1; // from_uin
    uint64 to_uin                         = 2; // to_uin
    uint32 msg_type                       = 3; // msg_type
    uint32 c2c_cmd                        = 4; // c2c_cmd
    uint32 msg_seq                        = 5; // msg_seq
    uint32 msg_time                       = 6; // msg_time
    uint64 msg_uid                        = 7; // msg_uid
    C2CTmpMsgHead c2c_tmp_msg_head        = 8; // c2c_tmp_msg_head
    GroupInfo group_info                  = 9; // group_info
    uint32 from_appid                     = 10; // from_appid
    uint32 from_instid                    = 11; // from_instid
    uint32 user_active                    = 12; // user_active
    DiscussInfo discuss_info              = 13; // discuss_info
    string from_nick                      = 14; // from_nick
    uint64 auth_uin                       = 15; // auth_uin
    string auth_nick                      = 16; // auth_nick
    uint32 msg_flag                       = 17; // msg_flag
    string auth_remark                    = 18; // auth_remark
    string group_name                     = 19; // group_name
    MutilTransHead mutiltrans_head        = 20; // mutiltrans_head
    IMMsgHead.InstCtrl msg_inst_ctrl      = 21; // msg_inst_ctrl
    uint32 public_account_group_send_flag = 22; // public_account_group_send_flag
    uint32 wseq_in_c2c_msghead            = 23; // wseq_in_c2c_msghead
    uint64 cpid                           = 24; // cpid
    ExtGroupKeyInfo ext_group_key_info    = 25; // ext_group_key_info
    string multi_compatible_text          = 26; // multi_compatible_text
    uint32 auth_sex                       = 27; // auth_sex
    bool is_src_msg                       = 28; // is_src_msg
  }
  // MsgType0x210 is the message type for the MsgType0x210.
  message MsgType0x210 {
    uint32 sub_msg_type = 1; // sub_msg_type
    bytes msg_content   = 2; // msg_content
  }
  // MutilTransHead is the message type for the MutilTransHead.
  message MutilTransHead {
    uint32 status = 1; // status
    uint32 msgId  = 2; // msgId
  }
  // PluginInfo is the message type for the PluginInfo.
  message PluginInfo {
    uint32 res_id        = 1; // res_id
    string pkg_name      = 2; // pkg_name
    uint32 new_ver       = 3; // new_ver
    uint32 res_type      = 4; // res_type
    uint32 lan_type      = 5; // lan_type
    uint32 priority      = 6; // priority
    string res_name      = 7; // res_name
    string res_desc      = 8; // res_desc
    string res_url_big   = 9; // res_url_big
    string res_url_small = 10; // res_url_small
    string res_conf      = 11; // res_conf
  }
  // Uin2Nick is the message type for the Uin2Nick.
  message Uin2Nick {
    uint64 uin  = 1; // uint64_uin
    string nick = 2; // str_nick
  }
  // UinPairMsg is the message type for the UinPairMsg.
  message UinPairMsg {
    uint32 last_read_time = 1; // last_read_time
    uint64 peer_uin       = 2; // peer_uin
    uint32 msg_completed  = 3; // msg_completed
    uint32 unread_msg_num = 5; // unread_msg_num
    uint32 c2c_type       = 8; // c2c_type
    uint32 service_type   = 9; // service_type
    bytes pb_reserve      = 10; // bytes_pb_reserve
    uint64 to_tiny_id     = 11; // uint64_to_tiny_id
  }
}
