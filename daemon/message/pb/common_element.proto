syntax = "proto3";

import "daemon/message/pb/body.proto";

option go_package = "github.com/elap5e/penguin/daemon/message/pb";

// Message generated by proto-message-gen. DO NOT EDIT.
// source: tencent.p1298im.msg.hummer.servtype.hummer_commelem
//
// hummer_commelem is the message type for the hummer_commelem.
message HummerCommonElement {
  // MsgElemInfo_servtype1 is the message type for the MsgElemInfo_servtype1.
  message MsgElemInfo_servtype1 {
    bytes reward_id         = 1; // bytes_reward_id
    uint64 sender_uin       = 2; // uint64_sender_uin
    uint32 pic_type         = 3; // uint32_pic_type
    uint32 reward_type_ext  = 12; // uint32_reward_type_ext
    uint32 reward_money     = 4; // uint32_reward_money
    bytes url               = 5; // bytes_url
    bytes content           = 6; // bytes_content
    uint32 create_timestamp = 7; // uint32_create_timestamp
    uint32 status           = 8; // uint32_status
    uint32 size             = 9; // uint32_size
    uint32 video_duration   = 10; // uint32_video_duration
    uint64 seq              = 11; // uint64_seq
  }
  // MsgElemInfo_servtype11 is the message type for the MsgElemInfo_servtype11.
  message MsgElemInfo_servtype11 {
    bytes resID              = 1; // bytes_resID
    bytes resMD5             = 2; // bytes_resMD5
    bytes reserve_Info1      = 3; // reserve_Info1
    bytes reserve_Info2      = 4; // reserve_Info2
    uint32 doodleData_offset = 5; // uint32_doodleData_offset
    uint32 doodle_gif_id     = 6; // uint32_doodle_gif_id
    bytes Doodle_url         = 7; // bytes_Doodle_url
    bytes Doodle_md5         = 8; // bytes_Doodle_md5
  }
  // MsgElemInfo_servtype13 is the message type for the MsgElemInfo_servtype13.
  message MsgElemInfo_servtype13 {
    uint32 sys_head_id = 1; // uint32_sys_head_id
    uint32 head_flag   = 2; // uint32_head_flag
  }
  // MsgElemInfo_servtype14 is the message type for the MsgElemInfo_servtype14.
  message MsgElemInfo_servtype14 {
    uint32 id          = 1; // uint32_id
    bytes reserve_Info = 2; // reserve_Info
  }
  // MsgElemInfo_servtype15 is the message type for the MsgElemInfo_servtype15.
  message MsgElemInfo_servtype15 {
    bytes vid             = 1; // vid
    bytes cover           = 2; // cover
    bytes title           = 3; // title
    bytes summary         = 4; // summary
    uint64 createTime     = 5; // createTime
    bytes comment_content = 6; // comment_content
    uint64 author         = 7; // author
    uint32 ctr_version    = 8; // ctr_version
  }
  // MsgElemInfo_servtype16 is the message type for the MsgElemInfo_servtype16.
  message MsgElemInfo_servtype16 {
    uint64 uid             = 1; // uid
    bytes unionID          = 2; // unionID
    bytes storyID          = 3; // storyID
    bytes md5              = 4; // md5
    bytes thumbUrl         = 5; // thumbUrl
    bytes doodleUrl        = 6; // doodleUrl
    uint32 videoWidth      = 7; // videoWidth
    uint32 videoHeight     = 8; // videoHeight
    bytes sourceName       = 9; // sourceName
    bytes sourceActionType = 10; // sourceActionType
    bytes sourceActionData = 11; // sourceActionData
    uint32 ctr_version     = 12; // ctr_version
  }
  // MsgElemInfo_servtype18 is the message type for the MsgElemInfo_servtype18.
  message MsgElemInfo_servtype18 {
    uint64 current_amount = 1; // uint64_current_amount
    uint64 total_amount   = 2; // uint64_total_amount
    bytes listid          = 3; // bytes_listid
    bytes auth_key        = 4; // bytes_auth_key
    uint32 number         = 5; // uint32_number
  }
  // MsgElemInfo_servtype19 is the message type for the MsgElemInfo_servtype19.
  message MsgElemInfo_servtype19 {
    bytes data = 1; // bytes_data
  }
  // MsgElemInfo_servtype2 is the message type for the MsgElemInfo_servtype2.
  message MsgElemInfo_servtype2 {
    uint32 poke_type         = 1; // uint32_poke_type
    bytes poke_summary       = 2; // bytes_poke_summary
    uint32 hit               = 3; // uint32_double_hit
    uint32 vaspoke_id        = 4; // uint32_vaspoke_id
    bytes vaspoke_name       = 5; // bytes_vaspoke_name
    bytes vaspoke_minver     = 6; // bytes_vaspoke_minver
    uint32 poke_strength     = 7; // uint32_poke_strength
    uint32 msg_type          = 8; // uint32_msg_type
    uint32 face_bubble_count = 9; // uint32_face_bubble_count
    uint32 poke_flag         = 10; // uint32_poke_flag
  }
  // MsgElemInfo_servtype20 is the message type for the MsgElemInfo_servtype20.
  message MsgElemInfo_servtype20 {
    bytes data = 1; // bytes_data
  }
  // MsgElemInfo_servtype21 is the message type for the MsgElemInfo_servtype21.
  message MsgElemInfo_servtype21 {
    uint32 topic_id                       = 1; // uint32_topic_id
    uint64 confessor_uin                  = 2; // uint64_confessor_uin
    bytes confessor_nick                  = 3; // bytes_confessor_nick
    uint32 confessor_sex                  = 4; // uint32_confessor_sex
    uint32 sysmsg_flag                    = 5; // uint32_sysmsg_flag
    bytes topic                           = 7; // bytes_topic
    uint64 confess_time                   = 8; // uint64_confess_time
    C2CConfessContext c2c_confess_ctx     = 6; // c2c_confess_ctx
    GroupConfessMsg group_confess_msg     = 9; // group_confess_msg
    GroupConfessContext group_confess_ctx = 10; // group_confess_ctx
    // C2CConfessContext is the message type for the C2CConfessContext.
    message C2CConfessContext {
      uint64 confessor_uin  = 1; // uint64_confessor_uin
      uint64 confess_to_uin = 2; // uint64_confess_to_uin
      uint64 send_uin       = 3; // uint64_send_uin
      bytes confessor_nick  = 4; // bytes_confessor_nick
      bytes confess         = 5; // bytes_confess
      uint32 bg_type        = 6; // uint32_bg_type
      uint32 topic_id       = 7; // uint32_topic_id
      uint64 confess_time   = 8; // uint64_confess_time
      uint32 confessor_sex  = 9; // uint32_confessor_sex
      uint32 biz_type       = 10; // uint32_biz_type
      uint32 confess_num    = 11; // uint32_confess_num
      uint32 confess_to_sex = 12; // uint32_confess_to_sex
    }
    // GroupConfessContext is the message type for the GroupConfessContext.
    message GroupConfessContext {
      uint64 confessor_uin        = 1; // uint64_confessor_uin
      uint64 confess_to_uin       = 2; // uint64_confess_to_uin
      uint64 send_uin             = 3; // uint64_send_uin
      uint32 confessor_sex        = 4; // uint32_confessor_sex
      bytes confess_to_nick       = 5; // bytes_confess_to_nick
      bytes topic                 = 6; // bytes_topic
      uint32 topic_id             = 7; // uint32_topic_id
      uint64 confess_time         = 8; // uint64_confess_time
      uint32 confess_to_nick_type = 9; // uint32_confess_to_nick_type
      bytes confessor_nick        = 10; // bytes_confessor_nick
    }
    // GroupConfessItem is the message type for the GroupConfessItem.
    message GroupConfessItem {
      uint32 topic_id             = 1; // uint32_topic_id
      uint64 confess_to_uin       = 2; // uint64_confess_to_uin
      bytes confess_to_nick       = 3; // bytes_confess_to_nick
      bytes topic                 = 4; // bytes_topic
      uint32 confess_to_nick_type = 5; // uint32_confess_to_nick_type
    }
    // GroupConfessMsg is the message type for the GroupConfessMsg.
    message GroupConfessMsg {
      uint64 confess_time                     = 1; // uint64_confess_time
      uint64 confessor_uin                    = 2; // uint64_confessor_uin
      uint32 confessor_sex                    = 3; // uint32_confessor_sex
      uint32 sysmsg_flag                      = 4; // uint32_sysmsg_flag
      repeated GroupConfessItem confess_items = 5; // confess_items
      uint32 total_topic_count                = 6; // uint32_total_topic_count
    }
  }
  // MsgElemInfo_servtype23 is the message type for the MsgElemInfo_servtype23.
  message MsgElemInfo_servtype23 {
    uint32 face_type                       = 1; // uint32_face_type
    uint32 face_bubble_count               = 2; // uint32_face_bubble_count
    bytes face_summary                     = 3; // bytes_face_summary
    uint32 flag                            = 4; // uint32_flag
    bytes others                           = 5; // bytes_others
    MsgElemInfo_servtype33 msg_yellow_face = 6; // msg_yellow_face
  }
  // MsgElemInfo_servtype24 is the message type for the MsgElemInfo_servtype24.
  message MsgElemInfo_servtype24 {
    LimitChatEnter limit_chat_enter = 1; // limit_chat_enter
    LimitChatExit limit_chat_exit   = 2; // limit_chat_exit
    // LimitChatEnter is the message type for the LimitChatEnter.
    message LimitChatEnter {
      bytes tips_wording        = 1; // bytes_tips_wording
      uint32 left_chat_time     = 2; // uint32_left_chat_time
      uint64 match_ts           = 3; // uint64_match_ts
      uint32 match_expired_time = 4; // uint32_match_expired_time
      uint32 c2c_expired_time   = 5; // uint32_c2c_expired_time
      uint64 ready_ts           = 6; // uint64_ready_ts
      bytes match_nick          = 7; // bytes_match_nick
    }
    // LimitChatExit is the message type for the LimitChatExit.
    message LimitChatExit {
      uint32 exit_method = 1; // uint32_exit_method
      uint64 match_ts    = 2; // uint64_match_ts
    }
  }
  // MsgElemInfo_servtype27 is the message type for the MsgElemInfo_servtype27.
  message MsgElemInfo_servtype27 {
    IMMsgBody.VideoFile video_file = 1; // video_file
  }
  // MsgElemInfo_servtype29 is the message type for the MsgElemInfo_servtype29.
  message MsgElemInfo_servtype29 {
    bytes luckybag_msg = 1; // bytes_luckybag_msg
  }
  // MsgElemInfo_servtype3 is the message type for the MsgElemInfo_servtype3.
  message MsgElemInfo_servtype3 {
    IMMsgBody.CustomFace flash_troop_pic   = 1; // flash_troop_pic
    IMMsgBody.NotOnlineImage flash_c2c_pic = 2; // flash_c2c_pic
  }
  // MsgElemInfo_servtype31 is the message type for the MsgElemInfo_servtype31.
  message MsgElemInfo_servtype31 {
    bytes text = 1; // bytes_text
    bytes ext  = 2; // bytes_ext
  }
  // MsgElemInfo_servtype33 is the message type for the MsgElemInfo_servtype33.
  message MsgElemInfo_servtype33 {
    uint32 index = 1; // uint32_index
    bytes text   = 2; // bytes_text
    bytes compat = 3; // bytes_compat
    bytes buf    = 4; // bytes_buf
  }
  // MsgElemInfo_servtype34 is the message type for the MsgElemInfo_servtype34.
  message MsgElemInfo_servtype34 {
    bytes from_nickname      = 1; // from_nickname
    uint32 push_window_flag  = 2; // push_window_flag
    GameSession game_session = 3; // game_session
    bytes ext                = 4; // bytes_ext
    // GameSession is the message type for the GameSession.
    message GameSession {
      bytes from_role_id  = 1; // from_role_id
      bytes from_open_id  = 2; // from_open_id
      bytes to_role_id    = 3; // to_role_id
      bytes to_open_id    = 4; // to_open_id
      uint64 game_appid   = 5; // game_appid
      uint64 from_tiny_id = 6; // from_tiny_id
      uint64 to_tiny_id   = 7; // to_tiny_id
    }
  }
  // MsgElemInfo_servtype35 is the message type for the MsgElemInfo_servtype35.
  message MsgElemInfo_servtype35 {
    bytes token             = 1; // bytes_token
    bytes global_padid      = 2; // bytes_global_padid
    uint32 get_rev          = 3; // uint32_get_rev
    uint32 his_edit_uin_num = 4; // uint32_his_edit_uin_num
  }
  // MsgElemInfo_servtype37 is the message type for the MsgElemInfo_servtype37.
  message MsgElemInfo_servtype37 {
    bytes packid      = 1; // bytes_packid
    bytes stickerid   = 2; // bytes_stickerid
    uint32 qsid       = 3; // uint32_qsid
    int32 sourcetype  = 4; // uint32_sourcetype
    int32 stickertype = 5; // uint32_stickertype
    bytes resultid    = 6; // bytes_resultid
    bytes text        = 7; // bytes_text
    bytes surpriseid  = 8; // bytes_surpriseid
    int32 randomtype  = 9; // uint32_randomtype
  }
  // MsgElemInfo_servtype38 is the message type for the MsgElemInfo_servtype38.
  message MsgElemInfo_servtype38 {
    bytes react_data = 1; // bytes_react_data
    bytes reply_data = 2; // bytes_reply_data
  }
  // MsgElemInfo_servtype39 is the message type for the MsgElemInfo_servtype39.
  message MsgElemInfo_servtype39 {
    uint32 action_id     = 1; // uint32_action_id
    bytes action_name    = 2; // bytes_action_name
    uint32 player_number = 3; // uint32_player_number
    uint32 action_type   = 4; // uint32_action_type
    uint64 peer_uin      = 5; // uint64_peer_uin
    bytes pic_url        = 6; // bytes_pic_url
    bytes reserve_info   = 7; // bytes_reserve_info
    uint32 meme_width    = 8; // uint32_meme_width
    uint32 meme_height   = 9; // uint32_meme_height
  }
  // MsgElemInfo_servtype4 is the message type for the MsgElemInfo_servtype4.
  message MsgElemInfo_servtype4 {
    uint32 imsg_type                    = 1; // uint32_imsg_type
    StoryAioObjMsg st_story_aio_obj_msg = 4; // st_story_aio_obj_msg
  }
  // MsgElemInfo_servtype40 is the message type for the MsgElemInfo_servtype40.
  message MsgElemInfo_servtype40 {
    string receiver_tiny_id = 1; // receiver_tiny_id
    uint64 gift_num         = 2; // gift_num
    uint64 gift_id          = 3; // gift_id
    string gift_name        = 4; // gift_name
  }
  // MsgElemInfo_servtype42 is the message type for the MsgElemInfo_servtype42.
  message MsgElemInfo_servtype42 {
    string summary        = 1; // summary
    uint64 expire_time_ms = 3; // expire_time_ms
    uint32 schema_type    = 4; // schema_type
    string schema         = 5; // schema
  }
  // MsgElemInfo_servtype44 is the message type for the MsgElemInfo_servtype44.
  message MsgElemInfo_servtype44 {
    bytes text                       = 1; // bytes_text
    IMMsgBody.VideoFile video_file = 2; // video_file
    bytes msg_data                   = 3; // bytes_msg_data
  }
  // MsgElemInfo_servtype45 is the message type for the MsgElemInfo_servtype45.
  message MsgElemInfo_servtype45 {
    bytes markdown = 1; // bytes_markdown
  }
  // MsgElemInfo_servtype46 is the message type for the MsgElemInfo_servtype46.
  message MsgElemInfo_servtype46 {
    bytes inline_keyboard = 1; // inline_keyboard
  }
  // MsgElemInfo_servtype5 is the message type for the MsgElemInfo_servtype5.
  message MsgElemInfo_servtype5 {
    bytes vid             = 1; // vid
    bytes cover           = 2; // cover
    bytes title           = 3; // title
    bytes summary         = 4; // summary
    uint64 createTime     = 5; // createTime
    bytes comment_content = 6; // comment_content
    uint64 author         = 7; // author
  }
  // MsgElemInfo_servtype8 is the message type for the MsgElemInfo_servtype8.
  message MsgElemInfo_servtype8 {
    IMMsgBody.DeliverGiftMsg wifi_deliver_gift_msg = 1; // wifi_deliver_gift_msg
  }
  // MsgElemInfo_servtype9 is the message type for the MsgElemInfo_servtype9.
  message MsgElemInfo_servtype9 {
    uint32 anchor_status   = 1; // uint32_anchor_status
    bytes jump_schema      = 2; // bytes_jump_schema
    string anchor_nickname = 3; // str_anchor_nickname
    bytes anchor_head_url  = 4; // bytes_anchor_head_url
    string live_title      = 5; // str_live_title
  }
  // StoryAioObjMsg is the message type for the StoryAioObjMsg.
  message StoryAioObjMsg {
    string ui_url  = 1; // str_ui_url
    string jmp_url = 2; // str_jmp_url
  }
}
