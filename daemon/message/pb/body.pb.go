// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: daemon/message/pb/body.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message generated by proto-message-gen. DO NOT EDIT.
// source: tencent.p1298im.msg.im_msg_body
//
// im_msg_body is the message type for the im_msg_body.
type IMMsgBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IMMsgBody) Reset() {
	*x = IMMsgBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody) ProtoMessage() {}

func (x *IMMsgBody) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody.ProtoReflect.Descriptor instead.
func (*IMMsgBody) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0}
}

// AnonymousGroupMsg is the message type for the AnonymousGroupMsg.
type IMMsgBody_AnonymousGroupMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags        uint32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`                                   // uint32_flags
	AnonId       []byte `protobuf:"bytes,2,opt,name=anon_id,json=anonId,proto3" json:"anon_id,omitempty"`                    // str_anon_id
	AnonNick     []byte `protobuf:"bytes,3,opt,name=anon_nick,json=anonNick,proto3" json:"anon_nick,omitempty"`              // str_anon_nick
	HeadPortrait uint32 `protobuf:"varint,4,opt,name=head_portrait,json=headPortrait,proto3" json:"head_portrait,omitempty"` // uint32_head_portrait
	ExpireTime   uint32 `protobuf:"varint,5,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`       // uint32_expire_time
	BubbleId     uint32 `protobuf:"varint,6,opt,name=bubble_id,json=bubbleId,proto3" json:"bubble_id,omitempty"`             // uint32_bubble_id
	RankColor    []byte `protobuf:"bytes,7,opt,name=rank_color,json=rankColor,proto3" json:"rank_color,omitempty"`           // str_rank_color
}

func (x *IMMsgBody_AnonymousGroupMsg) Reset() {
	*x = IMMsgBody_AnonymousGroupMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_AnonymousGroupMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_AnonymousGroupMsg) ProtoMessage() {}

func (x *IMMsgBody_AnonymousGroupMsg) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_AnonymousGroupMsg.ProtoReflect.Descriptor instead.
func (*IMMsgBody_AnonymousGroupMsg) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 0}
}

func (x *IMMsgBody_AnonymousGroupMsg) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *IMMsgBody_AnonymousGroupMsg) GetAnonId() []byte {
	if x != nil {
		return x.AnonId
	}
	return nil
}

func (x *IMMsgBody_AnonymousGroupMsg) GetAnonNick() []byte {
	if x != nil {
		return x.AnonNick
	}
	return nil
}

func (x *IMMsgBody_AnonymousGroupMsg) GetHeadPortrait() uint32 {
	if x != nil {
		return x.HeadPortrait
	}
	return 0
}

func (x *IMMsgBody_AnonymousGroupMsg) GetExpireTime() uint32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *IMMsgBody_AnonymousGroupMsg) GetBubbleId() uint32 {
	if x != nil {
		return x.BubbleId
	}
	return 0
}

func (x *IMMsgBody_AnonymousGroupMsg) GetRankColor() []byte {
	if x != nil {
		return x.RankColor
	}
	return nil
}

// ApolloActMsg is the message type for the ApolloActMsg.
type IMMsgBody_ApolloActMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionId       uint32 `protobuf:"varint,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`                   // uint32_action_id
	ActionName     []byte `protobuf:"bytes,2,opt,name=action_name,json=actionName,proto3" json:"action_name,omitempty"`              // bytes_action_name
	ActionText     []byte `protobuf:"bytes,3,opt,name=action_text,json=actionText,proto3" json:"action_text,omitempty"`              // bytes_action_text
	Flag           uint32 `protobuf:"varint,4,opt,name=flag,proto3" json:"flag,omitempty"`                                           // uint32_flag
	PeerUin        uint32 `protobuf:"varint,5,opt,name=peer_uin,json=peerUin,proto3" json:"peer_uin,omitempty"`                      // uint32_peer_uin
	SenderTs       uint32 `protobuf:"varint,6,opt,name=sender_ts,json=senderTs,proto3" json:"sender_ts,omitempty"`                   // uint32_sender_ts
	PeerTs         uint32 `protobuf:"varint,7,opt,name=peer_ts,json=peerTs,proto3" json:"peer_ts,omitempty"`                         // uint32_peer_ts
	SenderStatus   int32  `protobuf:"varint,8,opt,name=sender_status,json=senderStatus,proto3" json:"sender_status,omitempty"`       // int32_sender_status
	PeerStatus     int32  `protobuf:"varint,9,opt,name=peer_status,json=peerStatus,proto3" json:"peer_status,omitempty"`             // int32_peer_status
	DiytextId      uint32 `protobuf:"varint,10,opt,name=diytext_id,json=diytextId,proto3" json:"diytext_id,omitempty"`               // diytext_id
	DiytextContent []byte `protobuf:"bytes,11,opt,name=diytext_content,json=diytextContent,proto3" json:"diytext_content,omitempty"` // diytext_content
	InputText      []byte `protobuf:"bytes,12,opt,name=input_text,json=inputText,proto3" json:"input_text,omitempty"`                // input_text
	PbReserve      []byte `protobuf:"bytes,13,opt,name=pb_reserve,json=pbReserve,proto3" json:"pb_reserve,omitempty"`                // bytes_pb_reserve
}

func (x *IMMsgBody_ApolloActMsg) Reset() {
	*x = IMMsgBody_ApolloActMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_ApolloActMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_ApolloActMsg) ProtoMessage() {}

func (x *IMMsgBody_ApolloActMsg) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_ApolloActMsg.ProtoReflect.Descriptor instead.
func (*IMMsgBody_ApolloActMsg) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 1}
}

func (x *IMMsgBody_ApolloActMsg) GetActionId() uint32 {
	if x != nil {
		return x.ActionId
	}
	return 0
}

func (x *IMMsgBody_ApolloActMsg) GetActionName() []byte {
	if x != nil {
		return x.ActionName
	}
	return nil
}

func (x *IMMsgBody_ApolloActMsg) GetActionText() []byte {
	if x != nil {
		return x.ActionText
	}
	return nil
}

func (x *IMMsgBody_ApolloActMsg) GetFlag() uint32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *IMMsgBody_ApolloActMsg) GetPeerUin() uint32 {
	if x != nil {
		return x.PeerUin
	}
	return 0
}

func (x *IMMsgBody_ApolloActMsg) GetSenderTs() uint32 {
	if x != nil {
		return x.SenderTs
	}
	return 0
}

func (x *IMMsgBody_ApolloActMsg) GetPeerTs() uint32 {
	if x != nil {
		return x.PeerTs
	}
	return 0
}

func (x *IMMsgBody_ApolloActMsg) GetSenderStatus() int32 {
	if x != nil {
		return x.SenderStatus
	}
	return 0
}

func (x *IMMsgBody_ApolloActMsg) GetPeerStatus() int32 {
	if x != nil {
		return x.PeerStatus
	}
	return 0
}

func (x *IMMsgBody_ApolloActMsg) GetDiytextId() uint32 {
	if x != nil {
		return x.DiytextId
	}
	return 0
}

func (x *IMMsgBody_ApolloActMsg) GetDiytextContent() []byte {
	if x != nil {
		return x.DiytextContent
	}
	return nil
}

func (x *IMMsgBody_ApolloActMsg) GetInputText() []byte {
	if x != nil {
		return x.InputText
	}
	return nil
}

func (x *IMMsgBody_ApolloActMsg) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

// ArkAppElem is the message type for the ArkAppElem.
type IMMsgBody_ArkAppElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppName     string `protobuf:"bytes,1,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`             // app_name
	MinVersion  string `protobuf:"bytes,2,opt,name=min_version,json=minVersion,proto3" json:"min_version,omitempty"`    // min_version
	XmlTemplate string `protobuf:"bytes,3,opt,name=xml_template,json=xmlTemplate,proto3" json:"xml_template,omitempty"` // xml_template
	Data        []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`                                  // bytes_data
}

func (x *IMMsgBody_ArkAppElem) Reset() {
	*x = IMMsgBody_ArkAppElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_ArkAppElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_ArkAppElem) ProtoMessage() {}

func (x *IMMsgBody_ArkAppElem) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_ArkAppElem.ProtoReflect.Descriptor instead.
func (*IMMsgBody_ArkAppElem) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 2}
}

func (x *IMMsgBody_ArkAppElem) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *IMMsgBody_ArkAppElem) GetMinVersion() string {
	if x != nil {
		return x.MinVersion
	}
	return ""
}

func (x *IMMsgBody_ArkAppElem) GetXmlTemplate() string {
	if x != nil {
		return x.XmlTemplate
	}
	return ""
}

func (x *IMMsgBody_ArkAppElem) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Attr is the message type for the Attr.
type IMMsgBody_Attr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodePage       int32  `protobuf:"zigzag32,1,opt,name=code_page,json=codePage,proto3" json:"code_page,omitempty"`                   // code_page
	Time           uint32 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`                                             // time
	Random         uint32 `protobuf:"varint,3,opt,name=random,proto3" json:"random,omitempty"`                                         // random
	Color          uint32 `protobuf:"varint,4,opt,name=color,proto3" json:"color,omitempty"`                                           // color
	Size           uint32 `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`                                             // size
	Effect         uint32 `protobuf:"varint,6,opt,name=effect,proto3" json:"effect,omitempty"`                                         // effect
	CharSet        uint32 `protobuf:"varint,7,opt,name=char_set,json=charSet,proto3" json:"char_set,omitempty"`                        // char_set
	PitchAndFamily uint32 `protobuf:"varint,8,opt,name=pitch_and_family,json=pitchAndFamily,proto3" json:"pitch_and_family,omitempty"` // pitch_and_family
	FontName       string `protobuf:"bytes,9,opt,name=font_name,json=fontName,proto3" json:"font_name,omitempty"`                      // font_name
	ReserveData    []byte `protobuf:"bytes,10,opt,name=reserve_data,json=reserveData,proto3" json:"reserve_data,omitempty"`            // reserve_data
}

func (x *IMMsgBody_Attr) Reset() {
	*x = IMMsgBody_Attr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_Attr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_Attr) ProtoMessage() {}

func (x *IMMsgBody_Attr) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_Attr.ProtoReflect.Descriptor instead.
func (*IMMsgBody_Attr) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 3}
}

func (x *IMMsgBody_Attr) GetCodePage() int32 {
	if x != nil {
		return x.CodePage
	}
	return 0
}

func (x *IMMsgBody_Attr) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *IMMsgBody_Attr) GetRandom() uint32 {
	if x != nil {
		return x.Random
	}
	return 0
}

func (x *IMMsgBody_Attr) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *IMMsgBody_Attr) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *IMMsgBody_Attr) GetEffect() uint32 {
	if x != nil {
		return x.Effect
	}
	return 0
}

func (x *IMMsgBody_Attr) GetCharSet() uint32 {
	if x != nil {
		return x.CharSet
	}
	return 0
}

func (x *IMMsgBody_Attr) GetPitchAndFamily() uint32 {
	if x != nil {
		return x.PitchAndFamily
	}
	return 0
}

func (x *IMMsgBody_Attr) GetFontName() string {
	if x != nil {
		return x.FontName
	}
	return ""
}

func (x *IMMsgBody_Attr) GetReserveData() []byte {
	if x != nil {
		return x.ReserveData
	}
	return nil
}

// BitAppMsg is the message type for the BitAppMsg.
type IMMsgBody_BitAppMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buf []byte `protobuf:"bytes,1,opt,name=buf,proto3" json:"buf,omitempty"` // bytes_buf
}

func (x *IMMsgBody_BitAppMsg) Reset() {
	*x = IMMsgBody_BitAppMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_BitAppMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_BitAppMsg) ProtoMessage() {}

func (x *IMMsgBody_BitAppMsg) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_BitAppMsg.ProtoReflect.Descriptor instead.
func (*IMMsgBody_BitAppMsg) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 4}
}

func (x *IMMsgBody_BitAppMsg) GetBuf() []byte {
	if x != nil {
		return x.Buf
	}
	return nil
}

// BlessingMessage is the message type for the BlessingMessage.
type IMMsgBody_BlessingMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgType uint32 `protobuf:"varint,1,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"` // uint32_msg_type
	ExFlag  uint32 `protobuf:"varint,2,opt,name=ex_flag,json=exFlag,proto3" json:"ex_flag,omitempty"`    // uint32_ex_flag
}

func (x *IMMsgBody_BlessingMessage) Reset() {
	*x = IMMsgBody_BlessingMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_BlessingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_BlessingMessage) ProtoMessage() {}

func (x *IMMsgBody_BlessingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_BlessingMessage.ProtoReflect.Descriptor instead.
func (*IMMsgBody_BlessingMessage) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 5}
}

func (x *IMMsgBody_BlessingMessage) GetMsgType() uint32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *IMMsgBody_BlessingMessage) GetExFlag() uint32 {
	if x != nil {
		return x.ExFlag
	}
	return 0
}

// CommonElem is the message type for the CommonElem.
type IMMsgBody_CommonElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceType  uint32 `protobuf:"varint,1,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`    // uint32_service_type
	PbElem       []byte `protobuf:"bytes,2,opt,name=pb_elem,json=pbElem,proto3" json:"pb_elem,omitempty"`                    // bytes_pb_elem
	BusinessType uint32 `protobuf:"varint,3,opt,name=business_type,json=businessType,proto3" json:"business_type,omitempty"` // uint32_business_type
}

func (x *IMMsgBody_CommonElem) Reset() {
	*x = IMMsgBody_CommonElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_CommonElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_CommonElem) ProtoMessage() {}

func (x *IMMsgBody_CommonElem) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_CommonElem.ProtoReflect.Descriptor instead.
func (*IMMsgBody_CommonElem) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 6}
}

func (x *IMMsgBody_CommonElem) GetServiceType() uint32 {
	if x != nil {
		return x.ServiceType
	}
	return 0
}

func (x *IMMsgBody_CommonElem) GetPbElem() []byte {
	if x != nil {
		return x.PbElem
	}
	return nil
}

func (x *IMMsgBody_CommonElem) GetBusinessType() uint32 {
	if x != nil {
		return x.BusinessType
	}
	return 0
}

// ConferenceTipsInfo is the message type for the ConferenceTipsInfo.
type IMMsgBody_ConferenceTipsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionType uint32 `protobuf:"varint,1,opt,name=session_type,json=sessionType,proto3" json:"session_type,omitempty"` // uint32_session_type
	SessionUin  uint64 `protobuf:"varint,2,opt,name=session_uin,json=sessionUin,proto3" json:"session_uin,omitempty"`    // uint64_session_uin
	Text        string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`                                   // str_text
}

func (x *IMMsgBody_ConferenceTipsInfo) Reset() {
	*x = IMMsgBody_ConferenceTipsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_ConferenceTipsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_ConferenceTipsInfo) ProtoMessage() {}

func (x *IMMsgBody_ConferenceTipsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_ConferenceTipsInfo.ProtoReflect.Descriptor instead.
func (*IMMsgBody_ConferenceTipsInfo) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 7}
}

func (x *IMMsgBody_ConferenceTipsInfo) GetSessionType() uint32 {
	if x != nil {
		return x.SessionType
	}
	return 0
}

func (x *IMMsgBody_ConferenceTipsInfo) GetSessionUin() uint64 {
	if x != nil {
		return x.SessionUin
	}
	return 0
}

func (x *IMMsgBody_ConferenceTipsInfo) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// CrmElem is the message type for the CrmElem.
type IMMsgBody_CrmElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrmBuf     []byte `protobuf:"bytes,1,opt,name=crm_buf,json=crmBuf,proto3" json:"crm_buf,omitempty"`              // crm_buf
	MsgResid   []byte `protobuf:"bytes,2,opt,name=msg_resid,json=msgResid,proto3" json:"msg_resid,omitempty"`        // bytes_msg_resid
	QidianFlag uint32 `protobuf:"varint,3,opt,name=qidian_flag,json=qidianFlag,proto3" json:"qidian_flag,omitempty"` // uint32_qidian_flag
	PushFlag   uint32 `protobuf:"varint,4,opt,name=push_flag,json=pushFlag,proto3" json:"push_flag,omitempty"`       // uint32_push_flag
	CountFlag  uint32 `protobuf:"varint,5,opt,name=count_flag,json=countFlag,proto3" json:"count_flag,omitempty"`    // uint32_count_flag
}

func (x *IMMsgBody_CrmElem) Reset() {
	*x = IMMsgBody_CrmElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_CrmElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_CrmElem) ProtoMessage() {}

func (x *IMMsgBody_CrmElem) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_CrmElem.ProtoReflect.Descriptor instead.
func (*IMMsgBody_CrmElem) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 8}
}

func (x *IMMsgBody_CrmElem) GetCrmBuf() []byte {
	if x != nil {
		return x.CrmBuf
	}
	return nil
}

func (x *IMMsgBody_CrmElem) GetMsgResid() []byte {
	if x != nil {
		return x.MsgResid
	}
	return nil
}

func (x *IMMsgBody_CrmElem) GetQidianFlag() uint32 {
	if x != nil {
		return x.QidianFlag
	}
	return 0
}

func (x *IMMsgBody_CrmElem) GetPushFlag() uint32 {
	if x != nil {
		return x.PushFlag
	}
	return 0
}

func (x *IMMsgBody_CrmElem) GetCountFlag() uint32 {
	if x != nil {
		return x.CountFlag
	}
	return 0
}

// CustomElem is the message type for the CustomElem.
type IMMsgBody_CustomElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc     []byte `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`                          // bytes_desc
	Data     []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`                          // bytes_data
	EnumType int32  `protobuf:"varint,3,opt,name=enum_type,json=enumType,proto3" json:"enum_type,omitempty"` // enum_type
	Ext      []byte `protobuf:"bytes,4,opt,name=ext,proto3" json:"ext,omitempty"`                            // bytes_ext
	Sound    []byte `protobuf:"bytes,5,opt,name=sound,proto3" json:"sound,omitempty"`                        // bytes_sound
}

func (x *IMMsgBody_CustomElem) Reset() {
	*x = IMMsgBody_CustomElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_CustomElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_CustomElem) ProtoMessage() {}

func (x *IMMsgBody_CustomElem) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_CustomElem.ProtoReflect.Descriptor instead.
func (*IMMsgBody_CustomElem) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 9}
}

func (x *IMMsgBody_CustomElem) GetDesc() []byte {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *IMMsgBody_CustomElem) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *IMMsgBody_CustomElem) GetEnumType() int32 {
	if x != nil {
		return x.EnumType
	}
	return 0
}

func (x *IMMsgBody_CustomElem) GetExt() []byte {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *IMMsgBody_CustomElem) GetSound() []byte {
	if x != nil {
		return x.Sound
	}
	return nil
}

// CustomFace is the message type for the CustomFace.
type IMMsgBody_CustomFace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid        []byte `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`                                    // bytes_guid
	FilePath    string `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`            // str_file_path
	Shortcut    string `protobuf:"bytes,3,opt,name=shortcut,proto3" json:"shortcut,omitempty"`                            // str_shortcut
	Buffer      []byte `protobuf:"bytes,4,opt,name=buffer,proto3" json:"buffer,omitempty"`                                // bytes_buffer
	Flag        []byte `protobuf:"bytes,5,opt,name=flag,proto3" json:"flag,omitempty"`                                    // bytes_flag
	OldData     []byte `protobuf:"bytes,6,opt,name=old_data,json=oldData,proto3" json:"old_data,omitempty"`               // bytes_old_data
	FileId      uint32 `protobuf:"varint,7,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`                 // uint32_file_id
	ServerIp    uint32 `protobuf:"varint,8,opt,name=server_ip,json=serverIp,proto3" json:"server_ip,omitempty"`           // uint32_server_ip
	ServerPort  uint32 `protobuf:"varint,9,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`     // uint32_server_port
	FileType    uint32 `protobuf:"varint,10,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`          // uint32_file_type
	Signature   []byte `protobuf:"bytes,11,opt,name=signature,proto3" json:"signature,omitempty"`                         // bytes_signature
	Useful      uint32 `protobuf:"varint,12,opt,name=useful,proto3" json:"useful,omitempty"`                              // uint32_useful
	Md5         []byte `protobuf:"bytes,13,opt,name=md5,proto3" json:"md5,omitempty"`                                     // bytes_md5
	ThumbUrl    string `protobuf:"bytes,14,opt,name=thumb_url,json=thumbUrl,proto3" json:"thumb_url,omitempty"`           // str_thumb_url
	BigUrl      string `protobuf:"bytes,15,opt,name=big_url,json=bigUrl,proto3" json:"big_url,omitempty"`                 // str_big_url
	OrigUrl     string `protobuf:"bytes,16,opt,name=orig_url,json=origUrl,proto3" json:"orig_url,omitempty"`              // str_orig_url
	BizType     uint32 `protobuf:"varint,17,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty"`             // biz_type
	RepeatIndex uint32 `protobuf:"varint,18,opt,name=repeat_index,json=repeatIndex,proto3" json:"repeat_index,omitempty"` // repeat_index
	RepeatImage uint32 `protobuf:"varint,19,opt,name=repeat_image,json=repeatImage,proto3" json:"repeat_image,omitempty"` // repeat_image
	ImageType   uint32 `protobuf:"varint,20,opt,name=image_type,json=imageType,proto3" json:"image_type,omitempty"`       // image_type
	Index       uint32 `protobuf:"varint,21,opt,name=index,proto3" json:"index,omitempty"`                                // index
	Width       uint32 `protobuf:"varint,22,opt,name=width,proto3" json:"width,omitempty"`                                // uint32_width
	Height      uint32 `protobuf:"varint,23,opt,name=height,proto3" json:"height,omitempty"`                              // uint32_height
	Source      uint32 `protobuf:"varint,24,opt,name=source,proto3" json:"source,omitempty"`                              // uint32_source
	Size        uint32 `protobuf:"varint,25,opt,name=size,proto3" json:"size,omitempty"`                                  // uint32_size
	Origin      uint32 `protobuf:"varint,26,opt,name=origin,proto3" json:"origin,omitempty"`                              // uint32_origin
	ThumbWidth  uint32 `protobuf:"varint,27,opt,name=thumb_width,json=thumbWidth,proto3" json:"thumb_width,omitempty"`    // uint32_thumb_width
	ThumbHeight uint32 `protobuf:"varint,28,opt,name=thumb_height,json=thumbHeight,proto3" json:"thumb_height,omitempty"` // uint32_thumb_height
	ShowLen     uint32 `protobuf:"varint,29,opt,name=show_len,json=showLen,proto3" json:"show_len,omitempty"`             // uint32_show_len
	DownloadLen uint32 `protobuf:"varint,30,opt,name=download_len,json=downloadLen,proto3" json:"download_len,omitempty"` // uint32_download_len
	Url_400     string `protobuf:"bytes,31,opt,name=url_400,json=url400,proto3" json:"url_400,omitempty"`                 // str_400_url
	Width_400   uint32 `protobuf:"varint,32,opt,name=width_400,json=width400,proto3" json:"width_400,omitempty"`          // uint32_400_width
	Height_400  uint32 `protobuf:"varint,33,opt,name=height_400,json=height400,proto3" json:"height_400,omitempty"`       // uint32_400_height
	PbReserve   []byte `protobuf:"bytes,34,opt,name=pb_reserve,json=pbReserve,proto3" json:"pb_reserve,omitempty"`        // bytes_pb_reserve
}

func (x *IMMsgBody_CustomFace) Reset() {
	*x = IMMsgBody_CustomFace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_CustomFace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_CustomFace) ProtoMessage() {}

func (x *IMMsgBody_CustomFace) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_CustomFace.ProtoReflect.Descriptor instead.
func (*IMMsgBody_CustomFace) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 10}
}

func (x *IMMsgBody_CustomFace) GetGuid() []byte {
	if x != nil {
		return x.Guid
	}
	return nil
}

func (x *IMMsgBody_CustomFace) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *IMMsgBody_CustomFace) GetShortcut() string {
	if x != nil {
		return x.Shortcut
	}
	return ""
}

func (x *IMMsgBody_CustomFace) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *IMMsgBody_CustomFace) GetFlag() []byte {
	if x != nil {
		return x.Flag
	}
	return nil
}

func (x *IMMsgBody_CustomFace) GetOldData() []byte {
	if x != nil {
		return x.OldData
	}
	return nil
}

func (x *IMMsgBody_CustomFace) GetFileId() uint32 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *IMMsgBody_CustomFace) GetServerIp() uint32 {
	if x != nil {
		return x.ServerIp
	}
	return 0
}

func (x *IMMsgBody_CustomFace) GetServerPort() uint32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *IMMsgBody_CustomFace) GetFileType() uint32 {
	if x != nil {
		return x.FileType
	}
	return 0
}

func (x *IMMsgBody_CustomFace) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *IMMsgBody_CustomFace) GetUseful() uint32 {
	if x != nil {
		return x.Useful
	}
	return 0
}

func (x *IMMsgBody_CustomFace) GetMd5() []byte {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *IMMsgBody_CustomFace) GetThumbUrl() string {
	if x != nil {
		return x.ThumbUrl
	}
	return ""
}

func (x *IMMsgBody_CustomFace) GetBigUrl() string {
	if x != nil {
		return x.BigUrl
	}
	return ""
}

func (x *IMMsgBody_CustomFace) GetOrigUrl() string {
	if x != nil {
		return x.OrigUrl
	}
	return ""
}

func (x *IMMsgBody_CustomFace) GetBizType() uint32 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *IMMsgBody_CustomFace) GetRepeatIndex() uint32 {
	if x != nil {
		return x.RepeatIndex
	}
	return 0
}

func (x *IMMsgBody_CustomFace) GetRepeatImage() uint32 {
	if x != nil {
		return x.RepeatImage
	}
	return 0
}

func (x *IMMsgBody_CustomFace) GetImageType() uint32 {
	if x != nil {
		return x.ImageType
	}
	return 0
}

func (x *IMMsgBody_CustomFace) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *IMMsgBody_CustomFace) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *IMMsgBody_CustomFace) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *IMMsgBody_CustomFace) GetSource() uint32 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *IMMsgBody_CustomFace) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *IMMsgBody_CustomFace) GetOrigin() uint32 {
	if x != nil {
		return x.Origin
	}
	return 0
}

func (x *IMMsgBody_CustomFace) GetThumbWidth() uint32 {
	if x != nil {
		return x.ThumbWidth
	}
	return 0
}

func (x *IMMsgBody_CustomFace) GetThumbHeight() uint32 {
	if x != nil {
		return x.ThumbHeight
	}
	return 0
}

func (x *IMMsgBody_CustomFace) GetShowLen() uint32 {
	if x != nil {
		return x.ShowLen
	}
	return 0
}

func (x *IMMsgBody_CustomFace) GetDownloadLen() uint32 {
	if x != nil {
		return x.DownloadLen
	}
	return 0
}

func (x *IMMsgBody_CustomFace) GetUrl_400() string {
	if x != nil {
		return x.Url_400
	}
	return ""
}

func (x *IMMsgBody_CustomFace) GetWidth_400() uint32 {
	if x != nil {
		return x.Width_400
	}
	return 0
}

func (x *IMMsgBody_CustomFace) GetHeight_400() uint32 {
	if x != nil {
		return x.Height_400
	}
	return 0
}

func (x *IMMsgBody_CustomFace) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

// DeliverGiftMsg is the message type for the DeliverGiftMsg.
type IMMsgBody_DeliverGiftMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrayTipContent       []byte `protobuf:"bytes,1,opt,name=gray_tip_content,json=grayTipContent,proto3" json:"gray_tip_content,omitempty"`                     // bytes_gray_tip_content
	AnimationPackageId   uint32 `protobuf:"varint,2,opt,name=animation_package_id,json=animationPackageId,proto3" json:"animation_package_id,omitempty"`        // uint32_animation_package_id
	AnimationPackageUrlA []byte `protobuf:"bytes,3,opt,name=animation_package_url_a,json=animationPackageUrlA,proto3" json:"animation_package_url_a,omitempty"` // bytes_animation_package_url_a
	AnimationPackageUrlI []byte `protobuf:"bytes,4,opt,name=animation_package_url_i,json=animationPackageUrlI,proto3" json:"animation_package_url_i,omitempty"` // bytes_animation_package_url_i
	RemindBrief          []byte `protobuf:"bytes,5,opt,name=remind_brief,json=remindBrief,proto3" json:"remind_brief,omitempty"`                                // bytes_remind_brief
	GiftId               uint32 `protobuf:"varint,6,opt,name=gift_id,json=giftId,proto3" json:"gift_id,omitempty"`                                              // uint32_gift_id
	GiftCount            uint32 `protobuf:"varint,7,opt,name=gift_count,json=giftCount,proto3" json:"gift_count,omitempty"`                                     // uint32_gift_count
	AnimationBrief       []byte `protobuf:"bytes,8,opt,name=animation_brief,json=animationBrief,proto3" json:"animation_brief,omitempty"`                       // bytes_animation_brief
	SenderUin            uint64 `protobuf:"varint,9,opt,name=sender_uin,json=senderUin,proto3" json:"sender_uin,omitempty"`                                     // uint64_sender_uin
	ReceiverUin          uint64 `protobuf:"varint,10,opt,name=receiver_uin,json=receiverUin,proto3" json:"receiver_uin,omitempty"`                              // uint64_receiver_uin
	StmessageTitle       []byte `protobuf:"bytes,11,opt,name=stmessage_title,json=stmessageTitle,proto3" json:"stmessage_title,omitempty"`                      // bytes_stmessage_title
	StmessageSubtitle    []byte `protobuf:"bytes,12,opt,name=stmessage_subtitle,json=stmessageSubtitle,proto3" json:"stmessage_subtitle,omitempty"`             // bytes_stmessage_subtitle
	StmessageMessage     []byte `protobuf:"bytes,13,opt,name=stmessage_message,json=stmessageMessage,proto3" json:"stmessage_message,omitempty"`                // bytes_stmessage_message
	StmessageGiftpicid   uint32 `protobuf:"varint,14,opt,name=stmessage_giftpicid,json=stmessageGiftpicid,proto3" json:"stmessage_giftpicid,omitempty"`         // uint32_stmessage_giftpicid
	StmessageComefrom    []byte `protobuf:"bytes,15,opt,name=stmessage_comefrom,json=stmessageComefrom,proto3" json:"stmessage_comefrom,omitempty"`             // bytes_stmessage_comefrom
	StmessageExflag      uint32 `protobuf:"varint,16,opt,name=stmessage_exflag,json=stmessageExflag,proto3" json:"stmessage_exflag,omitempty"`                  // uint32_stmessage_exflag
	ToAllGiftId          []byte `protobuf:"bytes,17,opt,name=to_all_gift_id,json=toAllGiftId,proto3" json:"to_all_gift_id,omitempty"`                           // bytes_to_all_gift_id
	ComefromLink         []byte `protobuf:"bytes,18,opt,name=comefrom_link,json=comefromLink,proto3" json:"comefrom_link,omitempty"`                            // bytes_comefrom_link
	PbReserve            []byte `protobuf:"bytes,19,opt,name=pb_reserve,json=pbReserve,proto3" json:"pb_reserve,omitempty"`                                     // bytes_pb_reserve
	ReceiverName         []byte `protobuf:"bytes,20,opt,name=receiver_name,json=receiverName,proto3" json:"receiver_name,omitempty"`                            // bytes_receiver_name
	ReceiverPic          []byte `protobuf:"bytes,21,opt,name=receiver_pic,json=receiverPic,proto3" json:"receiver_pic,omitempty"`                               // bytes_receiver_pic
	StmessageGifturl     []byte `protobuf:"bytes,22,opt,name=stmessage_gifturl,json=stmessageGifturl,proto3" json:"stmessage_gifturl,omitempty"`                // bytes_stmessage_gifturl
}

func (x *IMMsgBody_DeliverGiftMsg) Reset() {
	*x = IMMsgBody_DeliverGiftMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_DeliverGiftMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_DeliverGiftMsg) ProtoMessage() {}

func (x *IMMsgBody_DeliverGiftMsg) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_DeliverGiftMsg.ProtoReflect.Descriptor instead.
func (*IMMsgBody_DeliverGiftMsg) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 11}
}

func (x *IMMsgBody_DeliverGiftMsg) GetGrayTipContent() []byte {
	if x != nil {
		return x.GrayTipContent
	}
	return nil
}

func (x *IMMsgBody_DeliverGiftMsg) GetAnimationPackageId() uint32 {
	if x != nil {
		return x.AnimationPackageId
	}
	return 0
}

func (x *IMMsgBody_DeliverGiftMsg) GetAnimationPackageUrlA() []byte {
	if x != nil {
		return x.AnimationPackageUrlA
	}
	return nil
}

func (x *IMMsgBody_DeliverGiftMsg) GetAnimationPackageUrlI() []byte {
	if x != nil {
		return x.AnimationPackageUrlI
	}
	return nil
}

func (x *IMMsgBody_DeliverGiftMsg) GetRemindBrief() []byte {
	if x != nil {
		return x.RemindBrief
	}
	return nil
}

func (x *IMMsgBody_DeliverGiftMsg) GetGiftId() uint32 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

func (x *IMMsgBody_DeliverGiftMsg) GetGiftCount() uint32 {
	if x != nil {
		return x.GiftCount
	}
	return 0
}

func (x *IMMsgBody_DeliverGiftMsg) GetAnimationBrief() []byte {
	if x != nil {
		return x.AnimationBrief
	}
	return nil
}

func (x *IMMsgBody_DeliverGiftMsg) GetSenderUin() uint64 {
	if x != nil {
		return x.SenderUin
	}
	return 0
}

func (x *IMMsgBody_DeliverGiftMsg) GetReceiverUin() uint64 {
	if x != nil {
		return x.ReceiverUin
	}
	return 0
}

func (x *IMMsgBody_DeliverGiftMsg) GetStmessageTitle() []byte {
	if x != nil {
		return x.StmessageTitle
	}
	return nil
}

func (x *IMMsgBody_DeliverGiftMsg) GetStmessageSubtitle() []byte {
	if x != nil {
		return x.StmessageSubtitle
	}
	return nil
}

func (x *IMMsgBody_DeliverGiftMsg) GetStmessageMessage() []byte {
	if x != nil {
		return x.StmessageMessage
	}
	return nil
}

func (x *IMMsgBody_DeliverGiftMsg) GetStmessageGiftpicid() uint32 {
	if x != nil {
		return x.StmessageGiftpicid
	}
	return 0
}

func (x *IMMsgBody_DeliverGiftMsg) GetStmessageComefrom() []byte {
	if x != nil {
		return x.StmessageComefrom
	}
	return nil
}

func (x *IMMsgBody_DeliverGiftMsg) GetStmessageExflag() uint32 {
	if x != nil {
		return x.StmessageExflag
	}
	return 0
}

func (x *IMMsgBody_DeliverGiftMsg) GetToAllGiftId() []byte {
	if x != nil {
		return x.ToAllGiftId
	}
	return nil
}

func (x *IMMsgBody_DeliverGiftMsg) GetComefromLink() []byte {
	if x != nil {
		return x.ComefromLink
	}
	return nil
}

func (x *IMMsgBody_DeliverGiftMsg) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

func (x *IMMsgBody_DeliverGiftMsg) GetReceiverName() []byte {
	if x != nil {
		return x.ReceiverName
	}
	return nil
}

func (x *IMMsgBody_DeliverGiftMsg) GetReceiverPic() []byte {
	if x != nil {
		return x.ReceiverPic
	}
	return nil
}

func (x *IMMsgBody_DeliverGiftMsg) GetStmessageGifturl() []byte {
	if x != nil {
		return x.StmessageGifturl
	}
	return nil
}

// EIMInfo is the message type for the EIMInfo.
type IMMsgBody_EIMInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootId uint64 `protobuf:"varint,1,opt,name=root_id,json=rootId,proto3" json:"root_id,omitempty"` // uint64_root_id
	Flag   uint32 `protobuf:"varint,2,opt,name=flag,proto3" json:"flag,omitempty"`                   // uint32_flag
}

func (x *IMMsgBody_EIMInfo) Reset() {
	*x = IMMsgBody_EIMInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_EIMInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_EIMInfo) ProtoMessage() {}

func (x *IMMsgBody_EIMInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_EIMInfo.ProtoReflect.Descriptor instead.
func (*IMMsgBody_EIMInfo) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 12}
}

func (x *IMMsgBody_EIMInfo) GetRootId() uint64 {
	if x != nil {
		return x.RootId
	}
	return 0
}

func (x *IMMsgBody_EIMInfo) GetFlag() uint32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

// Elem is the message type for the Elem.
type IMMsgBody_Elem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text               *IMMsgBody_Text                `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`                                                          // text
	Face               *IMMsgBody_Face                `protobuf:"bytes,2,opt,name=face,proto3" json:"face,omitempty"`                                                          // face
	OnlineImage        *IMMsgBody_OnlineImage         `protobuf:"bytes,3,opt,name=online_image,json=onlineImage,proto3" json:"online_image,omitempty"`                         // online_image
	NotOnlineImage     *IMMsgBody_NotOnlineImage      `protobuf:"bytes,4,opt,name=not_online_image,json=notOnlineImage,proto3" json:"not_online_image,omitempty"`              // not_online_image
	TransElemInfo      *IMMsgBody_TransElem           `protobuf:"bytes,5,opt,name=trans_elem_info,json=transElemInfo,proto3" json:"trans_elem_info,omitempty"`                 // trans_elem_info
	MarketFace         *IMMsgBody_MarketFace          `protobuf:"bytes,6,opt,name=market_face,json=marketFace,proto3" json:"market_face,omitempty"`                            // market_face
	ElemFlags          *IMMsgBody_ElemFlags           `protobuf:"bytes,7,opt,name=elem_flags,json=elemFlags,proto3" json:"elem_flags,omitempty"`                               // elem_flags
	CustomFace         *IMMsgBody_CustomFace          `protobuf:"bytes,8,opt,name=custom_face,json=customFace,proto3" json:"custom_face,omitempty"`                            // custom_face
	ElemFlags2         *IMMsgBody_ElemFlags2          `protobuf:"bytes,9,opt,name=elem_flags2,json=elemFlags2,proto3" json:"elem_flags2,omitempty"`                            // elem_flags2
	FunFace            *IMMsgBody_FunFace             `protobuf:"bytes,10,opt,name=fun_face,json=funFace,proto3" json:"fun_face,omitempty"`                                    // fun_face
	SecretFile         *IMMsgBody_SecretFileMsg       `protobuf:"bytes,11,opt,name=secret_file,json=secretFile,proto3" json:"secret_file,omitempty"`                           // secret_file
	RichMsg            *IMMsgBody_RichMsg             `protobuf:"bytes,12,opt,name=rich_msg,json=richMsg,proto3" json:"rich_msg,omitempty"`                                    // rich_msg
	GroupFile          *IMMsgBody_GroupFile           `protobuf:"bytes,13,opt,name=group_file,json=groupFile,proto3" json:"group_file,omitempty"`                              // group_file
	PubGroup           *IMMsgBody_PubGroup            `protobuf:"bytes,14,opt,name=pub_group,json=pubGroup,proto3" json:"pub_group,omitempty"`                                 // pub_group
	MarketTrans        *IMMsgBody_MarketTrans         `protobuf:"bytes,15,opt,name=market_trans,json=marketTrans,proto3" json:"market_trans,omitempty"`                        // market_trans
	ExtraInfo          *IMMsgBody_ExtraInfo           `protobuf:"bytes,16,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`                              // extra_info
	ShakeWindow        *IMMsgBody_ShakeWindow         `protobuf:"bytes,17,opt,name=shake_window,json=shakeWindow,proto3" json:"shake_window,omitempty"`                        // shake_window
	PubAccount         *IMMsgBody_PubAccount          `protobuf:"bytes,18,opt,name=pub_account,json=pubAccount,proto3" json:"pub_account,omitempty"`                           // pub_account
	VideoFile          *IMMsgBody_VideoFile           `protobuf:"bytes,19,opt,name=video_file,json=videoFile,proto3" json:"video_file,omitempty"`                              // video_file
	TipsInfo           *IMMsgBody_TipsInfo            `protobuf:"bytes,20,opt,name=tips_info,json=tipsInfo,proto3" json:"tips_info,omitempty"`                                 // tips_info
	AnonGroupMsg       *IMMsgBody_AnonymousGroupMsg   `protobuf:"bytes,21,opt,name=anon_group_msg,json=anonGroupMsg,proto3" json:"anon_group_msg,omitempty"`                   // anon_group_msg
	QqLiveOld          *IMMsgBody_QQLiveOld           `protobuf:"bytes,22,opt,name=qq_live_old,json=qqLiveOld,proto3" json:"qq_live_old,omitempty"`                            // qq_live_old
	LifeOnline         *IMMsgBody_LifeOnlineAccount   `protobuf:"bytes,23,opt,name=life_online,json=lifeOnline,proto3" json:"life_online,omitempty"`                           // life_online
	QqwalletMsg        *IMMsgBody_QQWalletMsg         `protobuf:"bytes,24,opt,name=qqwallet_msg,json=qqwalletMsg,proto3" json:"qqwallet_msg,omitempty"`                        // qqwallet_msg
	CrmElem            *IMMsgBody_CrmElem             `protobuf:"bytes,25,opt,name=crm_elem,json=crmElem,proto3" json:"crm_elem,omitempty"`                                    // crm_elem
	ConferenceTipsInfo *IMMsgBody_ConferenceTipsInfo  `protobuf:"bytes,26,opt,name=conference_tips_info,json=conferenceTipsInfo,proto3" json:"conference_tips_info,omitempty"` // conference_tips_info
	RedbagInfo         *IMMsgBody_RedBagInfo          `protobuf:"bytes,27,opt,name=redbag_info,json=redbagInfo,proto3" json:"redbag_info,omitempty"`                           // redbag_info
	LowVersionTips     *IMMsgBody_LowVersionTips      `protobuf:"bytes,28,opt,name=low_version_tips,json=lowVersionTips,proto3" json:"low_version_tips,omitempty"`             // low_version_tips
	BankcodeCtrlInfo   []byte                         `protobuf:"bytes,29,opt,name=bankcode_ctrl_info,json=bankcodeCtrlInfo,proto3" json:"bankcode_ctrl_info,omitempty"`       // bankcode_ctrl_info
	NearByMsg          *IMMsgBody_NearByMessageType   `protobuf:"bytes,30,opt,name=near_by_msg,json=nearByMsg,proto3" json:"near_by_msg,omitempty"`                            // near_by_msg
	CustomElem         *IMMsgBody_CustomElem          `protobuf:"bytes,31,opt,name=custom_elem,json=customElem,proto3" json:"custom_elem,omitempty"`                           // custom_elem
	LocationInfo       *IMMsgBody_LocationInfo        `protobuf:"bytes,32,opt,name=location_info,json=locationInfo,proto3" json:"location_info,omitempty"`                     // location_info
	PubAccInfo         *IMMsgBody_PubAccInfo          `protobuf:"bytes,33,opt,name=pub_acc_info,json=pubAccInfo,proto3" json:"pub_acc_info,omitempty"`                         // pub_acc_info
	SmallEmoji         *IMMsgBody_SmallEmoji          `protobuf:"bytes,34,opt,name=small_emoji,json=smallEmoji,proto3" json:"small_emoji,omitempty"`                           // small_emoji
	FsjMsgElem         *IMMsgBody_FSJMessageElem      `protobuf:"bytes,35,opt,name=fsj_msg_elem,json=fsjMsgElem,proto3" json:"fsj_msg_elem,omitempty"`                         // fsj_msg_elem
	ArkApp             *IMMsgBody_ArkAppElem          `protobuf:"bytes,36,opt,name=ark_app,json=arkApp,proto3" json:"ark_app,omitempty"`                                       // ark_app
	GeneralFlags       *IMMsgBody_GeneralFlags        `protobuf:"bytes,37,opt,name=general_flags,json=generalFlags,proto3" json:"general_flags,omitempty"`                     // general_flags
	HcFlashPic         *IMMsgBody_CustomFace          `protobuf:"bytes,38,opt,name=hc_flash_pic,json=hcFlashPic,proto3" json:"hc_flash_pic,omitempty"`                         // hc_flash_pic
	DeliverGiftMsg     *IMMsgBody_DeliverGiftMsg      `protobuf:"bytes,39,opt,name=deliver_gift_msg,json=deliverGiftMsg,proto3" json:"deliver_gift_msg,omitempty"`             // deliver_gift_msg
	BitappMsg          *IMMsgBody_BitAppMsg           `protobuf:"bytes,40,opt,name=bitapp_msg,json=bitappMsg,proto3" json:"bitapp_msg,omitempty"`                              // bitapp_msg
	OpenQqData         *IMMsgBody_OpenQQData          `protobuf:"bytes,41,opt,name=open_qq_data,json=openQqData,proto3" json:"open_qq_data,omitempty"`                         // open_qq_data
	ApolloMsg          *IMMsgBody_ApolloActMsg        `protobuf:"bytes,42,opt,name=apollo_msg,json=apolloMsg,proto3" json:"apollo_msg,omitempty"`                              // apollo_msg
	GroupPubAccInfo    *IMMsgBody_GroupPubAccountInfo `protobuf:"bytes,43,opt,name=group_pub_acc_info,json=groupPubAccInfo,proto3" json:"group_pub_acc_info,omitempty"`        // group_pub_acc_info
	BlessMsg           *IMMsgBody_BlessingMessage     `protobuf:"bytes,44,opt,name=bless_msg,json=blessMsg,proto3" json:"bless_msg,omitempty"`                                 // bless_msg
	SrcMsg             *IMMsgBody_SourceMsg           `protobuf:"bytes,45,opt,name=src_msg,json=srcMsg,proto3" json:"src_msg,omitempty"`                                       // src_msg
	LolaMsg            *IMMsgBody_LolaMsg             `protobuf:"bytes,46,opt,name=lola_msg,json=lolaMsg,proto3" json:"lola_msg,omitempty"`                                    // lola_msg
	GroupBusinessMsg   *IMMsgBody_GroupBusinessMsg    `protobuf:"bytes,47,opt,name=group_business_msg,json=groupBusinessMsg,proto3" json:"group_business_msg,omitempty"`       // group_business_msg
	MsgWorkflowNotify  *IMMsgBody_WorkflowNotifyMsg   `protobuf:"bytes,48,opt,name=msg_workflow_notify,json=msgWorkflowNotify,proto3" json:"msg_workflow_notify,omitempty"`    // msg_workflow_notify
	PatElem            *IMMsgBody_PatsElem            `protobuf:"bytes,49,opt,name=pat_elem,json=patElem,proto3" json:"pat_elem,omitempty"`                                    // pat_elem
	GroupPostElem      *IMMsgBody_GroupPostElem       `protobuf:"bytes,50,opt,name=group_post_elem,json=groupPostElem,proto3" json:"group_post_elem,omitempty"`                // group_post_elem
	LightApp           *IMMsgBody_LightAppElem        `protobuf:"bytes,51,opt,name=light_app,json=lightApp,proto3" json:"light_app,omitempty"`                                 // light_app
	EimInfo            *IMMsgBody_EIMInfo             `protobuf:"bytes,52,opt,name=eim_info,json=eimInfo,proto3" json:"eim_info,omitempty"`                                    // eim_info
	CommonElem         *IMMsgBody_CommonElem          `protobuf:"bytes,53,opt,name=common_elem,json=commonElem,proto3" json:"common_elem,omitempty"`                           // common_elem
}

func (x *IMMsgBody_Elem) Reset() {
	*x = IMMsgBody_Elem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_Elem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_Elem) ProtoMessage() {}

func (x *IMMsgBody_Elem) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_Elem.ProtoReflect.Descriptor instead.
func (*IMMsgBody_Elem) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 13}
}

func (x *IMMsgBody_Elem) GetText() *IMMsgBody_Text {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *IMMsgBody_Elem) GetFace() *IMMsgBody_Face {
	if x != nil {
		return x.Face
	}
	return nil
}

func (x *IMMsgBody_Elem) GetOnlineImage() *IMMsgBody_OnlineImage {
	if x != nil {
		return x.OnlineImage
	}
	return nil
}

func (x *IMMsgBody_Elem) GetNotOnlineImage() *IMMsgBody_NotOnlineImage {
	if x != nil {
		return x.NotOnlineImage
	}
	return nil
}

func (x *IMMsgBody_Elem) GetTransElemInfo() *IMMsgBody_TransElem {
	if x != nil {
		return x.TransElemInfo
	}
	return nil
}

func (x *IMMsgBody_Elem) GetMarketFace() *IMMsgBody_MarketFace {
	if x != nil {
		return x.MarketFace
	}
	return nil
}

func (x *IMMsgBody_Elem) GetElemFlags() *IMMsgBody_ElemFlags {
	if x != nil {
		return x.ElemFlags
	}
	return nil
}

func (x *IMMsgBody_Elem) GetCustomFace() *IMMsgBody_CustomFace {
	if x != nil {
		return x.CustomFace
	}
	return nil
}

func (x *IMMsgBody_Elem) GetElemFlags2() *IMMsgBody_ElemFlags2 {
	if x != nil {
		return x.ElemFlags2
	}
	return nil
}

func (x *IMMsgBody_Elem) GetFunFace() *IMMsgBody_FunFace {
	if x != nil {
		return x.FunFace
	}
	return nil
}

func (x *IMMsgBody_Elem) GetSecretFile() *IMMsgBody_SecretFileMsg {
	if x != nil {
		return x.SecretFile
	}
	return nil
}

func (x *IMMsgBody_Elem) GetRichMsg() *IMMsgBody_RichMsg {
	if x != nil {
		return x.RichMsg
	}
	return nil
}

func (x *IMMsgBody_Elem) GetGroupFile() *IMMsgBody_GroupFile {
	if x != nil {
		return x.GroupFile
	}
	return nil
}

func (x *IMMsgBody_Elem) GetPubGroup() *IMMsgBody_PubGroup {
	if x != nil {
		return x.PubGroup
	}
	return nil
}

func (x *IMMsgBody_Elem) GetMarketTrans() *IMMsgBody_MarketTrans {
	if x != nil {
		return x.MarketTrans
	}
	return nil
}

func (x *IMMsgBody_Elem) GetExtraInfo() *IMMsgBody_ExtraInfo {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

func (x *IMMsgBody_Elem) GetShakeWindow() *IMMsgBody_ShakeWindow {
	if x != nil {
		return x.ShakeWindow
	}
	return nil
}

func (x *IMMsgBody_Elem) GetPubAccount() *IMMsgBody_PubAccount {
	if x != nil {
		return x.PubAccount
	}
	return nil
}

func (x *IMMsgBody_Elem) GetVideoFile() *IMMsgBody_VideoFile {
	if x != nil {
		return x.VideoFile
	}
	return nil
}

func (x *IMMsgBody_Elem) GetTipsInfo() *IMMsgBody_TipsInfo {
	if x != nil {
		return x.TipsInfo
	}
	return nil
}

func (x *IMMsgBody_Elem) GetAnonGroupMsg() *IMMsgBody_AnonymousGroupMsg {
	if x != nil {
		return x.AnonGroupMsg
	}
	return nil
}

func (x *IMMsgBody_Elem) GetQqLiveOld() *IMMsgBody_QQLiveOld {
	if x != nil {
		return x.QqLiveOld
	}
	return nil
}

func (x *IMMsgBody_Elem) GetLifeOnline() *IMMsgBody_LifeOnlineAccount {
	if x != nil {
		return x.LifeOnline
	}
	return nil
}

func (x *IMMsgBody_Elem) GetQqwalletMsg() *IMMsgBody_QQWalletMsg {
	if x != nil {
		return x.QqwalletMsg
	}
	return nil
}

func (x *IMMsgBody_Elem) GetCrmElem() *IMMsgBody_CrmElem {
	if x != nil {
		return x.CrmElem
	}
	return nil
}

func (x *IMMsgBody_Elem) GetConferenceTipsInfo() *IMMsgBody_ConferenceTipsInfo {
	if x != nil {
		return x.ConferenceTipsInfo
	}
	return nil
}

func (x *IMMsgBody_Elem) GetRedbagInfo() *IMMsgBody_RedBagInfo {
	if x != nil {
		return x.RedbagInfo
	}
	return nil
}

func (x *IMMsgBody_Elem) GetLowVersionTips() *IMMsgBody_LowVersionTips {
	if x != nil {
		return x.LowVersionTips
	}
	return nil
}

func (x *IMMsgBody_Elem) GetBankcodeCtrlInfo() []byte {
	if x != nil {
		return x.BankcodeCtrlInfo
	}
	return nil
}

func (x *IMMsgBody_Elem) GetNearByMsg() *IMMsgBody_NearByMessageType {
	if x != nil {
		return x.NearByMsg
	}
	return nil
}

func (x *IMMsgBody_Elem) GetCustomElem() *IMMsgBody_CustomElem {
	if x != nil {
		return x.CustomElem
	}
	return nil
}

func (x *IMMsgBody_Elem) GetLocationInfo() *IMMsgBody_LocationInfo {
	if x != nil {
		return x.LocationInfo
	}
	return nil
}

func (x *IMMsgBody_Elem) GetPubAccInfo() *IMMsgBody_PubAccInfo {
	if x != nil {
		return x.PubAccInfo
	}
	return nil
}

func (x *IMMsgBody_Elem) GetSmallEmoji() *IMMsgBody_SmallEmoji {
	if x != nil {
		return x.SmallEmoji
	}
	return nil
}

func (x *IMMsgBody_Elem) GetFsjMsgElem() *IMMsgBody_FSJMessageElem {
	if x != nil {
		return x.FsjMsgElem
	}
	return nil
}

func (x *IMMsgBody_Elem) GetArkApp() *IMMsgBody_ArkAppElem {
	if x != nil {
		return x.ArkApp
	}
	return nil
}

func (x *IMMsgBody_Elem) GetGeneralFlags() *IMMsgBody_GeneralFlags {
	if x != nil {
		return x.GeneralFlags
	}
	return nil
}

func (x *IMMsgBody_Elem) GetHcFlashPic() *IMMsgBody_CustomFace {
	if x != nil {
		return x.HcFlashPic
	}
	return nil
}

func (x *IMMsgBody_Elem) GetDeliverGiftMsg() *IMMsgBody_DeliverGiftMsg {
	if x != nil {
		return x.DeliverGiftMsg
	}
	return nil
}

func (x *IMMsgBody_Elem) GetBitappMsg() *IMMsgBody_BitAppMsg {
	if x != nil {
		return x.BitappMsg
	}
	return nil
}

func (x *IMMsgBody_Elem) GetOpenQqData() *IMMsgBody_OpenQQData {
	if x != nil {
		return x.OpenQqData
	}
	return nil
}

func (x *IMMsgBody_Elem) GetApolloMsg() *IMMsgBody_ApolloActMsg {
	if x != nil {
		return x.ApolloMsg
	}
	return nil
}

func (x *IMMsgBody_Elem) GetGroupPubAccInfo() *IMMsgBody_GroupPubAccountInfo {
	if x != nil {
		return x.GroupPubAccInfo
	}
	return nil
}

func (x *IMMsgBody_Elem) GetBlessMsg() *IMMsgBody_BlessingMessage {
	if x != nil {
		return x.BlessMsg
	}
	return nil
}

func (x *IMMsgBody_Elem) GetSrcMsg() *IMMsgBody_SourceMsg {
	if x != nil {
		return x.SrcMsg
	}
	return nil
}

func (x *IMMsgBody_Elem) GetLolaMsg() *IMMsgBody_LolaMsg {
	if x != nil {
		return x.LolaMsg
	}
	return nil
}

func (x *IMMsgBody_Elem) GetGroupBusinessMsg() *IMMsgBody_GroupBusinessMsg {
	if x != nil {
		return x.GroupBusinessMsg
	}
	return nil
}

func (x *IMMsgBody_Elem) GetMsgWorkflowNotify() *IMMsgBody_WorkflowNotifyMsg {
	if x != nil {
		return x.MsgWorkflowNotify
	}
	return nil
}

func (x *IMMsgBody_Elem) GetPatElem() *IMMsgBody_PatsElem {
	if x != nil {
		return x.PatElem
	}
	return nil
}

func (x *IMMsgBody_Elem) GetGroupPostElem() *IMMsgBody_GroupPostElem {
	if x != nil {
		return x.GroupPostElem
	}
	return nil
}

func (x *IMMsgBody_Elem) GetLightApp() *IMMsgBody_LightAppElem {
	if x != nil {
		return x.LightApp
	}
	return nil
}

func (x *IMMsgBody_Elem) GetEimInfo() *IMMsgBody_EIMInfo {
	if x != nil {
		return x.EimInfo
	}
	return nil
}

func (x *IMMsgBody_Elem) GetCommonElem() *IMMsgBody_CommonElem {
	if x != nil {
		return x.CommonElem
	}
	return nil
}

// ElemFlags is the message type for the ElemFlags.
type IMMsgBody_ElemFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags1       []byte `protobuf:"bytes,1,opt,name=flags1,proto3" json:"flags1,omitempty"`                                 // bytes_flags1
	BusinessData []byte `protobuf:"bytes,2,opt,name=business_data,json=businessData,proto3" json:"business_data,omitempty"` // bytes_business_data
}

func (x *IMMsgBody_ElemFlags) Reset() {
	*x = IMMsgBody_ElemFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_ElemFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_ElemFlags) ProtoMessage() {}

func (x *IMMsgBody_ElemFlags) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_ElemFlags.ProtoReflect.Descriptor instead.
func (*IMMsgBody_ElemFlags) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 14}
}

func (x *IMMsgBody_ElemFlags) GetFlags1() []byte {
	if x != nil {
		return x.Flags1
	}
	return nil
}

func (x *IMMsgBody_ElemFlags) GetBusinessData() []byte {
	if x != nil {
		return x.BusinessData
	}
	return nil
}

// ElemFlags2 is the message type for the ElemFlags2.
type IMMsgBody_ElemFlags2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColorTextId      uint32                       `protobuf:"varint,1,opt,name=color_text_id,json=colorTextId,proto3" json:"color_text_id,omitempty"`                // uint32_color_text_id
	MsgId            uint64                       `protobuf:"varint,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`                                    // uint64_msg_id
	WhisperSessionId uint32                       `protobuf:"varint,3,opt,name=whisper_session_id,json=whisperSessionId,proto3" json:"whisper_session_id,omitempty"` // uint32_whisper_session_id
	PttChangeBit     uint32                       `protobuf:"varint,4,opt,name=ptt_change_bit,json=pttChangeBit,proto3" json:"ptt_change_bit,omitempty"`             // uint32_ptt_change_bit
	VipStatus        uint32                       `protobuf:"varint,5,opt,name=vip_status,json=vipStatus,proto3" json:"vip_status,omitempty"`                        // uint32_vip_status
	CompatibleId     uint32                       `protobuf:"varint,6,opt,name=compatible_id,json=compatibleId,proto3" json:"compatible_id,omitempty"`               // uint32_compatible_id
	Insts            []*IMMsgBody_ElemFlags2_Inst `protobuf:"bytes,7,rep,name=insts,proto3" json:"insts,omitempty"`                                                  // rpt_insts
	MsgRptCnt        uint32                       `protobuf:"varint,8,opt,name=msg_rpt_cnt,json=msgRptCnt,proto3" json:"msg_rpt_cnt,omitempty"`                      // uint32_msg_rpt_cnt
	SrcInst          *IMMsgBody_ElemFlags2_Inst   `protobuf:"bytes,9,opt,name=src_inst,json=srcInst,proto3" json:"src_inst,omitempty"`                               // src_inst
	Longtitude       uint32                       `protobuf:"varint,10,opt,name=longtitude,proto3" json:"longtitude,omitempty"`                                      // uint32_longtitude
	Latitude         uint32                       `protobuf:"varint,11,opt,name=latitude,proto3" json:"latitude,omitempty"`                                          // uint32_latitude
	CustomFont       uint32                       `protobuf:"varint,12,opt,name=custom_font,json=customFont,proto3" json:"custom_font,omitempty"`                    // uint32_custom_font
	PcSupportDef     *IMMsgBody_PcSupportDef      `protobuf:"bytes,13,opt,name=pc_support_def,json=pcSupportDef,proto3" json:"pc_support_def,omitempty"`             // pc_support_def
	CrmFlags         uint32                       `protobuf:"varint,14,opt,name=crm_flags,json=crmFlags,proto3" json:"crm_flags,omitempty"`                          // uint32_crm_flags
}

func (x *IMMsgBody_ElemFlags2) Reset() {
	*x = IMMsgBody_ElemFlags2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_ElemFlags2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_ElemFlags2) ProtoMessage() {}

func (x *IMMsgBody_ElemFlags2) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_ElemFlags2.ProtoReflect.Descriptor instead.
func (*IMMsgBody_ElemFlags2) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 15}
}

func (x *IMMsgBody_ElemFlags2) GetColorTextId() uint32 {
	if x != nil {
		return x.ColorTextId
	}
	return 0
}

func (x *IMMsgBody_ElemFlags2) GetMsgId() uint64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *IMMsgBody_ElemFlags2) GetWhisperSessionId() uint32 {
	if x != nil {
		return x.WhisperSessionId
	}
	return 0
}

func (x *IMMsgBody_ElemFlags2) GetPttChangeBit() uint32 {
	if x != nil {
		return x.PttChangeBit
	}
	return 0
}

func (x *IMMsgBody_ElemFlags2) GetVipStatus() uint32 {
	if x != nil {
		return x.VipStatus
	}
	return 0
}

func (x *IMMsgBody_ElemFlags2) GetCompatibleId() uint32 {
	if x != nil {
		return x.CompatibleId
	}
	return 0
}

func (x *IMMsgBody_ElemFlags2) GetInsts() []*IMMsgBody_ElemFlags2_Inst {
	if x != nil {
		return x.Insts
	}
	return nil
}

func (x *IMMsgBody_ElemFlags2) GetMsgRptCnt() uint32 {
	if x != nil {
		return x.MsgRptCnt
	}
	return 0
}

func (x *IMMsgBody_ElemFlags2) GetSrcInst() *IMMsgBody_ElemFlags2_Inst {
	if x != nil {
		return x.SrcInst
	}
	return nil
}

func (x *IMMsgBody_ElemFlags2) GetLongtitude() uint32 {
	if x != nil {
		return x.Longtitude
	}
	return 0
}

func (x *IMMsgBody_ElemFlags2) GetLatitude() uint32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *IMMsgBody_ElemFlags2) GetCustomFont() uint32 {
	if x != nil {
		return x.CustomFont
	}
	return 0
}

func (x *IMMsgBody_ElemFlags2) GetPcSupportDef() *IMMsgBody_PcSupportDef {
	if x != nil {
		return x.PcSupportDef
	}
	return nil
}

func (x *IMMsgBody_ElemFlags2) GetCrmFlags() uint32 {
	if x != nil {
		return x.CrmFlags
	}
	return 0
}

// ExtraInfo is the message type for the ExtraInfo.
type IMMsgBody_ExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nick          []byte `protobuf:"bytes,1,opt,name=nick,proto3" json:"nick,omitempty"`                                            // bytes_nick
	GroupCard     []byte `protobuf:"bytes,2,opt,name=group_card,json=groupCard,proto3" json:"group_card,omitempty"`                 // bytes_group_card
	Level         uint32 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`                                         // uint32_level
	Flags         uint32 `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`                                         // uint32_flags
	GroupMask     uint32 `protobuf:"varint,5,opt,name=group_mask,json=groupMask,proto3" json:"group_mask,omitempty"`                // uint32_group_mask
	MsgTailId     uint32 `protobuf:"varint,6,opt,name=msg_tail_id,json=msgTailId,proto3" json:"msg_tail_id,omitempty"`              // uint32_msg_tail_id
	SenderTitle   []byte `protobuf:"bytes,7,opt,name=sender_title,json=senderTitle,proto3" json:"sender_title,omitempty"`           // bytes_sender_title
	ApnsTips      []byte `protobuf:"bytes,8,opt,name=apns_tips,json=apnsTips,proto3" json:"apns_tips,omitempty"`                    // bytes_apns_tips
	Uin           uint64 `protobuf:"varint,9,opt,name=uin,proto3" json:"uin,omitempty"`                                             // uint64_uin
	MsgStateFlag  uint32 `protobuf:"varint,10,opt,name=msg_state_flag,json=msgStateFlag,proto3" json:"msg_state_flag,omitempty"`    // uint32_msg_state_flag
	ApnsSoundType uint32 `protobuf:"varint,11,opt,name=apns_sound_type,json=apnsSoundType,proto3" json:"apns_sound_type,omitempty"` // uint32_apns_sound_type
	NewGroupFlag  uint32 `protobuf:"varint,12,opt,name=new_group_flag,json=newGroupFlag,proto3" json:"new_group_flag,omitempty"`    // uint32_new_group_flag
}

func (x *IMMsgBody_ExtraInfo) Reset() {
	*x = IMMsgBody_ExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_ExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_ExtraInfo) ProtoMessage() {}

func (x *IMMsgBody_ExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_ExtraInfo.ProtoReflect.Descriptor instead.
func (*IMMsgBody_ExtraInfo) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 16}
}

func (x *IMMsgBody_ExtraInfo) GetNick() []byte {
	if x != nil {
		return x.Nick
	}
	return nil
}

func (x *IMMsgBody_ExtraInfo) GetGroupCard() []byte {
	if x != nil {
		return x.GroupCard
	}
	return nil
}

func (x *IMMsgBody_ExtraInfo) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *IMMsgBody_ExtraInfo) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *IMMsgBody_ExtraInfo) GetGroupMask() uint32 {
	if x != nil {
		return x.GroupMask
	}
	return 0
}

func (x *IMMsgBody_ExtraInfo) GetMsgTailId() uint32 {
	if x != nil {
		return x.MsgTailId
	}
	return 0
}

func (x *IMMsgBody_ExtraInfo) GetSenderTitle() []byte {
	if x != nil {
		return x.SenderTitle
	}
	return nil
}

func (x *IMMsgBody_ExtraInfo) GetApnsTips() []byte {
	if x != nil {
		return x.ApnsTips
	}
	return nil
}

func (x *IMMsgBody_ExtraInfo) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *IMMsgBody_ExtraInfo) GetMsgStateFlag() uint32 {
	if x != nil {
		return x.MsgStateFlag
	}
	return 0
}

func (x *IMMsgBody_ExtraInfo) GetApnsSoundType() uint32 {
	if x != nil {
		return x.ApnsSoundType
	}
	return 0
}

func (x *IMMsgBody_ExtraInfo) GetNewGroupFlag() uint32 {
	if x != nil {
		return x.NewGroupFlag
	}
	return 0
}

// FSJMessageElem is the message type for the FSJMessageElem.
type IMMsgBody_FSJMessageElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgType uint32 `protobuf:"varint,1,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"` // uint32_msg_type
}

func (x *IMMsgBody_FSJMessageElem) Reset() {
	*x = IMMsgBody_FSJMessageElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_FSJMessageElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_FSJMessageElem) ProtoMessage() {}

func (x *IMMsgBody_FSJMessageElem) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_FSJMessageElem.ProtoReflect.Descriptor instead.
func (*IMMsgBody_FSJMessageElem) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 17}
}

func (x *IMMsgBody_FSJMessageElem) GetMsgType() uint32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

// Face is the message type for the Face.
type IMMsgBody_Face struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"` // index
	Old   []byte `protobuf:"bytes,2,opt,name=old,proto3" json:"old,omitempty"`      // old
	Buf   []byte `protobuf:"bytes,11,opt,name=buf,proto3" json:"buf,omitempty"`     // buf
}

func (x *IMMsgBody_Face) Reset() {
	*x = IMMsgBody_Face{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_Face) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_Face) ProtoMessage() {}

func (x *IMMsgBody_Face) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_Face.ProtoReflect.Descriptor instead.
func (*IMMsgBody_Face) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 18}
}

func (x *IMMsgBody_Face) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *IMMsgBody_Face) GetOld() []byte {
	if x != nil {
		return x.Old
	}
	return nil
}

func (x *IMMsgBody_Face) GetBuf() []byte {
	if x != nil {
		return x.Buf
	}
	return nil
}

// FunFace is the message type for the FunFace.
type IMMsgBody_FunFace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgTurntable *IMMsgBody_FunFace_Turntable `protobuf:"bytes,1,opt,name=msg_turntable,json=msgTurntable,proto3" json:"msg_turntable,omitempty"` // msg_turntable
	MsgBomb      *IMMsgBody_FunFace_Bomb      `protobuf:"bytes,2,opt,name=msg_bomb,json=msgBomb,proto3" json:"msg_bomb,omitempty"`                // msg_bomb
}

func (x *IMMsgBody_FunFace) Reset() {
	*x = IMMsgBody_FunFace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_FunFace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_FunFace) ProtoMessage() {}

func (x *IMMsgBody_FunFace) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_FunFace.ProtoReflect.Descriptor instead.
func (*IMMsgBody_FunFace) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 19}
}

func (x *IMMsgBody_FunFace) GetMsgTurntable() *IMMsgBody_FunFace_Turntable {
	if x != nil {
		return x.MsgTurntable
	}
	return nil
}

func (x *IMMsgBody_FunFace) GetMsgBomb() *IMMsgBody_FunFace_Bomb {
	if x != nil {
		return x.MsgBomb
	}
	return nil
}

// GeneralFlags is the message type for the GeneralFlags.
type IMMsgBody_GeneralFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BubbleDiyTextId     uint32 `protobuf:"varint,1,opt,name=bubble_diy_text_id,json=bubbleDiyTextId,proto3" json:"bubble_diy_text_id,omitempty"`             // uint32_bubble_diy_text_id
	GroupFlagNew        uint32 `protobuf:"varint,2,opt,name=group_flag_new,json=groupFlagNew,proto3" json:"group_flag_new,omitempty"`                        // uint32_group_flag_new
	Uin                 uint64 `protobuf:"varint,3,opt,name=uin,proto3" json:"uin,omitempty"`                                                                // uint64_uin
	RpId                []byte `protobuf:"bytes,4,opt,name=rp_id,json=rpId,proto3" json:"rp_id,omitempty"`                                                   // bytes_rp_id
	PrpFold             uint32 `protobuf:"varint,5,opt,name=prp_fold,json=prpFold,proto3" json:"prp_fold,omitempty"`                                         // uint32_prp_fold
	LongTextFlag        uint32 `protobuf:"varint,6,opt,name=long_text_flag,json=longTextFlag,proto3" json:"long_text_flag,omitempty"`                        // long_text_flag
	LongTextResid       []byte `protobuf:"bytes,7,opt,name=long_text_resid,json=longTextResid,proto3" json:"long_text_resid,omitempty"`                      // long_text_resid
	GroupType           uint32 `protobuf:"varint,8,opt,name=group_type,json=groupType,proto3" json:"group_type,omitempty"`                                   // uint32_group_type
	ToUinFlag           uint32 `protobuf:"varint,9,opt,name=to_uin_flag,json=toUinFlag,proto3" json:"to_uin_flag,omitempty"`                                 // uint32_to_uin_flag
	GlamourLevel        uint32 `protobuf:"varint,10,opt,name=glamour_level,json=glamourLevel,proto3" json:"glamour_level,omitempty"`                         // uint32_glamour_level
	MemberLevel         uint32 `protobuf:"varint,11,opt,name=member_level,json=memberLevel,proto3" json:"member_level,omitempty"`                            // uint32_member_level
	GroupRankSeq        uint64 `protobuf:"varint,12,opt,name=group_rank_seq,json=groupRankSeq,proto3" json:"group_rank_seq,omitempty"`                       // uint64_group_rank_seq
	OlympicTorch        uint32 `protobuf:"varint,13,opt,name=olympic_torch,json=olympicTorch,proto3" json:"olympic_torch,omitempty"`                         // uint32_olympic_torch
	BabyqGuideMsgCookie []byte `protobuf:"bytes,14,opt,name=babyq_guide_msg_cookie,json=babyqGuideMsgCookie,proto3" json:"babyq_guide_msg_cookie,omitempty"` // babyq_guide_msg_cookie
	Uin32ExpertFlag     uint32 `protobuf:"varint,15,opt,name=uin32_expert_flag,json=uin32ExpertFlag,proto3" json:"uin32_expert_flag,omitempty"`              // uin32_expert_flag
	BubbleSubId         uint32 `protobuf:"varint,16,opt,name=bubble_sub_id,json=bubbleSubId,proto3" json:"bubble_sub_id,omitempty"`                          // uint32_bubble_sub_id
	PendantId           uint64 `protobuf:"varint,17,opt,name=pendant_id,json=pendantId,proto3" json:"pendant_id,omitempty"`                                  // uint64_pendant_id
	RpIndex             []byte `protobuf:"bytes,18,opt,name=rp_index,json=rpIndex,proto3" json:"rp_index,omitempty"`                                         // bytes_rp_index
	PbReserve           []byte `protobuf:"bytes,19,opt,name=pb_reserve,json=pbReserve,proto3" json:"pb_reserve,omitempty"`                                   // bytes_pb_reserve
}

func (x *IMMsgBody_GeneralFlags) Reset() {
	*x = IMMsgBody_GeneralFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_GeneralFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_GeneralFlags) ProtoMessage() {}

func (x *IMMsgBody_GeneralFlags) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_GeneralFlags.ProtoReflect.Descriptor instead.
func (*IMMsgBody_GeneralFlags) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 20}
}

func (x *IMMsgBody_GeneralFlags) GetBubbleDiyTextId() uint32 {
	if x != nil {
		return x.BubbleDiyTextId
	}
	return 0
}

func (x *IMMsgBody_GeneralFlags) GetGroupFlagNew() uint32 {
	if x != nil {
		return x.GroupFlagNew
	}
	return 0
}

func (x *IMMsgBody_GeneralFlags) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *IMMsgBody_GeneralFlags) GetRpId() []byte {
	if x != nil {
		return x.RpId
	}
	return nil
}

func (x *IMMsgBody_GeneralFlags) GetPrpFold() uint32 {
	if x != nil {
		return x.PrpFold
	}
	return 0
}

func (x *IMMsgBody_GeneralFlags) GetLongTextFlag() uint32 {
	if x != nil {
		return x.LongTextFlag
	}
	return 0
}

func (x *IMMsgBody_GeneralFlags) GetLongTextResid() []byte {
	if x != nil {
		return x.LongTextResid
	}
	return nil
}

func (x *IMMsgBody_GeneralFlags) GetGroupType() uint32 {
	if x != nil {
		return x.GroupType
	}
	return 0
}

func (x *IMMsgBody_GeneralFlags) GetToUinFlag() uint32 {
	if x != nil {
		return x.ToUinFlag
	}
	return 0
}

func (x *IMMsgBody_GeneralFlags) GetGlamourLevel() uint32 {
	if x != nil {
		return x.GlamourLevel
	}
	return 0
}

func (x *IMMsgBody_GeneralFlags) GetMemberLevel() uint32 {
	if x != nil {
		return x.MemberLevel
	}
	return 0
}

func (x *IMMsgBody_GeneralFlags) GetGroupRankSeq() uint64 {
	if x != nil {
		return x.GroupRankSeq
	}
	return 0
}

func (x *IMMsgBody_GeneralFlags) GetOlympicTorch() uint32 {
	if x != nil {
		return x.OlympicTorch
	}
	return 0
}

func (x *IMMsgBody_GeneralFlags) GetBabyqGuideMsgCookie() []byte {
	if x != nil {
		return x.BabyqGuideMsgCookie
	}
	return nil
}

func (x *IMMsgBody_GeneralFlags) GetUin32ExpertFlag() uint32 {
	if x != nil {
		return x.Uin32ExpertFlag
	}
	return 0
}

func (x *IMMsgBody_GeneralFlags) GetBubbleSubId() uint32 {
	if x != nil {
		return x.BubbleSubId
	}
	return 0
}

func (x *IMMsgBody_GeneralFlags) GetPendantId() uint64 {
	if x != nil {
		return x.PendantId
	}
	return 0
}

func (x *IMMsgBody_GeneralFlags) GetRpIndex() []byte {
	if x != nil {
		return x.RpIndex
	}
	return nil
}

func (x *IMMsgBody_GeneralFlags) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

// GroupBusinessMsg is the message type for the GroupBusinessMsg.
type IMMsgBody_GroupBusinessMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags       uint32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`                               // uint32_flags
	HeadUrl     []byte `protobuf:"bytes,2,opt,name=head_url,json=headUrl,proto3" json:"head_url,omitempty"`             // bytes_head_url
	HeadClkUrl  []byte `protobuf:"bytes,3,opt,name=head_clk_url,json=headClkUrl,proto3" json:"head_clk_url,omitempty"`  // bytes_head_clk_url
	Nick        []byte `protobuf:"bytes,4,opt,name=nick,proto3" json:"nick,omitempty"`                                  // bytes_nick
	NickColor   []byte `protobuf:"bytes,5,opt,name=nick_color,json=nickColor,proto3" json:"nick_color,omitempty"`       // bytes_nick_color
	Rank        []byte `protobuf:"bytes,6,opt,name=rank,proto3" json:"rank,omitempty"`                                  // bytes_rank
	RankColor   []byte `protobuf:"bytes,7,opt,name=rank_color,json=rankColor,proto3" json:"rank_color,omitempty"`       // bytes_rank_color
	RankBgcolor []byte `protobuf:"bytes,8,opt,name=rank_bgcolor,json=rankBgcolor,proto3" json:"rank_bgcolor,omitempty"` // bytes_rank_bgcolor
}

func (x *IMMsgBody_GroupBusinessMsg) Reset() {
	*x = IMMsgBody_GroupBusinessMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_GroupBusinessMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_GroupBusinessMsg) ProtoMessage() {}

func (x *IMMsgBody_GroupBusinessMsg) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_GroupBusinessMsg.ProtoReflect.Descriptor instead.
func (*IMMsgBody_GroupBusinessMsg) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 21}
}

func (x *IMMsgBody_GroupBusinessMsg) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *IMMsgBody_GroupBusinessMsg) GetHeadUrl() []byte {
	if x != nil {
		return x.HeadUrl
	}
	return nil
}

func (x *IMMsgBody_GroupBusinessMsg) GetHeadClkUrl() []byte {
	if x != nil {
		return x.HeadClkUrl
	}
	return nil
}

func (x *IMMsgBody_GroupBusinessMsg) GetNick() []byte {
	if x != nil {
		return x.Nick
	}
	return nil
}

func (x *IMMsgBody_GroupBusinessMsg) GetNickColor() []byte {
	if x != nil {
		return x.NickColor
	}
	return nil
}

func (x *IMMsgBody_GroupBusinessMsg) GetRank() []byte {
	if x != nil {
		return x.Rank
	}
	return nil
}

func (x *IMMsgBody_GroupBusinessMsg) GetRankColor() []byte {
	if x != nil {
		return x.RankColor
	}
	return nil
}

func (x *IMMsgBody_GroupBusinessMsg) GetRankBgcolor() []byte {
	if x != nil {
		return x.RankBgcolor
	}
	return nil
}

// GroupFile is the message type for the GroupFile.
type IMMsgBody_GroupFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename    []byte `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                             // bytes_filename
	FileSize    uint64 `protobuf:"varint,2,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`            // uint64_file_size
	FileId      []byte `protobuf:"bytes,3,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`                   // bytes_file_id
	BatchId     []byte `protobuf:"bytes,4,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`                // bytes_batch_id
	FileKey     []byte `protobuf:"bytes,5,opt,name=file_key,json=fileKey,proto3" json:"file_key,omitempty"`                // bytes_file_key
	Mark        []byte `protobuf:"bytes,6,opt,name=mark,proto3" json:"mark,omitempty"`                                     // bytes_mark
	Sequence    uint64 `protobuf:"varint,7,opt,name=sequence,proto3" json:"sequence,omitempty"`                            // uint64_sequence
	BatchItemId []byte `protobuf:"bytes,8,opt,name=batch_item_id,json=batchItemId,proto3" json:"batch_item_id,omitempty"`  // bytes_batch_item_id
	FeedMsgTime uint32 `protobuf:"varint,9,opt,name=feed_msg_time,json=feedMsgTime,proto3" json:"feed_msg_time,omitempty"` // uint32_feed_msg_time
	PbReserve   []byte `protobuf:"bytes,10,opt,name=pb_reserve,json=pbReserve,proto3" json:"pb_reserve,omitempty"`         // bytes_pb_reserve
}

func (x *IMMsgBody_GroupFile) Reset() {
	*x = IMMsgBody_GroupFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_GroupFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_GroupFile) ProtoMessage() {}

func (x *IMMsgBody_GroupFile) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_GroupFile.ProtoReflect.Descriptor instead.
func (*IMMsgBody_GroupFile) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 22}
}

func (x *IMMsgBody_GroupFile) GetFilename() []byte {
	if x != nil {
		return x.Filename
	}
	return nil
}

func (x *IMMsgBody_GroupFile) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *IMMsgBody_GroupFile) GetFileId() []byte {
	if x != nil {
		return x.FileId
	}
	return nil
}

func (x *IMMsgBody_GroupFile) GetBatchId() []byte {
	if x != nil {
		return x.BatchId
	}
	return nil
}

func (x *IMMsgBody_GroupFile) GetFileKey() []byte {
	if x != nil {
		return x.FileKey
	}
	return nil
}

func (x *IMMsgBody_GroupFile) GetMark() []byte {
	if x != nil {
		return x.Mark
	}
	return nil
}

func (x *IMMsgBody_GroupFile) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *IMMsgBody_GroupFile) GetBatchItemId() []byte {
	if x != nil {
		return x.BatchItemId
	}
	return nil
}

func (x *IMMsgBody_GroupFile) GetFeedMsgTime() uint32 {
	if x != nil {
		return x.FeedMsgTime
	}
	return 0
}

func (x *IMMsgBody_GroupFile) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

// GroupPostElem is the message type for the GroupPostElem.
type IMMsgBody_GroupPostElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransType uint32 `protobuf:"varint,1,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"` // uint32_trans_type
	TransMsg  []byte `protobuf:"bytes,2,opt,name=trans_msg,json=transMsg,proto3" json:"trans_msg,omitempty"`     // bytes_trans_msg
}

func (x *IMMsgBody_GroupPostElem) Reset() {
	*x = IMMsgBody_GroupPostElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_GroupPostElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_GroupPostElem) ProtoMessage() {}

func (x *IMMsgBody_GroupPostElem) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_GroupPostElem.ProtoReflect.Descriptor instead.
func (*IMMsgBody_GroupPostElem) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 23}
}

func (x *IMMsgBody_GroupPostElem) GetTransType() uint32 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *IMMsgBody_GroupPostElem) GetTransMsg() []byte {
	if x != nil {
		return x.TransMsg
	}
	return nil
}

// GroupPubAccountInfo is the message type for the GroupPubAccountInfo.
type IMMsgBody_GroupPubAccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubAccount uint64 `protobuf:"varint,1,opt,name=pub_account,json=pubAccount,proto3" json:"pub_account,omitempty"` // uint64_pub_account
}

func (x *IMMsgBody_GroupPubAccountInfo) Reset() {
	*x = IMMsgBody_GroupPubAccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_GroupPubAccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_GroupPubAccountInfo) ProtoMessage() {}

func (x *IMMsgBody_GroupPubAccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_GroupPubAccountInfo.ProtoReflect.Descriptor instead.
func (*IMMsgBody_GroupPubAccountInfo) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 24}
}

func (x *IMMsgBody_GroupPubAccountInfo) GetPubAccount() uint64 {
	if x != nil {
		return x.PubAccount
	}
	return 0
}

// LifeOnlineAccount is the message type for the LifeOnlineAccount.
type IMMsgBody_LifeOnlineAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueId   uint64 `protobuf:"varint,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`        // uint64_unique_id
	Op         uint32 `protobuf:"varint,2,opt,name=op,proto3" json:"op,omitempty"`                                    // uint32_op
	ShowTime   uint32 `protobuf:"varint,3,opt,name=show_time,json=showTime,proto3" json:"show_time,omitempty"`        // uint32_show_time
	Report     uint32 `protobuf:"varint,4,opt,name=report,proto3" json:"report,omitempty"`                            // uint32_report
	Ack        uint32 `protobuf:"varint,5,opt,name=ack,proto3" json:"ack,omitempty"`                                  // uint32_ack
	Bitmap     uint64 `protobuf:"varint,6,opt,name=bitmap,proto3" json:"bitmap,omitempty"`                            // uint64_bitmap
	GdtImpData []byte `protobuf:"bytes,7,opt,name=gdt_imp_data,json=gdtImpData,proto3" json:"gdt_imp_data,omitempty"` // gdt_imp_data
	GdtCliData []byte `protobuf:"bytes,8,opt,name=gdt_cli_data,json=gdtCliData,proto3" json:"gdt_cli_data,omitempty"` // gdt_cli_data
	ViewId     []byte `protobuf:"bytes,9,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`               // view_id
}

func (x *IMMsgBody_LifeOnlineAccount) Reset() {
	*x = IMMsgBody_LifeOnlineAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_LifeOnlineAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_LifeOnlineAccount) ProtoMessage() {}

func (x *IMMsgBody_LifeOnlineAccount) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_LifeOnlineAccount.ProtoReflect.Descriptor instead.
func (*IMMsgBody_LifeOnlineAccount) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 25}
}

func (x *IMMsgBody_LifeOnlineAccount) GetUniqueId() uint64 {
	if x != nil {
		return x.UniqueId
	}
	return 0
}

func (x *IMMsgBody_LifeOnlineAccount) GetOp() uint32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *IMMsgBody_LifeOnlineAccount) GetShowTime() uint32 {
	if x != nil {
		return x.ShowTime
	}
	return 0
}

func (x *IMMsgBody_LifeOnlineAccount) GetReport() uint32 {
	if x != nil {
		return x.Report
	}
	return 0
}

func (x *IMMsgBody_LifeOnlineAccount) GetAck() uint32 {
	if x != nil {
		return x.Ack
	}
	return 0
}

func (x *IMMsgBody_LifeOnlineAccount) GetBitmap() uint64 {
	if x != nil {
		return x.Bitmap
	}
	return 0
}

func (x *IMMsgBody_LifeOnlineAccount) GetGdtImpData() []byte {
	if x != nil {
		return x.GdtImpData
	}
	return nil
}

func (x *IMMsgBody_LifeOnlineAccount) GetGdtCliData() []byte {
	if x != nil {
		return x.GdtCliData
	}
	return nil
}

func (x *IMMsgBody_LifeOnlineAccount) GetViewId() []byte {
	if x != nil {
		return x.ViewId
	}
	return nil
}

// LightAppElem is the message type for the LightAppElem.
type IMMsgBody_LightAppElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`                         // bytes_data
	MsgResid []byte `protobuf:"bytes,2,opt,name=msg_resid,json=msgResid,proto3" json:"msg_resid,omitempty"` // bytes_msg_resid
}

func (x *IMMsgBody_LightAppElem) Reset() {
	*x = IMMsgBody_LightAppElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_LightAppElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_LightAppElem) ProtoMessage() {}

func (x *IMMsgBody_LightAppElem) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_LightAppElem.ProtoReflect.Descriptor instead.
func (*IMMsgBody_LightAppElem) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 26}
}

func (x *IMMsgBody_LightAppElem) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *IMMsgBody_LightAppElem) GetMsgResid() []byte {
	if x != nil {
		return x.MsgResid
	}
	return nil
}

// LolaMsg is the message type for the LolaMsg.
type IMMsgBody_LolaMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgResid      []byte `protobuf:"bytes,1,opt,name=msg_resid,json=msgResid,proto3" json:"msg_resid,omitempty"`                // bytes_msg_resid
	EncodeContent []byte `protobuf:"bytes,2,opt,name=encode_content,json=encodeContent,proto3" json:"encode_content,omitempty"` // bytes_encode_content
	LongMsgUrl    []byte `protobuf:"bytes,3,opt,name=long_msg_url,json=longMsgUrl,proto3" json:"long_msg_url,omitempty"`        // bytes_long_msg_url
	DownloadKey   []byte `protobuf:"bytes,4,opt,name=download_key,json=downloadKey,proto3" json:"download_key,omitempty"`       // bytes_download_key
}

func (x *IMMsgBody_LolaMsg) Reset() {
	*x = IMMsgBody_LolaMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_LolaMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_LolaMsg) ProtoMessage() {}

func (x *IMMsgBody_LolaMsg) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_LolaMsg.ProtoReflect.Descriptor instead.
func (*IMMsgBody_LolaMsg) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 27}
}

func (x *IMMsgBody_LolaMsg) GetMsgResid() []byte {
	if x != nil {
		return x.MsgResid
	}
	return nil
}

func (x *IMMsgBody_LolaMsg) GetEncodeContent() []byte {
	if x != nil {
		return x.EncodeContent
	}
	return nil
}

func (x *IMMsgBody_LolaMsg) GetLongMsgUrl() []byte {
	if x != nil {
		return x.LongMsgUrl
	}
	return nil
}

func (x *IMMsgBody_LolaMsg) GetDownloadKey() []byte {
	if x != nil {
		return x.DownloadKey
	}
	return nil
}

// LowVersionTips is the message type for the LowVersionTips.
type IMMsgBody_LowVersionTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessId  uint32 `protobuf:"varint,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`    // uint32_business_id
	SessionType uint32 `protobuf:"varint,2,opt,name=session_type,json=sessionType,proto3" json:"session_type,omitempty"` // uint32_session_type
	SessionUin  uint64 `protobuf:"varint,3,opt,name=session_uin,json=sessionUin,proto3" json:"session_uin,omitempty"`    // uint64_session_uin
	SenderUin   uint64 `protobuf:"varint,4,opt,name=sender_uin,json=senderUin,proto3" json:"sender_uin,omitempty"`       // uint64_sender_uin
	Text        string `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`                                   // str_text
}

func (x *IMMsgBody_LowVersionTips) Reset() {
	*x = IMMsgBody_LowVersionTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_LowVersionTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_LowVersionTips) ProtoMessage() {}

func (x *IMMsgBody_LowVersionTips) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_LowVersionTips.ProtoReflect.Descriptor instead.
func (*IMMsgBody_LowVersionTips) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 28}
}

func (x *IMMsgBody_LowVersionTips) GetBusinessId() uint32 {
	if x != nil {
		return x.BusinessId
	}
	return 0
}

func (x *IMMsgBody_LowVersionTips) GetSessionType() uint32 {
	if x != nil {
		return x.SessionType
	}
	return 0
}

func (x *IMMsgBody_LowVersionTips) GetSessionUin() uint64 {
	if x != nil {
		return x.SessionUin
	}
	return 0
}

func (x *IMMsgBody_LowVersionTips) GetSenderUin() uint64 {
	if x != nil {
		return x.SenderUin
	}
	return 0
}

func (x *IMMsgBody_LowVersionTips) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// MarketFace is the message type for the MarketFace.
type IMMsgBody_MarketFace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaceName    []byte `protobuf:"bytes,1,opt,name=face_name,json=faceName,proto3" json:"face_name,omitempty"`            // bytes_face_name
	ItemType    uint32 `protobuf:"varint,2,opt,name=item_type,json=itemType,proto3" json:"item_type,omitempty"`           // uint32_item_type
	FaceInfo    uint32 `protobuf:"varint,3,opt,name=face_info,json=faceInfo,proto3" json:"face_info,omitempty"`           // uint32_face_info
	FaceId      []byte `protobuf:"bytes,4,opt,name=face_id,json=faceId,proto3" json:"face_id,omitempty"`                  // bytes_face_id
	TabId       uint32 `protobuf:"varint,5,opt,name=tab_id,json=tabId,proto3" json:"tab_id,omitempty"`                    // uint32_tab_id
	SubType     uint32 `protobuf:"varint,6,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`              // uint32_sub_type
	Key         []byte `protobuf:"bytes,7,opt,name=key,proto3" json:"key,omitempty"`                                      // bytes_key
	Param       []byte `protobuf:"bytes,8,opt,name=param,proto3" json:"param,omitempty"`                                  // bytes_param
	MediaType   uint32 `protobuf:"varint,9,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`        // uint32_media_type
	ImageWidth  uint32 `protobuf:"varint,10,opt,name=image_width,json=imageWidth,proto3" json:"image_width,omitempty"`    // uint32_image_width
	ImageHeight uint32 `protobuf:"varint,11,opt,name=image_height,json=imageHeight,proto3" json:"image_height,omitempty"` // uint32_image_height
	Mobileparam []byte `protobuf:"bytes,12,opt,name=mobileparam,proto3" json:"mobileparam,omitempty"`                     // bytes_mobileparam
	PbReserve   []byte `protobuf:"bytes,13,opt,name=pb_reserve,json=pbReserve,proto3" json:"pb_reserve,omitempty"`        // bytes_pb_reserve
}

func (x *IMMsgBody_MarketFace) Reset() {
	*x = IMMsgBody_MarketFace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_MarketFace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_MarketFace) ProtoMessage() {}

func (x *IMMsgBody_MarketFace) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_MarketFace.ProtoReflect.Descriptor instead.
func (*IMMsgBody_MarketFace) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 29}
}

func (x *IMMsgBody_MarketFace) GetFaceName() []byte {
	if x != nil {
		return x.FaceName
	}
	return nil
}

func (x *IMMsgBody_MarketFace) GetItemType() uint32 {
	if x != nil {
		return x.ItemType
	}
	return 0
}

func (x *IMMsgBody_MarketFace) GetFaceInfo() uint32 {
	if x != nil {
		return x.FaceInfo
	}
	return 0
}

func (x *IMMsgBody_MarketFace) GetFaceId() []byte {
	if x != nil {
		return x.FaceId
	}
	return nil
}

func (x *IMMsgBody_MarketFace) GetTabId() uint32 {
	if x != nil {
		return x.TabId
	}
	return 0
}

func (x *IMMsgBody_MarketFace) GetSubType() uint32 {
	if x != nil {
		return x.SubType
	}
	return 0
}

func (x *IMMsgBody_MarketFace) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *IMMsgBody_MarketFace) GetParam() []byte {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *IMMsgBody_MarketFace) GetMediaType() uint32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

func (x *IMMsgBody_MarketFace) GetImageWidth() uint32 {
	if x != nil {
		return x.ImageWidth
	}
	return 0
}

func (x *IMMsgBody_MarketFace) GetImageHeight() uint32 {
	if x != nil {
		return x.ImageHeight
	}
	return 0
}

func (x *IMMsgBody_MarketFace) GetMobileparam() []byte {
	if x != nil {
		return x.Mobileparam
	}
	return nil
}

func (x *IMMsgBody_MarketFace) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

// MarketTrans is the message type for the MarketTrans.
type IMMsgBody_MarketTrans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag       int32  `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`                               // int32_flag
	Xml        []byte `protobuf:"bytes,2,opt,name=xml,proto3" json:"xml,omitempty"`                                  // bytes_xml
	MsgResid   []byte `protobuf:"bytes,3,opt,name=msg_resid,json=msgResid,proto3" json:"msg_resid,omitempty"`        // bytes_msg_resid
	Ability    uint32 `protobuf:"varint,4,opt,name=ability,proto3" json:"ability,omitempty"`                         // uint32_ability
	MinAbility uint32 `protobuf:"varint,5,opt,name=min_ability,json=minAbility,proto3" json:"min_ability,omitempty"` // uint32_min_ability
}

func (x *IMMsgBody_MarketTrans) Reset() {
	*x = IMMsgBody_MarketTrans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_MarketTrans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_MarketTrans) ProtoMessage() {}

func (x *IMMsgBody_MarketTrans) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_MarketTrans.ProtoReflect.Descriptor instead.
func (*IMMsgBody_MarketTrans) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 30}
}

func (x *IMMsgBody_MarketTrans) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *IMMsgBody_MarketTrans) GetXml() []byte {
	if x != nil {
		return x.Xml
	}
	return nil
}

func (x *IMMsgBody_MarketTrans) GetMsgResid() []byte {
	if x != nil {
		return x.MsgResid
	}
	return nil
}

func (x *IMMsgBody_MarketTrans) GetAbility() uint32 {
	if x != nil {
		return x.Ability
	}
	return 0
}

func (x *IMMsgBody_MarketTrans) GetMinAbility() uint32 {
	if x != nil {
		return x.MinAbility
	}
	return 0
}

// MsgBody is the message type for the MsgBody.
type IMMsgBody_MsgBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RichText          *IMMsgBody_RichText `protobuf:"bytes,1,opt,name=rich_text,json=richText,proto3" json:"rich_text,omitempty"`                              // rich_text
	MsgContent        []byte              `protobuf:"bytes,2,opt,name=msg_content,json=msgContent,proto3" json:"msg_content,omitempty"`                        // msg_content
	MsgEncryptContent []byte              `protobuf:"bytes,3,opt,name=msg_encrypt_content,json=msgEncryptContent,proto3" json:"msg_encrypt_content,omitempty"` // msg_encrypt_content
}

func (x *IMMsgBody_MsgBody) Reset() {
	*x = IMMsgBody_MsgBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_MsgBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_MsgBody) ProtoMessage() {}

func (x *IMMsgBody_MsgBody) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_MsgBody.ProtoReflect.Descriptor instead.
func (*IMMsgBody_MsgBody) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 31}
}

func (x *IMMsgBody_MsgBody) GetRichText() *IMMsgBody_RichText {
	if x != nil {
		return x.RichText
	}
	return nil
}

func (x *IMMsgBody_MsgBody) GetMsgContent() []byte {
	if x != nil {
		return x.MsgContent
	}
	return nil
}

func (x *IMMsgBody_MsgBody) GetMsgEncryptContent() []byte {
	if x != nil {
		return x.MsgEncryptContent
	}
	return nil
}

// MsgBody_subtype4 is the message type for the MsgBody_subtype4.
type IMMsgBody_MsgBodySubtype4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgNotOnlineFile *IMMsgBody_NotOnlineFile `protobuf:"bytes,1,opt,name=msg_not_online_file,json=msgNotOnlineFile,proto3" json:"msg_not_online_file,omitempty"` // msg_not_online_file
	MsgTime          uint32                   `protobuf:"varint,2,opt,name=msg_time,json=msgTime,proto3" json:"msg_time,omitempty"`                               // uint32_msg_time
}

func (x *IMMsgBody_MsgBodySubtype4) Reset() {
	*x = IMMsgBody_MsgBodySubtype4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_MsgBodySubtype4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_MsgBodySubtype4) ProtoMessage() {}

func (x *IMMsgBody_MsgBodySubtype4) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_MsgBodySubtype4.ProtoReflect.Descriptor instead.
func (*IMMsgBody_MsgBodySubtype4) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 32}
}

func (x *IMMsgBody_MsgBodySubtype4) GetMsgNotOnlineFile() *IMMsgBody_NotOnlineFile {
	if x != nil {
		return x.MsgNotOnlineFile
	}
	return nil
}

func (x *IMMsgBody_MsgBodySubtype4) GetMsgTime() uint32 {
	if x != nil {
		return x.MsgTime
	}
	return 0
}

// NearByMessageType is the message type for the NearByMessageType.
type IMMsgBody_NearByMessageType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                                     // uint32_type
	IdentifyType uint32 `protobuf:"varint,2,opt,name=identify_type,json=identifyType,proto3" json:"identify_type,omitempty"` // uint32_identify_type
}

func (x *IMMsgBody_NearByMessageType) Reset() {
	*x = IMMsgBody_NearByMessageType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_NearByMessageType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_NearByMessageType) ProtoMessage() {}

func (x *IMMsgBody_NearByMessageType) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_NearByMessageType.ProtoReflect.Descriptor instead.
func (*IMMsgBody_NearByMessageType) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 33}
}

func (x *IMMsgBody_NearByMessageType) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *IMMsgBody_NearByMessageType) GetIdentifyType() uint32 {
	if x != nil {
		return x.IdentifyType
	}
	return 0
}

// NotOnlineFile is the message type for the NotOnlineFile.
type IMMsgBody_NotOnlineFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileType       uint32   `protobuf:"varint,1,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`                   // uint32_file_type
	Sig            []byte   `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`                                              // bytes_sig
	FileUuid       []byte   `protobuf:"bytes,3,opt,name=file_uuid,json=fileUuid,proto3" json:"file_uuid,omitempty"`                    // bytes_file_uuid
	FileMd5        []byte   `protobuf:"bytes,4,opt,name=file_md5,json=fileMd5,proto3" json:"file_md5,omitempty"`                       // bytes_file_md5
	FileName       []byte   `protobuf:"bytes,5,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`                    // bytes_file_name
	FileSize       uint64   `protobuf:"varint,6,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`                   // uint64_file_size
	Note           []byte   `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`                                            // bytes_note
	Reserved       uint32   `protobuf:"varint,8,opt,name=reserved,proto3" json:"reserved,omitempty"`                                   // uint32_reserved
	Subcmd         uint32   `protobuf:"varint,9,opt,name=subcmd,proto3" json:"subcmd,omitempty"`                                       // uint32_subcmd
	MicroCloud     uint32   `protobuf:"varint,10,opt,name=micro_cloud,json=microCloud,proto3" json:"micro_cloud,omitempty"`            // uint32_micro_cloud
	FileUrls       [][]byte `protobuf:"bytes,11,rep,name=file_urls,json=fileUrls,proto3" json:"file_urls,omitempty"`                   // rpt_bytes_file_urls
	DownloadFlag   uint32   `protobuf:"varint,12,opt,name=download_flag,json=downloadFlag,proto3" json:"download_flag,omitempty"`      // uint32_download_flag
	DangerEvel     uint32   `protobuf:"varint,50,opt,name=danger_evel,json=dangerEvel,proto3" json:"danger_evel,omitempty"`            // uint32_danger_evel
	LifeTime       uint32   `protobuf:"varint,51,opt,name=life_time,json=lifeTime,proto3" json:"life_time,omitempty"`                  // uint32_life_time
	UploadTime     uint32   `protobuf:"varint,52,opt,name=upload_time,json=uploadTime,proto3" json:"upload_time,omitempty"`            // uint32_upload_time
	AbsFileType    uint32   `protobuf:"varint,53,opt,name=abs_file_type,json=absFileType,proto3" json:"abs_file_type,omitempty"`       // uint32_abs_file_type
	ClientType     uint32   `protobuf:"varint,54,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`            // uint32_client_type
	ExpireTime     uint32   `protobuf:"varint,55,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`            // uint32_expire_time
	PbReserve      []byte   `protobuf:"bytes,56,opt,name=pb_reserve,json=pbReserve,proto3" json:"pb_reserve,omitempty"`                // bytes_pb_reserve
	FileidcrcMedia string   `protobuf:"bytes,57,opt,name=fileidcrc_media,json=fileidcrcMedia,proto3" json:"fileidcrc_media,omitempty"` // str_fileidcrc_media
}

func (x *IMMsgBody_NotOnlineFile) Reset() {
	*x = IMMsgBody_NotOnlineFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_NotOnlineFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_NotOnlineFile) ProtoMessage() {}

func (x *IMMsgBody_NotOnlineFile) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_NotOnlineFile.ProtoReflect.Descriptor instead.
func (*IMMsgBody_NotOnlineFile) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 34}
}

func (x *IMMsgBody_NotOnlineFile) GetFileType() uint32 {
	if x != nil {
		return x.FileType
	}
	return 0
}

func (x *IMMsgBody_NotOnlineFile) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *IMMsgBody_NotOnlineFile) GetFileUuid() []byte {
	if x != nil {
		return x.FileUuid
	}
	return nil
}

func (x *IMMsgBody_NotOnlineFile) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *IMMsgBody_NotOnlineFile) GetFileName() []byte {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *IMMsgBody_NotOnlineFile) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *IMMsgBody_NotOnlineFile) GetNote() []byte {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *IMMsgBody_NotOnlineFile) GetReserved() uint32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

func (x *IMMsgBody_NotOnlineFile) GetSubcmd() uint32 {
	if x != nil {
		return x.Subcmd
	}
	return 0
}

func (x *IMMsgBody_NotOnlineFile) GetMicroCloud() uint32 {
	if x != nil {
		return x.MicroCloud
	}
	return 0
}

func (x *IMMsgBody_NotOnlineFile) GetFileUrls() [][]byte {
	if x != nil {
		return x.FileUrls
	}
	return nil
}

func (x *IMMsgBody_NotOnlineFile) GetDownloadFlag() uint32 {
	if x != nil {
		return x.DownloadFlag
	}
	return 0
}

func (x *IMMsgBody_NotOnlineFile) GetDangerEvel() uint32 {
	if x != nil {
		return x.DangerEvel
	}
	return 0
}

func (x *IMMsgBody_NotOnlineFile) GetLifeTime() uint32 {
	if x != nil {
		return x.LifeTime
	}
	return 0
}

func (x *IMMsgBody_NotOnlineFile) GetUploadTime() uint32 {
	if x != nil {
		return x.UploadTime
	}
	return 0
}

func (x *IMMsgBody_NotOnlineFile) GetAbsFileType() uint32 {
	if x != nil {
		return x.AbsFileType
	}
	return 0
}

func (x *IMMsgBody_NotOnlineFile) GetClientType() uint32 {
	if x != nil {
		return x.ClientType
	}
	return 0
}

func (x *IMMsgBody_NotOnlineFile) GetExpireTime() uint32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *IMMsgBody_NotOnlineFile) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

func (x *IMMsgBody_NotOnlineFile) GetFileidcrcMedia() string {
	if x != nil {
		return x.FileidcrcMedia
	}
	return ""
}

// NotOnlineImage is the message type for the NotOnlineImage.
type IMMsgBody_NotOnlineImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath       []byte `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`                       // file_path
	FileLen        uint32 `protobuf:"varint,2,opt,name=file_len,json=fileLen,proto3" json:"file_len,omitempty"`                         // file_len
	DownloadPath   []byte `protobuf:"bytes,3,opt,name=download_path,json=downloadPath,proto3" json:"download_path,omitempty"`           // download_path
	OldVerSendFile []byte `protobuf:"bytes,4,opt,name=old_ver_send_file,json=oldVerSendFile,proto3" json:"old_ver_send_file,omitempty"` // old_ver_send_file
	ImgType        uint32 `protobuf:"varint,5,opt,name=img_type,json=imgType,proto3" json:"img_type,omitempty"`                         // img_type
	PreviewsImage  []byte `protobuf:"bytes,6,opt,name=previews_image,json=previewsImage,proto3" json:"previews_image,omitempty"`        // previews_image
	PicMd5         []byte `protobuf:"bytes,7,opt,name=pic_md5,json=picMd5,proto3" json:"pic_md5,omitempty"`                             // pic_md5
	PicHeight      uint32 `protobuf:"varint,8,opt,name=pic_height,json=picHeight,proto3" json:"pic_height,omitempty"`                   // pic_height
	PicWidth       uint32 `protobuf:"varint,9,opt,name=pic_width,json=picWidth,proto3" json:"pic_width,omitempty"`                      // pic_width
	ResId          []byte `protobuf:"bytes,10,opt,name=res_id,json=resId,proto3" json:"res_id,omitempty"`                               // res_id
	Flag           []byte `protobuf:"bytes,11,opt,name=flag,proto3" json:"flag,omitempty"`                                              // flag
	ThumbUrl       string `protobuf:"bytes,12,opt,name=thumb_url,json=thumbUrl,proto3" json:"thumb_url,omitempty"`                      // str_thumb_url
	Original       uint32 `protobuf:"varint,13,opt,name=original,proto3" json:"original,omitempty"`                                     // original
	BigUrl         string `protobuf:"bytes,14,opt,name=big_url,json=bigUrl,proto3" json:"big_url,omitempty"`                            // str_big_url
	OrigUrl        string `protobuf:"bytes,15,opt,name=orig_url,json=origUrl,proto3" json:"orig_url,omitempty"`                         // str_orig_url
	BizType        uint32 `protobuf:"varint,16,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty"`                        // biz_type
	Result         uint32 `protobuf:"varint,17,opt,name=result,proto3" json:"result,omitempty"`                                         // result
	Index          uint32 `protobuf:"varint,18,opt,name=index,proto3" json:"index,omitempty"`                                           // index
	OpFaceBuf      []byte `protobuf:"bytes,19,opt,name=op_face_buf,json=opFaceBuf,proto3" json:"op_face_buf,omitempty"`                 // op_face_buf
	OldPicMd5      bool   `protobuf:"varint,20,opt,name=old_pic_md5,json=oldPicMd5,proto3" json:"old_pic_md5,omitempty"`                // old_pic_md5
	ThumbWidth     uint32 `protobuf:"varint,21,opt,name=thumb_width,json=thumbWidth,proto3" json:"thumb_width,omitempty"`               // uint32_thumb_width
	ThumbHeight    uint32 `protobuf:"varint,22,opt,name=thumb_height,json=thumbHeight,proto3" json:"thumb_height,omitempty"`            // uint32_thumb_height
	FileId         uint32 `protobuf:"varint,23,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`                           // uint32_file_id
	ShowLen        uint32 `protobuf:"varint,24,opt,name=show_len,json=showLen,proto3" json:"show_len,omitempty"`                        // uint32_show_len
	DownloadLen    uint32 `protobuf:"varint,25,opt,name=download_len,json=downloadLen,proto3" json:"download_len,omitempty"`            // uint32_download_len
	Url_400        string `protobuf:"bytes,26,opt,name=url_400,json=url400,proto3" json:"url_400,omitempty"`                            // str_400_url
	Width_400      uint32 `protobuf:"varint,27,opt,name=width_400,json=width400,proto3" json:"width_400,omitempty"`                     // uint32_400_width
	Height_400     uint32 `protobuf:"varint,28,opt,name=height_400,json=height400,proto3" json:"height_400,omitempty"`                  // uint32_400_height
	PbReserve      []byte `protobuf:"bytes,29,opt,name=pb_reserve,json=pbReserve,proto3" json:"pb_reserve,omitempty"`                   // bytes_pb_reserve
}

func (x *IMMsgBody_NotOnlineImage) Reset() {
	*x = IMMsgBody_NotOnlineImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_NotOnlineImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_NotOnlineImage) ProtoMessage() {}

func (x *IMMsgBody_NotOnlineImage) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_NotOnlineImage.ProtoReflect.Descriptor instead.
func (*IMMsgBody_NotOnlineImage) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 35}
}

func (x *IMMsgBody_NotOnlineImage) GetFilePath() []byte {
	if x != nil {
		return x.FilePath
	}
	return nil
}

func (x *IMMsgBody_NotOnlineImage) GetFileLen() uint32 {
	if x != nil {
		return x.FileLen
	}
	return 0
}

func (x *IMMsgBody_NotOnlineImage) GetDownloadPath() []byte {
	if x != nil {
		return x.DownloadPath
	}
	return nil
}

func (x *IMMsgBody_NotOnlineImage) GetOldVerSendFile() []byte {
	if x != nil {
		return x.OldVerSendFile
	}
	return nil
}

func (x *IMMsgBody_NotOnlineImage) GetImgType() uint32 {
	if x != nil {
		return x.ImgType
	}
	return 0
}

func (x *IMMsgBody_NotOnlineImage) GetPreviewsImage() []byte {
	if x != nil {
		return x.PreviewsImage
	}
	return nil
}

func (x *IMMsgBody_NotOnlineImage) GetPicMd5() []byte {
	if x != nil {
		return x.PicMd5
	}
	return nil
}

func (x *IMMsgBody_NotOnlineImage) GetPicHeight() uint32 {
	if x != nil {
		return x.PicHeight
	}
	return 0
}

func (x *IMMsgBody_NotOnlineImage) GetPicWidth() uint32 {
	if x != nil {
		return x.PicWidth
	}
	return 0
}

func (x *IMMsgBody_NotOnlineImage) GetResId() []byte {
	if x != nil {
		return x.ResId
	}
	return nil
}

func (x *IMMsgBody_NotOnlineImage) GetFlag() []byte {
	if x != nil {
		return x.Flag
	}
	return nil
}

func (x *IMMsgBody_NotOnlineImage) GetThumbUrl() string {
	if x != nil {
		return x.ThumbUrl
	}
	return ""
}

func (x *IMMsgBody_NotOnlineImage) GetOriginal() uint32 {
	if x != nil {
		return x.Original
	}
	return 0
}

func (x *IMMsgBody_NotOnlineImage) GetBigUrl() string {
	if x != nil {
		return x.BigUrl
	}
	return ""
}

func (x *IMMsgBody_NotOnlineImage) GetOrigUrl() string {
	if x != nil {
		return x.OrigUrl
	}
	return ""
}

func (x *IMMsgBody_NotOnlineImage) GetBizType() uint32 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *IMMsgBody_NotOnlineImage) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *IMMsgBody_NotOnlineImage) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *IMMsgBody_NotOnlineImage) GetOpFaceBuf() []byte {
	if x != nil {
		return x.OpFaceBuf
	}
	return nil
}

func (x *IMMsgBody_NotOnlineImage) GetOldPicMd5() bool {
	if x != nil {
		return x.OldPicMd5
	}
	return false
}

func (x *IMMsgBody_NotOnlineImage) GetThumbWidth() uint32 {
	if x != nil {
		return x.ThumbWidth
	}
	return 0
}

func (x *IMMsgBody_NotOnlineImage) GetThumbHeight() uint32 {
	if x != nil {
		return x.ThumbHeight
	}
	return 0
}

func (x *IMMsgBody_NotOnlineImage) GetFileId() uint32 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *IMMsgBody_NotOnlineImage) GetShowLen() uint32 {
	if x != nil {
		return x.ShowLen
	}
	return 0
}

func (x *IMMsgBody_NotOnlineImage) GetDownloadLen() uint32 {
	if x != nil {
		return x.DownloadLen
	}
	return 0
}

func (x *IMMsgBody_NotOnlineImage) GetUrl_400() string {
	if x != nil {
		return x.Url_400
	}
	return ""
}

func (x *IMMsgBody_NotOnlineImage) GetWidth_400() uint32 {
	if x != nil {
		return x.Width_400
	}
	return 0
}

func (x *IMMsgBody_NotOnlineImage) GetHeight_400() uint32 {
	if x != nil {
		return x.Height_400
	}
	return 0
}

func (x *IMMsgBody_NotOnlineImage) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

// OnlineImage is the message type for the OnlineImage.
type IMMsgBody_OnlineImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid           []byte `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`                                               // guid
	FilePath       []byte `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`                       // file_path
	OldVerSendFile []byte `protobuf:"bytes,3,opt,name=old_ver_send_file,json=oldVerSendFile,proto3" json:"old_ver_send_file,omitempty"` // old_ver_send_file
}

func (x *IMMsgBody_OnlineImage) Reset() {
	*x = IMMsgBody_OnlineImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_OnlineImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_OnlineImage) ProtoMessage() {}

func (x *IMMsgBody_OnlineImage) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_OnlineImage.ProtoReflect.Descriptor instead.
func (*IMMsgBody_OnlineImage) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 36}
}

func (x *IMMsgBody_OnlineImage) GetGuid() []byte {
	if x != nil {
		return x.Guid
	}
	return nil
}

func (x *IMMsgBody_OnlineImage) GetFilePath() []byte {
	if x != nil {
		return x.FilePath
	}
	return nil
}

func (x *IMMsgBody_OnlineImage) GetOldVerSendFile() []byte {
	if x != nil {
		return x.OldVerSendFile
	}
	return nil
}

// OpenQQData is the message type for the OpenQQData.
type IMMsgBody_OpenQQData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarQqData []byte `protobuf:"bytes,1,opt,name=car_qq_data,json=carQqData,proto3" json:"car_qq_data,omitempty"` // bytes_car_qq_data
}

func (x *IMMsgBody_OpenQQData) Reset() {
	*x = IMMsgBody_OpenQQData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_OpenQQData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_OpenQQData) ProtoMessage() {}

func (x *IMMsgBody_OpenQQData) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_OpenQQData.ProtoReflect.Descriptor instead.
func (*IMMsgBody_OpenQQData) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 37}
}

func (x *IMMsgBody_OpenQQData) GetCarQqData() []byte {
	if x != nil {
		return x.CarQqData
	}
	return nil
}

// PatsElem is the message type for the PatsElem.
type IMMsgBody_PatsElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatType  uint32 `protobuf:"varint,1,opt,name=pat_type,json=patType,proto3" json:"pat_type,omitempty"`    // uint32_pat_type
	PatCount uint32 `protobuf:"varint,2,opt,name=pat_count,json=patCount,proto3" json:"pat_count,omitempty"` // uint32_pat_count
}

func (x *IMMsgBody_PatsElem) Reset() {
	*x = IMMsgBody_PatsElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_PatsElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_PatsElem) ProtoMessage() {}

func (x *IMMsgBody_PatsElem) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_PatsElem.ProtoReflect.Descriptor instead.
func (*IMMsgBody_PatsElem) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 38}
}

func (x *IMMsgBody_PatsElem) GetPatType() uint32 {
	if x != nil {
		return x.PatType
	}
	return 0
}

func (x *IMMsgBody_PatsElem) GetPatCount() uint32 {
	if x != nil {
		return x.PatCount
	}
	return 0
}

// PcSupportDef is the message type for the PcSupportDef.
type IMMsgBody_PcSupportDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PcPtlBegin     uint32   `protobuf:"varint,1,opt,name=pc_ptl_begin,json=pcPtlBegin,proto3" json:"pc_ptl_begin,omitempty"`                    // uint32_pc_ptl_begin
	PcPtlEnd       uint32   `protobuf:"varint,2,opt,name=pc_ptl_end,json=pcPtlEnd,proto3" json:"pc_ptl_end,omitempty"`                          // uint32_pc_ptl_end
	MacPtlBegin    uint32   `protobuf:"varint,3,opt,name=mac_ptl_begin,json=macPtlBegin,proto3" json:"mac_ptl_begin,omitempty"`                 // uint32_mac_ptl_begin
	MacPtlEnd      uint32   `protobuf:"varint,4,opt,name=mac_ptl_end,json=macPtlEnd,proto3" json:"mac_ptl_end,omitempty"`                       // uint32_mac_ptl_end
	PtlsSupport    []uint32 `protobuf:"varint,5,rep,packed,name=ptls_support,json=ptlsSupport,proto3" json:"ptls_support,omitempty"`            // rpt_ptls_support
	PtlsNotSupport []uint32 `protobuf:"varint,6,rep,packed,name=ptls_not_support,json=ptlsNotSupport,proto3" json:"ptls_not_support,omitempty"` // rpt_ptls_not_support
}

func (x *IMMsgBody_PcSupportDef) Reset() {
	*x = IMMsgBody_PcSupportDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_PcSupportDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_PcSupportDef) ProtoMessage() {}

func (x *IMMsgBody_PcSupportDef) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_PcSupportDef.ProtoReflect.Descriptor instead.
func (*IMMsgBody_PcSupportDef) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 39}
}

func (x *IMMsgBody_PcSupportDef) GetPcPtlBegin() uint32 {
	if x != nil {
		return x.PcPtlBegin
	}
	return 0
}

func (x *IMMsgBody_PcSupportDef) GetPcPtlEnd() uint32 {
	if x != nil {
		return x.PcPtlEnd
	}
	return 0
}

func (x *IMMsgBody_PcSupportDef) GetMacPtlBegin() uint32 {
	if x != nil {
		return x.MacPtlBegin
	}
	return 0
}

func (x *IMMsgBody_PcSupportDef) GetMacPtlEnd() uint32 {
	if x != nil {
		return x.MacPtlEnd
	}
	return 0
}

func (x *IMMsgBody_PcSupportDef) GetPtlsSupport() []uint32 {
	if x != nil {
		return x.PtlsSupport
	}
	return nil
}

func (x *IMMsgBody_PcSupportDef) GetPtlsNotSupport() []uint32 {
	if x != nil {
		return x.PtlsNotSupport
	}
	return nil
}

// Ptt is the message type for the Ptt.
type IMMsgBody_Ptt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileType      uint32   `protobuf:"varint,1,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`                   // uint32_file_type
	SrcUin        uint64   `protobuf:"varint,2,opt,name=src_uin,json=srcUin,proto3" json:"src_uin,omitempty"`                         // uint64_src_uin
	FileUuid      []byte   `protobuf:"bytes,3,opt,name=file_uuid,json=fileUuid,proto3" json:"file_uuid,omitempty"`                    // bytes_file_uuid
	FileMd5       []byte   `protobuf:"bytes,4,opt,name=file_md5,json=fileMd5,proto3" json:"file_md5,omitempty"`                       // bytes_file_md5
	FileName      []byte   `protobuf:"bytes,5,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`                    // bytes_file_name
	FileSize      uint32   `protobuf:"varint,6,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`                   // uint32_file_size
	Reserve       []byte   `protobuf:"bytes,7,opt,name=reserve,proto3" json:"reserve,omitempty"`                                      // bytes_reserve
	FileId        uint32   `protobuf:"varint,8,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`                         // uint32_file_id
	ServerIp      uint32   `protobuf:"varint,9,opt,name=server_ip,json=serverIp,proto3" json:"server_ip,omitempty"`                   // uint32_server_ip
	ServerPort    uint32   `protobuf:"varint,10,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`            // uint32_server_port
	Valid         bool     `protobuf:"varint,11,opt,name=valid,proto3" json:"valid,omitempty"`                                        // bool_valid
	Signature     []byte   `protobuf:"bytes,12,opt,name=signature,proto3" json:"signature,omitempty"`                                 // bytes_signature
	Shortcut      []byte   `protobuf:"bytes,13,opt,name=shortcut,proto3" json:"shortcut,omitempty"`                                   // bytes_shortcut
	FileKey       []byte   `protobuf:"bytes,14,opt,name=file_key,json=fileKey,proto3" json:"file_key,omitempty"`                      // bytes_file_key
	MagicPttIndex uint32   `protobuf:"varint,15,opt,name=magic_ptt_index,json=magicPttIndex,proto3" json:"magic_ptt_index,omitempty"` // uint32_magic_ptt_index
	VoiceSwitch   uint32   `protobuf:"varint,16,opt,name=voice_switch,json=voiceSwitch,proto3" json:"voice_switch,omitempty"`         // uint32_voice_switch
	PttUrl        []byte   `protobuf:"bytes,17,opt,name=ptt_url,json=pttUrl,proto3" json:"ptt_url,omitempty"`                         // bytes_ptt_url
	GroupFileKey  []byte   `protobuf:"bytes,18,opt,name=group_file_key,json=groupFileKey,proto3" json:"group_file_key,omitempty"`     // bytes_group_file_key
	Time          uint32   `protobuf:"varint,19,opt,name=time,proto3" json:"time,omitempty"`                                          // uint32_time
	DownPara      []byte   `protobuf:"bytes,20,opt,name=down_para,json=downPara,proto3" json:"down_para,omitempty"`                   // bytes_down_para
	Format        uint32   `protobuf:"varint,29,opt,name=format,proto3" json:"format,omitempty"`                                      // uint32_format
	PbReserve     []byte   `protobuf:"bytes,30,opt,name=pb_reserve,json=pbReserve,proto3" json:"pb_reserve,omitempty"`                // bytes_pb_reserve
	PttUrls       [][]byte `protobuf:"bytes,31,rep,name=ptt_urls,json=pttUrls,proto3" json:"ptt_urls,omitempty"`                      // rpt_bytes_ptt_urls
	DownloadFlag  uint32   `protobuf:"varint,32,opt,name=download_flag,json=downloadFlag,proto3" json:"download_flag,omitempty"`      // uint32_download_flag
}

func (x *IMMsgBody_Ptt) Reset() {
	*x = IMMsgBody_Ptt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_Ptt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_Ptt) ProtoMessage() {}

func (x *IMMsgBody_Ptt) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_Ptt.ProtoReflect.Descriptor instead.
func (*IMMsgBody_Ptt) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 40}
}

func (x *IMMsgBody_Ptt) GetFileType() uint32 {
	if x != nil {
		return x.FileType
	}
	return 0
}

func (x *IMMsgBody_Ptt) GetSrcUin() uint64 {
	if x != nil {
		return x.SrcUin
	}
	return 0
}

func (x *IMMsgBody_Ptt) GetFileUuid() []byte {
	if x != nil {
		return x.FileUuid
	}
	return nil
}

func (x *IMMsgBody_Ptt) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *IMMsgBody_Ptt) GetFileName() []byte {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *IMMsgBody_Ptt) GetFileSize() uint32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *IMMsgBody_Ptt) GetReserve() []byte {
	if x != nil {
		return x.Reserve
	}
	return nil
}

func (x *IMMsgBody_Ptt) GetFileId() uint32 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *IMMsgBody_Ptt) GetServerIp() uint32 {
	if x != nil {
		return x.ServerIp
	}
	return 0
}

func (x *IMMsgBody_Ptt) GetServerPort() uint32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *IMMsgBody_Ptt) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *IMMsgBody_Ptt) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *IMMsgBody_Ptt) GetShortcut() []byte {
	if x != nil {
		return x.Shortcut
	}
	return nil
}

func (x *IMMsgBody_Ptt) GetFileKey() []byte {
	if x != nil {
		return x.FileKey
	}
	return nil
}

func (x *IMMsgBody_Ptt) GetMagicPttIndex() uint32 {
	if x != nil {
		return x.MagicPttIndex
	}
	return 0
}

func (x *IMMsgBody_Ptt) GetVoiceSwitch() uint32 {
	if x != nil {
		return x.VoiceSwitch
	}
	return 0
}

func (x *IMMsgBody_Ptt) GetPttUrl() []byte {
	if x != nil {
		return x.PttUrl
	}
	return nil
}

func (x *IMMsgBody_Ptt) GetGroupFileKey() []byte {
	if x != nil {
		return x.GroupFileKey
	}
	return nil
}

func (x *IMMsgBody_Ptt) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *IMMsgBody_Ptt) GetDownPara() []byte {
	if x != nil {
		return x.DownPara
	}
	return nil
}

func (x *IMMsgBody_Ptt) GetFormat() uint32 {
	if x != nil {
		return x.Format
	}
	return 0
}

func (x *IMMsgBody_Ptt) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

func (x *IMMsgBody_Ptt) GetPttUrls() [][]byte {
	if x != nil {
		return x.PttUrls
	}
	return nil
}

func (x *IMMsgBody_Ptt) GetDownloadFlag() uint32 {
	if x != nil {
		return x.DownloadFlag
	}
	return 0
}

// PubAccInfo is the message type for the PubAccInfo.
type IMMsgBody_PubAccInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsInterNum    uint32 `protobuf:"varint,1,opt,name=is_inter_num,json=isInterNum,proto3" json:"is_inter_num,omitempty"`         // uint32_is_inter_num
	MsgTemplateId string `protobuf:"bytes,2,opt,name=msg_template_id,json=msgTemplateId,proto3" json:"msg_template_id,omitempty"` // string_msg_template_id
	LongMsgUrl    string `protobuf:"bytes,3,opt,name=long_msg_url,json=longMsgUrl,proto3" json:"long_msg_url,omitempty"`          // string_long_msg_url
	DownloadKey   []byte `protobuf:"bytes,4,opt,name=download_key,json=downloadKey,proto3" json:"download_key,omitempty"`         // bytes_download_key
}

func (x *IMMsgBody_PubAccInfo) Reset() {
	*x = IMMsgBody_PubAccInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_PubAccInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_PubAccInfo) ProtoMessage() {}

func (x *IMMsgBody_PubAccInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_PubAccInfo.ProtoReflect.Descriptor instead.
func (*IMMsgBody_PubAccInfo) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 41}
}

func (x *IMMsgBody_PubAccInfo) GetIsInterNum() uint32 {
	if x != nil {
		return x.IsInterNum
	}
	return 0
}

func (x *IMMsgBody_PubAccInfo) GetMsgTemplateId() string {
	if x != nil {
		return x.MsgTemplateId
	}
	return ""
}

func (x *IMMsgBody_PubAccInfo) GetLongMsgUrl() string {
	if x != nil {
		return x.LongMsgUrl
	}
	return ""
}

func (x *IMMsgBody_PubAccInfo) GetDownloadKey() []byte {
	if x != nil {
		return x.DownloadKey
	}
	return nil
}

// PubAccount is the message type for the PubAccount.
type IMMsgBody_PubAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buf           []byte `protobuf:"bytes,1,opt,name=buf,proto3" json:"buf,omitempty"`                                             // bytes_buf
	PubAccountUin uint64 `protobuf:"varint,2,opt,name=pub_account_uin,json=pubAccountUin,proto3" json:"pub_account_uin,omitempty"` // uint64_pub_account_uin
}

func (x *IMMsgBody_PubAccount) Reset() {
	*x = IMMsgBody_PubAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_PubAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_PubAccount) ProtoMessage() {}

func (x *IMMsgBody_PubAccount) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_PubAccount.ProtoReflect.Descriptor instead.
func (*IMMsgBody_PubAccount) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 42}
}

func (x *IMMsgBody_PubAccount) GetBuf() []byte {
	if x != nil {
		return x.Buf
	}
	return nil
}

func (x *IMMsgBody_PubAccount) GetPubAccountUin() uint64 {
	if x != nil {
		return x.PubAccountUin
	}
	return 0
}

// PubGroup is the message type for the PubGroup.
type IMMsgBody_PubGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname []byte `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`  // bytes_nickname
	Gender   uint32 `protobuf:"varint,2,opt,name=gender,proto3" json:"gender,omitempty"`     // uint32_gender
	Age      uint32 `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`           // uint32_age
	Distance uint32 `protobuf:"varint,4,opt,name=distance,proto3" json:"distance,omitempty"` // uint32_distance
}

func (x *IMMsgBody_PubGroup) Reset() {
	*x = IMMsgBody_PubGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_PubGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_PubGroup) ProtoMessage() {}

func (x *IMMsgBody_PubGroup) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_PubGroup.ProtoReflect.Descriptor instead.
func (*IMMsgBody_PubGroup) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 43}
}

func (x *IMMsgBody_PubGroup) GetNickname() []byte {
	if x != nil {
		return x.Nickname
	}
	return nil
}

func (x *IMMsgBody_PubGroup) GetGender() uint32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *IMMsgBody_PubGroup) GetAge() uint32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *IMMsgBody_PubGroup) GetDistance() uint32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

// QQLiveOld is the message type for the QQLiveOld.
type IMMsgBody_QQLiveOld struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubCmd    uint32 `protobuf:"varint,1,opt,name=sub_cmd,json=subCmd,proto3" json:"sub_cmd,omitempty"`      // uint32_sub_cmd
	ShowText  []byte `protobuf:"bytes,2,opt,name=show_text,json=showText,proto3" json:"show_text,omitempty"` // str_show_text
	Param     []byte `protobuf:"bytes,3,opt,name=param,proto3" json:"param,omitempty"`                       // str_param
	Introduce []byte `protobuf:"bytes,4,opt,name=introduce,proto3" json:"introduce,omitempty"`               // str_introduce
}

func (x *IMMsgBody_QQLiveOld) Reset() {
	*x = IMMsgBody_QQLiveOld{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_QQLiveOld) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_QQLiveOld) ProtoMessage() {}

func (x *IMMsgBody_QQLiveOld) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_QQLiveOld.ProtoReflect.Descriptor instead.
func (*IMMsgBody_QQLiveOld) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 44}
}

func (x *IMMsgBody_QQLiveOld) GetSubCmd() uint32 {
	if x != nil {
		return x.SubCmd
	}
	return 0
}

func (x *IMMsgBody_QQLiveOld) GetShowText() []byte {
	if x != nil {
		return x.ShowText
	}
	return nil
}

func (x *IMMsgBody_QQLiveOld) GetParam() []byte {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *IMMsgBody_QQLiveOld) GetIntroduce() []byte {
	if x != nil {
		return x.Introduce
	}
	return nil
}

// QQWalletAioBody is the message type for the QQWalletAioBody.
type IMMsgBody_QQWalletAioBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Senduin     uint64                     `protobuf:"varint,1,opt,name=senduin,proto3" json:"senduin,omitempty"`                            // uint64_senduin
	Sender      *IMMsgBody_QQWalletAioElem `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`                               // sender
	Receiver    *IMMsgBody_QQWalletAioElem `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver,omitempty"`                           // receiver
	Channelid   int32                      `protobuf:"zigzag32,4,opt,name=channelid,proto3" json:"channelid,omitempty"`                      // sint32_channelid
	Templateid  int32                      `protobuf:"zigzag32,5,opt,name=templateid,proto3" json:"templateid,omitempty"`                    // sint32_templateid
	Resend      uint32                     `protobuf:"varint,6,opt,name=resend,proto3" json:"resend,omitempty"`                              // uint32_resend
	MsgPriority uint32                     `protobuf:"varint,7,opt,name=msg_priority,json=msgPriority,proto3" json:"msg_priority,omitempty"` // uint32_msg_priority
	Redtype     int32                      `protobuf:"zigzag32,8,opt,name=redtype,proto3" json:"redtype,omitempty"`                          // sint32_redtype
	Billno      []byte                     `protobuf:"bytes,9,opt,name=billno,proto3" json:"billno,omitempty"`                               // bytes_billno
	Authkey     []byte                     `protobuf:"bytes,10,opt,name=authkey,proto3" json:"authkey,omitempty"`                            // bytes_authkey
	Sessiontype int32                      `protobuf:"zigzag32,11,opt,name=sessiontype,proto3" json:"sessiontype,omitempty"`                 // sint32_sessiontype
	Msgtype     int32                      `protobuf:"zigzag32,12,opt,name=msgtype,proto3" json:"msgtype,omitempty"`                         // sint32_msgtype
	Envelopeid  int32                      `protobuf:"zigzag32,13,opt,name=envelopeid,proto3" json:"envelopeid,omitempty"`                   // sint32_envelopeid
	Name        []byte                     `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`                                  // bytes_name
	Conftype    int32                      `protobuf:"zigzag32,15,opt,name=conftype,proto3" json:"conftype,omitempty"`                       // sint32_conftype
	MsgFrom     int32                      `protobuf:"zigzag32,16,opt,name=msg_from,json=msgFrom,proto3" json:"msg_from,omitempty"`          // sint32_msg_from
	PcBody      []byte                     `protobuf:"bytes,17,opt,name=pc_body,json=pcBody,proto3" json:"pc_body,omitempty"`                // bytes_pc_body
	Index       []byte                     `protobuf:"bytes,18,opt,name=index,proto3" json:"index,omitempty"`                                // string_index
	Redchannel  uint32                     `protobuf:"varint,19,opt,name=redchannel,proto3" json:"redchannel,omitempty"`                     // uint32_redchannel
	GrapUin     []uint64                   `protobuf:"varint,20,rep,packed,name=grap_uin,json=grapUin,proto3" json:"grap_uin,omitempty"`     // uint64_grap_uin
	PbReserve   []byte                     `protobuf:"bytes,21,opt,name=pb_reserve,json=pbReserve,proto3" json:"pb_reserve,omitempty"`       // bytes_pb_reserve
}

func (x *IMMsgBody_QQWalletAioBody) Reset() {
	*x = IMMsgBody_QQWalletAioBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_QQWalletAioBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_QQWalletAioBody) ProtoMessage() {}

func (x *IMMsgBody_QQWalletAioBody) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_QQWalletAioBody.ProtoReflect.Descriptor instead.
func (*IMMsgBody_QQWalletAioBody) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 45}
}

func (x *IMMsgBody_QQWalletAioBody) GetSenduin() uint64 {
	if x != nil {
		return x.Senduin
	}
	return 0
}

func (x *IMMsgBody_QQWalletAioBody) GetSender() *IMMsgBody_QQWalletAioElem {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *IMMsgBody_QQWalletAioBody) GetReceiver() *IMMsgBody_QQWalletAioElem {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *IMMsgBody_QQWalletAioBody) GetChannelid() int32 {
	if x != nil {
		return x.Channelid
	}
	return 0
}

func (x *IMMsgBody_QQWalletAioBody) GetTemplateid() int32 {
	if x != nil {
		return x.Templateid
	}
	return 0
}

func (x *IMMsgBody_QQWalletAioBody) GetResend() uint32 {
	if x != nil {
		return x.Resend
	}
	return 0
}

func (x *IMMsgBody_QQWalletAioBody) GetMsgPriority() uint32 {
	if x != nil {
		return x.MsgPriority
	}
	return 0
}

func (x *IMMsgBody_QQWalletAioBody) GetRedtype() int32 {
	if x != nil {
		return x.Redtype
	}
	return 0
}

func (x *IMMsgBody_QQWalletAioBody) GetBillno() []byte {
	if x != nil {
		return x.Billno
	}
	return nil
}

func (x *IMMsgBody_QQWalletAioBody) GetAuthkey() []byte {
	if x != nil {
		return x.Authkey
	}
	return nil
}

func (x *IMMsgBody_QQWalletAioBody) GetSessiontype() int32 {
	if x != nil {
		return x.Sessiontype
	}
	return 0
}

func (x *IMMsgBody_QQWalletAioBody) GetMsgtype() int32 {
	if x != nil {
		return x.Msgtype
	}
	return 0
}

func (x *IMMsgBody_QQWalletAioBody) GetEnvelopeid() int32 {
	if x != nil {
		return x.Envelopeid
	}
	return 0
}

func (x *IMMsgBody_QQWalletAioBody) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *IMMsgBody_QQWalletAioBody) GetConftype() int32 {
	if x != nil {
		return x.Conftype
	}
	return 0
}

func (x *IMMsgBody_QQWalletAioBody) GetMsgFrom() int32 {
	if x != nil {
		return x.MsgFrom
	}
	return 0
}

func (x *IMMsgBody_QQWalletAioBody) GetPcBody() []byte {
	if x != nil {
		return x.PcBody
	}
	return nil
}

func (x *IMMsgBody_QQWalletAioBody) GetIndex() []byte {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *IMMsgBody_QQWalletAioBody) GetRedchannel() uint32 {
	if x != nil {
		return x.Redchannel
	}
	return 0
}

func (x *IMMsgBody_QQWalletAioBody) GetGrapUin() []uint64 {
	if x != nil {
		return x.GrapUin
	}
	return nil
}

func (x *IMMsgBody_QQWalletAioBody) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

// QQWalletAioElem is the message type for the QQWalletAioElem.
type IMMsgBody_QQWalletAioElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Background      uint32 `protobuf:"varint,1,opt,name=background,proto3" json:"background,omitempty"`                                  // uint32_background
	Icon            uint32 `protobuf:"varint,2,opt,name=icon,proto3" json:"icon,omitempty"`                                              // uint32_icon
	Title           []byte `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                                             // bytes_title
	Subtitle        []byte `protobuf:"bytes,4,opt,name=subtitle,proto3" json:"subtitle,omitempty"`                                       // bytes_subtitle
	Content         []byte `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                                         // bytes_content
	Linkurl         []byte `protobuf:"bytes,6,opt,name=linkurl,proto3" json:"linkurl,omitempty"`                                         // bytes_linkurl
	Blackstripe     []byte `protobuf:"bytes,7,opt,name=blackstripe,proto3" json:"blackstripe,omitempty"`                                 // bytes_blackstripe
	Notice          []byte `protobuf:"bytes,8,opt,name=notice,proto3" json:"notice,omitempty"`                                           // bytes_notice
	TitleColor      uint32 `protobuf:"varint,9,opt,name=title_color,json=titleColor,proto3" json:"title_color,omitempty"`                // uint32_title_color
	SubtitleColor   uint32 `protobuf:"varint,10,opt,name=subtitle_color,json=subtitleColor,proto3" json:"subtitle_color,omitempty"`      // uint32_subtitle_color
	ActionsPriority []byte `protobuf:"bytes,11,opt,name=actions_priority,json=actionsPriority,proto3" json:"actions_priority,omitempty"` // bytes_actions_priority
	JumpUrl         []byte `protobuf:"bytes,12,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url,omitempty"`                         // bytes_jump_url
	NativeIos       []byte `protobuf:"bytes,13,opt,name=native_ios,json=nativeIos,proto3" json:"native_ios,omitempty"`                   // bytes_native_ios
	NativeAndroid   []byte `protobuf:"bytes,14,opt,name=native_android,json=nativeAndroid,proto3" json:"native_android,omitempty"`       // bytes_native_android
	Iconurl         []byte `protobuf:"bytes,15,opt,name=iconurl,proto3" json:"iconurl,omitempty"`                                        // bytes_iconurl
	ContentColor    uint32 `protobuf:"varint,16,opt,name=content_color,json=contentColor,proto3" json:"content_color,omitempty"`         // uint32_content_color
	ContentBgcolor  uint32 `protobuf:"varint,17,opt,name=content_bgcolor,json=contentBgcolor,proto3" json:"content_bgcolor,omitempty"`   // uint32_content_bgcolor
	AioImageLeft    []byte `protobuf:"bytes,18,opt,name=aio_image_left,json=aioImageLeft,proto3" json:"aio_image_left,omitempty"`        // bytes_aio_image_left
	AioImageRight   []byte `protobuf:"bytes,19,opt,name=aio_image_right,json=aioImageRight,proto3" json:"aio_image_right,omitempty"`     // bytes_aio_image_right
	CftImage        []byte `protobuf:"bytes,20,opt,name=cft_image,json=cftImage,proto3" json:"cft_image,omitempty"`                      // bytes_cft_image
	PbReserve       []byte `protobuf:"bytes,21,opt,name=pb_reserve,json=pbReserve,proto3" json:"pb_reserve,omitempty"`                   // bytes_pb_reserve
}

func (x *IMMsgBody_QQWalletAioElem) Reset() {
	*x = IMMsgBody_QQWalletAioElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_QQWalletAioElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_QQWalletAioElem) ProtoMessage() {}

func (x *IMMsgBody_QQWalletAioElem) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_QQWalletAioElem.ProtoReflect.Descriptor instead.
func (*IMMsgBody_QQWalletAioElem) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 46}
}

func (x *IMMsgBody_QQWalletAioElem) GetBackground() uint32 {
	if x != nil {
		return x.Background
	}
	return 0
}

func (x *IMMsgBody_QQWalletAioElem) GetIcon() uint32 {
	if x != nil {
		return x.Icon
	}
	return 0
}

func (x *IMMsgBody_QQWalletAioElem) GetTitle() []byte {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *IMMsgBody_QQWalletAioElem) GetSubtitle() []byte {
	if x != nil {
		return x.Subtitle
	}
	return nil
}

func (x *IMMsgBody_QQWalletAioElem) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *IMMsgBody_QQWalletAioElem) GetLinkurl() []byte {
	if x != nil {
		return x.Linkurl
	}
	return nil
}

func (x *IMMsgBody_QQWalletAioElem) GetBlackstripe() []byte {
	if x != nil {
		return x.Blackstripe
	}
	return nil
}

func (x *IMMsgBody_QQWalletAioElem) GetNotice() []byte {
	if x != nil {
		return x.Notice
	}
	return nil
}

func (x *IMMsgBody_QQWalletAioElem) GetTitleColor() uint32 {
	if x != nil {
		return x.TitleColor
	}
	return 0
}

func (x *IMMsgBody_QQWalletAioElem) GetSubtitleColor() uint32 {
	if x != nil {
		return x.SubtitleColor
	}
	return 0
}

func (x *IMMsgBody_QQWalletAioElem) GetActionsPriority() []byte {
	if x != nil {
		return x.ActionsPriority
	}
	return nil
}

func (x *IMMsgBody_QQWalletAioElem) GetJumpUrl() []byte {
	if x != nil {
		return x.JumpUrl
	}
	return nil
}

func (x *IMMsgBody_QQWalletAioElem) GetNativeIos() []byte {
	if x != nil {
		return x.NativeIos
	}
	return nil
}

func (x *IMMsgBody_QQWalletAioElem) GetNativeAndroid() []byte {
	if x != nil {
		return x.NativeAndroid
	}
	return nil
}

func (x *IMMsgBody_QQWalletAioElem) GetIconurl() []byte {
	if x != nil {
		return x.Iconurl
	}
	return nil
}

func (x *IMMsgBody_QQWalletAioElem) GetContentColor() uint32 {
	if x != nil {
		return x.ContentColor
	}
	return 0
}

func (x *IMMsgBody_QQWalletAioElem) GetContentBgcolor() uint32 {
	if x != nil {
		return x.ContentBgcolor
	}
	return 0
}

func (x *IMMsgBody_QQWalletAioElem) GetAioImageLeft() []byte {
	if x != nil {
		return x.AioImageLeft
	}
	return nil
}

func (x *IMMsgBody_QQWalletAioElem) GetAioImageRight() []byte {
	if x != nil {
		return x.AioImageRight
	}
	return nil
}

func (x *IMMsgBody_QQWalletAioElem) GetCftImage() []byte {
	if x != nil {
		return x.CftImage
	}
	return nil
}

func (x *IMMsgBody_QQWalletAioElem) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

// QQWalletMsg is the message type for the QQWalletMsg.
type IMMsgBody_QQWalletMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AioBody *IMMsgBody_QQWalletAioBody `protobuf:"bytes,1,opt,name=aio_body,json=aioBody,proto3" json:"aio_body,omitempty"` // aio_body
}

func (x *IMMsgBody_QQWalletMsg) Reset() {
	*x = IMMsgBody_QQWalletMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_QQWalletMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_QQWalletMsg) ProtoMessage() {}

func (x *IMMsgBody_QQWalletMsg) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_QQWalletMsg.ProtoReflect.Descriptor instead.
func (*IMMsgBody_QQWalletMsg) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 47}
}

func (x *IMMsgBody_QQWalletMsg) GetAioBody() *IMMsgBody_QQWalletAioBody {
	if x != nil {
		return x.AioBody
	}
	return nil
}

// RedBagInfo is the message type for the RedBagInfo.
type IMMsgBody_RedBagInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedbagType uint32 `protobuf:"varint,1,opt,name=redbag_type,json=redbagType,proto3" json:"redbag_type,omitempty"` // redbag_type
}

func (x *IMMsgBody_RedBagInfo) Reset() {
	*x = IMMsgBody_RedBagInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_RedBagInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_RedBagInfo) ProtoMessage() {}

func (x *IMMsgBody_RedBagInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_RedBagInfo.ProtoReflect.Descriptor instead.
func (*IMMsgBody_RedBagInfo) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 48}
}

func (x *IMMsgBody_RedBagInfo) GetRedbagType() uint32 {
	if x != nil {
		return x.RedbagType
	}
	return 0
}

// RichMsg is the message type for the RichMsg.
type IMMsgBody_RichMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template_1 []byte `protobuf:"bytes,1,opt,name=template_1,json=template1,proto3" json:"template_1,omitempty"`  // bytes_template_1
	ServiceId  uint32 `protobuf:"varint,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"` // uint32_service_id
	MsgResid   []byte `protobuf:"bytes,3,opt,name=msg_resid,json=msgResid,proto3" json:"msg_resid,omitempty"`     // bytes_msg_resid
	Rand       uint32 `protobuf:"varint,4,opt,name=rand,proto3" json:"rand,omitempty"`                            // uint32_rand
	Seq        uint32 `protobuf:"varint,5,opt,name=seq,proto3" json:"seq,omitempty"`                              // uint32_seq
	Flags      uint32 `protobuf:"varint,6,opt,name=flags,proto3" json:"flags,omitempty"`                          // uint32_flags
}

func (x *IMMsgBody_RichMsg) Reset() {
	*x = IMMsgBody_RichMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_RichMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_RichMsg) ProtoMessage() {}

func (x *IMMsgBody_RichMsg) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_RichMsg.ProtoReflect.Descriptor instead.
func (*IMMsgBody_RichMsg) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 49}
}

func (x *IMMsgBody_RichMsg) GetTemplate_1() []byte {
	if x != nil {
		return x.Template_1
	}
	return nil
}

func (x *IMMsgBody_RichMsg) GetServiceId() uint32 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *IMMsgBody_RichMsg) GetMsgResid() []byte {
	if x != nil {
		return x.MsgResid
	}
	return nil
}

func (x *IMMsgBody_RichMsg) GetRand() uint32 {
	if x != nil {
		return x.Rand
	}
	return 0
}

func (x *IMMsgBody_RichMsg) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *IMMsgBody_RichMsg) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

// RichText is the message type for the RichText.
type IMMsgBody_RichText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr            *IMMsgBody_Attr           `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`                                               // attr
	Elems           []*IMMsgBody_Elem         `protobuf:"bytes,2,rep,name=elems,proto3" json:"elems,omitempty"`                                             // elems
	NotOnlineFile   *IMMsgBody_NotOnlineFile  `protobuf:"bytes,3,opt,name=not_online_file,json=notOnlineFile,proto3" json:"not_online_file,omitempty"`      // not_online_file
	Ptt             *IMMsgBody_Ptt            `protobuf:"bytes,4,opt,name=ptt,proto3" json:"ptt,omitempty"`                                                 // ptt
	TmpPtt          *IMMsgBody_TmpPtt         `protobuf:"bytes,5,opt,name=tmp_ptt,json=tmpPtt,proto3" json:"tmp_ptt,omitempty"`                             // tmp_ptt
	Trans_211TmpMsg *IMMsgBody_Trans211TmpMsg `protobuf:"bytes,6,opt,name=trans_211_tmp_msg,json=trans211TmpMsg,proto3" json:"trans_211_tmp_msg,omitempty"` // trans_211_tmp_msg
}

func (x *IMMsgBody_RichText) Reset() {
	*x = IMMsgBody_RichText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_RichText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_RichText) ProtoMessage() {}

func (x *IMMsgBody_RichText) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_RichText.ProtoReflect.Descriptor instead.
func (*IMMsgBody_RichText) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 50}
}

func (x *IMMsgBody_RichText) GetAttr() *IMMsgBody_Attr {
	if x != nil {
		return x.Attr
	}
	return nil
}

func (x *IMMsgBody_RichText) GetElems() []*IMMsgBody_Elem {
	if x != nil {
		return x.Elems
	}
	return nil
}

func (x *IMMsgBody_RichText) GetNotOnlineFile() *IMMsgBody_NotOnlineFile {
	if x != nil {
		return x.NotOnlineFile
	}
	return nil
}

func (x *IMMsgBody_RichText) GetPtt() *IMMsgBody_Ptt {
	if x != nil {
		return x.Ptt
	}
	return nil
}

func (x *IMMsgBody_RichText) GetTmpPtt() *IMMsgBody_TmpPtt {
	if x != nil {
		return x.TmpPtt
	}
	return nil
}

func (x *IMMsgBody_RichText) GetTrans_211TmpMsg() *IMMsgBody_Trans211TmpMsg {
	if x != nil {
		return x.Trans_211TmpMsg
	}
	return nil
}

// SecretFileMsg is the message type for the SecretFileMsg.
type IMMsgBody_SecretFileMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileKey              []byte                    `protobuf:"bytes,1,opt,name=file_key,json=fileKey,proto3" json:"file_key,omitempty"`                                           // bytes_file_key
	FromUin              uint64                    `protobuf:"varint,2,opt,name=from_uin,json=fromUin,proto3" json:"from_uin,omitempty"`                                          // uint64_from_uin
	ToUin                uint64                    `protobuf:"varint,3,opt,name=to_uin,json=toUin,proto3" json:"to_uin,omitempty"`                                                // uint64_to_uin
	Status               uint32                    `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`                                                           // uint32_status
	Ttl                  uint32                    `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty"`                                                                 // uint32_ttl
	Type                 uint32                    `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`                                                               // uint32_type
	EncryptPreheadLength uint32                    `protobuf:"varint,7,opt,name=encrypt_prehead_length,json=encryptPreheadLength,proto3" json:"encrypt_prehead_length,omitempty"` // uint32_encrypt_prehead_length
	EncryptType          uint32                    `protobuf:"varint,8,opt,name=encrypt_type,json=encryptType,proto3" json:"encrypt_type,omitempty"`                              // uint32_encrypt_type
	EncryptKey           []byte                    `protobuf:"bytes,9,opt,name=encrypt_key,json=encryptKey,proto3" json:"encrypt_key,omitempty"`                                  // bytes_encrypt_key
	ReadTimes            uint32                    `protobuf:"varint,10,opt,name=read_times,json=readTimes,proto3" json:"read_times,omitempty"`                                   // uint32_read_times
	LeftTime             uint32                    `protobuf:"varint,11,opt,name=left_time,json=leftTime,proto3" json:"left_time,omitempty"`                                      // uint32_left_time
	NotOnlineImage       *IMMsgBody_NotOnlineImage `protobuf:"bytes,12,opt,name=not_online_image,json=notOnlineImage,proto3" json:"not_online_image,omitempty"`                   // not_online_image
	ElemFlags2           *IMMsgBody_ElemFlags2     `protobuf:"bytes,13,opt,name=elem_flags2,json=elemFlags2,proto3" json:"elem_flags2,omitempty"`                                 // elem_flags2
	Opertype             uint32                    `protobuf:"varint,14,opt,name=opertype,proto3" json:"opertype,omitempty"`                                                      // uint32_opertype
	Fromphonenum         string                    `protobuf:"bytes,15,opt,name=fromphonenum,proto3" json:"fromphonenum,omitempty"`                                               // str_fromphonenum
}

func (x *IMMsgBody_SecretFileMsg) Reset() {
	*x = IMMsgBody_SecretFileMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_SecretFileMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_SecretFileMsg) ProtoMessage() {}

func (x *IMMsgBody_SecretFileMsg) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_SecretFileMsg.ProtoReflect.Descriptor instead.
func (*IMMsgBody_SecretFileMsg) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 51}
}

func (x *IMMsgBody_SecretFileMsg) GetFileKey() []byte {
	if x != nil {
		return x.FileKey
	}
	return nil
}

func (x *IMMsgBody_SecretFileMsg) GetFromUin() uint64 {
	if x != nil {
		return x.FromUin
	}
	return 0
}

func (x *IMMsgBody_SecretFileMsg) GetToUin() uint64 {
	if x != nil {
		return x.ToUin
	}
	return 0
}

func (x *IMMsgBody_SecretFileMsg) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *IMMsgBody_SecretFileMsg) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *IMMsgBody_SecretFileMsg) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *IMMsgBody_SecretFileMsg) GetEncryptPreheadLength() uint32 {
	if x != nil {
		return x.EncryptPreheadLength
	}
	return 0
}

func (x *IMMsgBody_SecretFileMsg) GetEncryptType() uint32 {
	if x != nil {
		return x.EncryptType
	}
	return 0
}

func (x *IMMsgBody_SecretFileMsg) GetEncryptKey() []byte {
	if x != nil {
		return x.EncryptKey
	}
	return nil
}

func (x *IMMsgBody_SecretFileMsg) GetReadTimes() uint32 {
	if x != nil {
		return x.ReadTimes
	}
	return 0
}

func (x *IMMsgBody_SecretFileMsg) GetLeftTime() uint32 {
	if x != nil {
		return x.LeftTime
	}
	return 0
}

func (x *IMMsgBody_SecretFileMsg) GetNotOnlineImage() *IMMsgBody_NotOnlineImage {
	if x != nil {
		return x.NotOnlineImage
	}
	return nil
}

func (x *IMMsgBody_SecretFileMsg) GetElemFlags2() *IMMsgBody_ElemFlags2 {
	if x != nil {
		return x.ElemFlags2
	}
	return nil
}

func (x *IMMsgBody_SecretFileMsg) GetOpertype() uint32 {
	if x != nil {
		return x.Opertype
	}
	return 0
}

func (x *IMMsgBody_SecretFileMsg) GetFromphonenum() string {
	if x != nil {
		return x.Fromphonenum
	}
	return ""
}

// ShakeWindow is the message type for the ShakeWindow.
type IMMsgBody_ShakeWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`       // uint32_type
	Reserve uint32 `protobuf:"varint,2,opt,name=reserve,proto3" json:"reserve,omitempty"` // uint32_reserve
	Uin     uint64 `protobuf:"varint,3,opt,name=uin,proto3" json:"uin,omitempty"`         // uint64_uin
}

func (x *IMMsgBody_ShakeWindow) Reset() {
	*x = IMMsgBody_ShakeWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_ShakeWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_ShakeWindow) ProtoMessage() {}

func (x *IMMsgBody_ShakeWindow) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_ShakeWindow.ProtoReflect.Descriptor instead.
func (*IMMsgBody_ShakeWindow) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 52}
}

func (x *IMMsgBody_ShakeWindow) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *IMMsgBody_ShakeWindow) GetReserve() uint32 {
	if x != nil {
		return x.Reserve
	}
	return 0
}

func (x *IMMsgBody_ShakeWindow) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

// SmallEmoji is the message type for the SmallEmoji.
type IMMsgBody_SmallEmoji struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackIdSum uint32 `protobuf:"varint,1,opt,name=packIdSum,proto3" json:"packIdSum,omitempty"` // packIdSum
	ImageType uint32 `protobuf:"varint,2,opt,name=imageType,proto3" json:"imageType,omitempty"` // imageType
}

func (x *IMMsgBody_SmallEmoji) Reset() {
	*x = IMMsgBody_SmallEmoji{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_SmallEmoji) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_SmallEmoji) ProtoMessage() {}

func (x *IMMsgBody_SmallEmoji) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_SmallEmoji.ProtoReflect.Descriptor instead.
func (*IMMsgBody_SmallEmoji) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 53}
}

func (x *IMMsgBody_SmallEmoji) GetPackIdSum() uint32 {
	if x != nil {
		return x.PackIdSum
	}
	return 0
}

func (x *IMMsgBody_SmallEmoji) GetImageType() uint32 {
	if x != nil {
		return x.ImageType
	}
	return 0
}

// SourceMsg is the message type for the SourceMsg.
type IMMsgBody_SourceMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrigSeqs  []uint32          `protobuf:"varint,1,rep,packed,name=orig_seqs,json=origSeqs,proto3" json:"orig_seqs,omitempty"` // uint32_orig_seqs
	SenderUin uint64            `protobuf:"varint,2,opt,name=sender_uin,json=senderUin,proto3" json:"sender_uin,omitempty"`     // uint64_sender_uin
	Time      uint32            `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`                                // uint32_time
	Flag      uint32            `protobuf:"varint,4,opt,name=flag,proto3" json:"flag,omitempty"`                                // uint32_flag
	Elems     []*IMMsgBody_Elem `protobuf:"bytes,5,rep,name=elems,proto3" json:"elems,omitempty"`                               // elems
	Type      uint32            `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`                                // uint32_type
	RichMsg   []byte            `protobuf:"bytes,7,opt,name=richMsg,proto3" json:"richMsg,omitempty"`                           // bytes_richMsg
	PbReserve []byte            `protobuf:"bytes,8,opt,name=pb_reserve,json=pbReserve,proto3" json:"pb_reserve,omitempty"`      // bytes_pb_reserve
	SrcMsg    []byte            `protobuf:"bytes,9,opt,name=src_msg,json=srcMsg,proto3" json:"src_msg,omitempty"`               // bytes_src_msg
	ToUin     uint64            `protobuf:"varint,10,opt,name=to_uin,json=toUin,proto3" json:"to_uin,omitempty"`                // uint64_to_uin
	TroopName []byte            `protobuf:"bytes,11,opt,name=troop_name,json=troopName,proto3" json:"troop_name,omitempty"`     // bytes_troop_name
}

func (x *IMMsgBody_SourceMsg) Reset() {
	*x = IMMsgBody_SourceMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_SourceMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_SourceMsg) ProtoMessage() {}

func (x *IMMsgBody_SourceMsg) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_SourceMsg.ProtoReflect.Descriptor instead.
func (*IMMsgBody_SourceMsg) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 54}
}

func (x *IMMsgBody_SourceMsg) GetOrigSeqs() []uint32 {
	if x != nil {
		return x.OrigSeqs
	}
	return nil
}

func (x *IMMsgBody_SourceMsg) GetSenderUin() uint64 {
	if x != nil {
		return x.SenderUin
	}
	return 0
}

func (x *IMMsgBody_SourceMsg) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *IMMsgBody_SourceMsg) GetFlag() uint32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *IMMsgBody_SourceMsg) GetElems() []*IMMsgBody_Elem {
	if x != nil {
		return x.Elems
	}
	return nil
}

func (x *IMMsgBody_SourceMsg) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *IMMsgBody_SourceMsg) GetRichMsg() []byte {
	if x != nil {
		return x.RichMsg
	}
	return nil
}

func (x *IMMsgBody_SourceMsg) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

func (x *IMMsgBody_SourceMsg) GetSrcMsg() []byte {
	if x != nil {
		return x.SrcMsg
	}
	return nil
}

func (x *IMMsgBody_SourceMsg) GetToUin() uint64 {
	if x != nil {
		return x.ToUin
	}
	return 0
}

func (x *IMMsgBody_SourceMsg) GetTroopName() []byte {
	if x != nil {
		return x.TroopName
	}
	return nil
}

// Text is the message type for the Text.
type IMMsgBody_Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str       []byte `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`                               // str
	Link      string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`                             // link
	Attr_6Buf []byte `protobuf:"bytes,3,opt,name=attr_6_buf,json=attr6Buf,proto3" json:"attr_6_buf,omitempty"`   // attr_6_buf
	Attr_7Buf []byte `protobuf:"bytes,4,opt,name=attr_7_buf,json=attr7Buf,proto3" json:"attr_7_buf,omitempty"`   // attr_7_buf
	Buf       []byte `protobuf:"bytes,11,opt,name=buf,proto3" json:"buf,omitempty"`                              // buf
	PbReserve []byte `protobuf:"bytes,12,opt,name=pb_reserve,json=pbReserve,proto3" json:"pb_reserve,omitempty"` // bytes_pb_reserve
}

func (x *IMMsgBody_Text) Reset() {
	*x = IMMsgBody_Text{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_Text) ProtoMessage() {}

func (x *IMMsgBody_Text) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_Text.ProtoReflect.Descriptor instead.
func (*IMMsgBody_Text) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 55}
}

func (x *IMMsgBody_Text) GetStr() []byte {
	if x != nil {
		return x.Str
	}
	return nil
}

func (x *IMMsgBody_Text) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *IMMsgBody_Text) GetAttr_6Buf() []byte {
	if x != nil {
		return x.Attr_6Buf
	}
	return nil
}

func (x *IMMsgBody_Text) GetAttr_7Buf() []byte {
	if x != nil {
		return x.Attr_7Buf
	}
	return nil
}

func (x *IMMsgBody_Text) GetBuf() []byte {
	if x != nil {
		return x.Buf
	}
	return nil
}

func (x *IMMsgBody_Text) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

// TipsInfo is the message type for the TipsInfo.
type IMMsgBody_TipsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"` // text
}

func (x *IMMsgBody_TipsInfo) Reset() {
	*x = IMMsgBody_TipsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_TipsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_TipsInfo) ProtoMessage() {}

func (x *IMMsgBody_TipsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_TipsInfo.ProtoReflect.Descriptor instead.
func (*IMMsgBody_TipsInfo) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 56}
}

func (x *IMMsgBody_TipsInfo) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// TmpPtt is the message type for the TmpPtt.
type IMMsgBody_TmpPtt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileType      uint32 `protobuf:"varint,1,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`                  // uint32_file_type
	FileUuid      []byte `protobuf:"bytes,2,opt,name=file_uuid,json=fileUuid,proto3" json:"file_uuid,omitempty"`                   // bytes_file_uuid
	FileMd5       []byte `protobuf:"bytes,3,opt,name=file_md5,json=fileMd5,proto3" json:"file_md5,omitempty"`                      // bytes_file_md5
	FileName      []byte `protobuf:"bytes,4,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`                   // bytes_file_name
	FileSize      uint32 `protobuf:"varint,5,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`                  // uint32_file_size
	PttTimes      uint32 `protobuf:"varint,6,opt,name=ptt_times,json=pttTimes,proto3" json:"ptt_times,omitempty"`                  // uint64_ptt_times
	UserType      uint32 `protobuf:"varint,7,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`                  // uint32_user_type
	PtttransFlag  uint32 `protobuf:"varint,8,opt,name=ptttrans_flag,json=ptttransFlag,proto3" json:"ptttrans_flag,omitempty"`      // uint32_ptttrans_flag
	BusiType      uint32 `protobuf:"varint,9,opt,name=busi_type,json=busiType,proto3" json:"busi_type,omitempty"`                  // uint32_busi_type
	MsgId         uint64 `protobuf:"varint,10,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`                          // uint64_msg_id
	PbReserve     []byte `protobuf:"bytes,30,opt,name=pb_reserve,json=pbReserve,proto3" json:"pb_reserve,omitempty"`               // bytes_pb_reserve
	PttEncodeData []byte `protobuf:"bytes,31,opt,name=ptt_encode_data,json=pttEncodeData,proto3" json:"ptt_encode_data,omitempty"` // ptt_encode_data
}

func (x *IMMsgBody_TmpPtt) Reset() {
	*x = IMMsgBody_TmpPtt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_TmpPtt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_TmpPtt) ProtoMessage() {}

func (x *IMMsgBody_TmpPtt) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_TmpPtt.ProtoReflect.Descriptor instead.
func (*IMMsgBody_TmpPtt) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 57}
}

func (x *IMMsgBody_TmpPtt) GetFileType() uint32 {
	if x != nil {
		return x.FileType
	}
	return 0
}

func (x *IMMsgBody_TmpPtt) GetFileUuid() []byte {
	if x != nil {
		return x.FileUuid
	}
	return nil
}

func (x *IMMsgBody_TmpPtt) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *IMMsgBody_TmpPtt) GetFileName() []byte {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *IMMsgBody_TmpPtt) GetFileSize() uint32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *IMMsgBody_TmpPtt) GetPttTimes() uint32 {
	if x != nil {
		return x.PttTimes
	}
	return 0
}

func (x *IMMsgBody_TmpPtt) GetUserType() uint32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *IMMsgBody_TmpPtt) GetPtttransFlag() uint32 {
	if x != nil {
		return x.PtttransFlag
	}
	return 0
}

func (x *IMMsgBody_TmpPtt) GetBusiType() uint32 {
	if x != nil {
		return x.BusiType
	}
	return 0
}

func (x *IMMsgBody_TmpPtt) GetMsgId() uint64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *IMMsgBody_TmpPtt) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

func (x *IMMsgBody_TmpPtt) GetPttEncodeData() []byte {
	if x != nil {
		return x.PttEncodeData
	}
	return nil
}

// Trans211TmpMsg is the message type for the Trans211TmpMsg.
type IMMsgBody_Trans211TmpMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgBody []byte `protobuf:"bytes,1,opt,name=msg_body,json=msgBody,proto3" json:"msg_body,omitempty"` // bytes_msg_body
	C2CCmd  uint32 `protobuf:"varint,2,opt,name=c2c_cmd,json=c2cCmd,proto3" json:"c2c_cmd,omitempty"`   // uint32_c2c_cmd
}

func (x *IMMsgBody_Trans211TmpMsg) Reset() {
	*x = IMMsgBody_Trans211TmpMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_Trans211TmpMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_Trans211TmpMsg) ProtoMessage() {}

func (x *IMMsgBody_Trans211TmpMsg) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_Trans211TmpMsg.ProtoReflect.Descriptor instead.
func (*IMMsgBody_Trans211TmpMsg) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 58}
}

func (x *IMMsgBody_Trans211TmpMsg) GetMsgBody() []byte {
	if x != nil {
		return x.MsgBody
	}
	return nil
}

func (x *IMMsgBody_Trans211TmpMsg) GetC2CCmd() uint32 {
	if x != nil {
		return x.C2CCmd
	}
	return 0
}

// TransElem is the message type for the TransElem.
type IMMsgBody_TransElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElemType  uint32 `protobuf:"varint,1,opt,name=elem_type,json=elemType,proto3" json:"elem_type,omitempty"`   // elem_type
	ElemValue []byte `protobuf:"bytes,2,opt,name=elem_value,json=elemValue,proto3" json:"elem_value,omitempty"` // elem_value
}

func (x *IMMsgBody_TransElem) Reset() {
	*x = IMMsgBody_TransElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_TransElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_TransElem) ProtoMessage() {}

func (x *IMMsgBody_TransElem) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_TransElem.ProtoReflect.Descriptor instead.
func (*IMMsgBody_TransElem) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 59}
}

func (x *IMMsgBody_TransElem) GetElemType() uint32 {
	if x != nil {
		return x.ElemType
	}
	return 0
}

func (x *IMMsgBody_TransElem) GetElemValue() []byte {
	if x != nil {
		return x.ElemValue
	}
	return nil
}

// VideoFile is the message type for the VideoFile.
type IMMsgBody_VideoFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileUuid           []byte   `protobuf:"bytes,1,opt,name=file_uuid,json=fileUuid,proto3" json:"file_uuid,omitempty"`                                 // bytes_file_uuid
	FileMd5            []byte   `protobuf:"bytes,2,opt,name=file_md5,json=fileMd5,proto3" json:"file_md5,omitempty"`                                    // bytes_file_md5
	FileName           []byte   `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`                                 // bytes_file_name
	FileFormat         uint32   `protobuf:"varint,4,opt,name=file_format,json=fileFormat,proto3" json:"file_format,omitempty"`                          // uint32_file_format
	FileTime           uint32   `protobuf:"varint,5,opt,name=file_time,json=fileTime,proto3" json:"file_time,omitempty"`                                // uint32_file_time
	FileSize           uint32   `protobuf:"varint,6,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`                                // uint32_file_size
	ThumbWidth         uint32   `protobuf:"varint,7,opt,name=thumb_width,json=thumbWidth,proto3" json:"thumb_width,omitempty"`                          // uint32_thumb_width
	ThumbHeight        uint32   `protobuf:"varint,8,opt,name=thumb_height,json=thumbHeight,proto3" json:"thumb_height,omitempty"`                       // uint32_thumb_height
	ThumbFileMd5       []byte   `protobuf:"bytes,9,opt,name=thumb_file_md5,json=thumbFileMd5,proto3" json:"thumb_file_md5,omitempty"`                   // bytes_thumb_file_md5
	Source             []byte   `protobuf:"bytes,10,opt,name=source,proto3" json:"source,omitempty"`                                                    // bytes_source
	ThumbFileSize      uint32   `protobuf:"varint,11,opt,name=thumb_file_size,json=thumbFileSize,proto3" json:"thumb_file_size,omitempty"`              // uint32_thumb_file_size
	BusiType           uint32   `protobuf:"varint,12,opt,name=busi_type,json=busiType,proto3" json:"busi_type,omitempty"`                               // uint32_busi_type
	FromChatType       uint32   `protobuf:"varint,13,opt,name=from_chat_type,json=fromChatType,proto3" json:"from_chat_type,omitempty"`                 // uint32_from_chat_type
	ToChatType         uint32   `protobuf:"varint,14,opt,name=to_chat_type,json=toChatType,proto3" json:"to_chat_type,omitempty"`                       // uint32_to_chat_type
	SupportProgressive bool     `protobuf:"varint,15,opt,name=support_progressive,json=supportProgressive,proto3" json:"support_progressive,omitempty"` // bool_support_progressive
	FileWidth          uint32   `protobuf:"varint,16,opt,name=file_width,json=fileWidth,proto3" json:"file_width,omitempty"`                            // uint32_file_width
	FileHeight         uint32   `protobuf:"varint,17,opt,name=file_height,json=fileHeight,proto3" json:"file_height,omitempty"`                         // uint32_file_height
	SubBusiType        uint32   `protobuf:"varint,18,opt,name=sub_busi_type,json=subBusiType,proto3" json:"sub_busi_type,omitempty"`                    // uint32_sub_busi_type
	VideoAttr          uint32   `protobuf:"varint,19,opt,name=video_attr,json=videoAttr,proto3" json:"video_attr,omitempty"`                            // uint32_video_attr
	ThumbFileUrls      [][]byte `protobuf:"bytes,20,rep,name=thumb_file_urls,json=thumbFileUrls,proto3" json:"thumb_file_urls,omitempty"`               // rpt_bytes_thumb_file_urls
	VideoFileUrls      [][]byte `protobuf:"bytes,21,rep,name=video_file_urls,json=videoFileUrls,proto3" json:"video_file_urls,omitempty"`               // rpt_bytes_video_file_urls
	ThumbDownloadFlag  uint32   `protobuf:"varint,22,opt,name=thumb_download_flag,json=thumbDownloadFlag,proto3" json:"thumb_download_flag,omitempty"`  // uint32_thumb_download_flag
	VideoDownloadFlag  uint32   `protobuf:"varint,23,opt,name=video_download_flag,json=videoDownloadFlag,proto3" json:"video_download_flag,omitempty"`  // uint32_video_download_flag
	PbReserve          []byte   `protobuf:"bytes,24,opt,name=pb_reserve,json=pbReserve,proto3" json:"pb_reserve,omitempty"`                             // bytes_pb_reserve
}

func (x *IMMsgBody_VideoFile) Reset() {
	*x = IMMsgBody_VideoFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_VideoFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_VideoFile) ProtoMessage() {}

func (x *IMMsgBody_VideoFile) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_VideoFile.ProtoReflect.Descriptor instead.
func (*IMMsgBody_VideoFile) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 60}
}

func (x *IMMsgBody_VideoFile) GetFileUuid() []byte {
	if x != nil {
		return x.FileUuid
	}
	return nil
}

func (x *IMMsgBody_VideoFile) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *IMMsgBody_VideoFile) GetFileName() []byte {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *IMMsgBody_VideoFile) GetFileFormat() uint32 {
	if x != nil {
		return x.FileFormat
	}
	return 0
}

func (x *IMMsgBody_VideoFile) GetFileTime() uint32 {
	if x != nil {
		return x.FileTime
	}
	return 0
}

func (x *IMMsgBody_VideoFile) GetFileSize() uint32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *IMMsgBody_VideoFile) GetThumbWidth() uint32 {
	if x != nil {
		return x.ThumbWidth
	}
	return 0
}

func (x *IMMsgBody_VideoFile) GetThumbHeight() uint32 {
	if x != nil {
		return x.ThumbHeight
	}
	return 0
}

func (x *IMMsgBody_VideoFile) GetThumbFileMd5() []byte {
	if x != nil {
		return x.ThumbFileMd5
	}
	return nil
}

func (x *IMMsgBody_VideoFile) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *IMMsgBody_VideoFile) GetThumbFileSize() uint32 {
	if x != nil {
		return x.ThumbFileSize
	}
	return 0
}

func (x *IMMsgBody_VideoFile) GetBusiType() uint32 {
	if x != nil {
		return x.BusiType
	}
	return 0
}

func (x *IMMsgBody_VideoFile) GetFromChatType() uint32 {
	if x != nil {
		return x.FromChatType
	}
	return 0
}

func (x *IMMsgBody_VideoFile) GetToChatType() uint32 {
	if x != nil {
		return x.ToChatType
	}
	return 0
}

func (x *IMMsgBody_VideoFile) GetSupportProgressive() bool {
	if x != nil {
		return x.SupportProgressive
	}
	return false
}

func (x *IMMsgBody_VideoFile) GetFileWidth() uint32 {
	if x != nil {
		return x.FileWidth
	}
	return 0
}

func (x *IMMsgBody_VideoFile) GetFileHeight() uint32 {
	if x != nil {
		return x.FileHeight
	}
	return 0
}

func (x *IMMsgBody_VideoFile) GetSubBusiType() uint32 {
	if x != nil {
		return x.SubBusiType
	}
	return 0
}

func (x *IMMsgBody_VideoFile) GetVideoAttr() uint32 {
	if x != nil {
		return x.VideoAttr
	}
	return 0
}

func (x *IMMsgBody_VideoFile) GetThumbFileUrls() [][]byte {
	if x != nil {
		return x.ThumbFileUrls
	}
	return nil
}

func (x *IMMsgBody_VideoFile) GetVideoFileUrls() [][]byte {
	if x != nil {
		return x.VideoFileUrls
	}
	return nil
}

func (x *IMMsgBody_VideoFile) GetThumbDownloadFlag() uint32 {
	if x != nil {
		return x.ThumbDownloadFlag
	}
	return 0
}

func (x *IMMsgBody_VideoFile) GetVideoDownloadFlag() uint32 {
	if x != nil {
		return x.VideoDownloadFlag
	}
	return 0
}

func (x *IMMsgBody_VideoFile) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

// WorkflowNotifyMsg is the message type for the WorkflowNotifyMsg.
type IMMsgBody_WorkflowNotifyMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtMsg    []byte `protobuf:"bytes,1,opt,name=ext_msg,json=extMsg,proto3" json:"ext_msg,omitempty"`           // bytes_ext_msg
	CreateUin uint64 `protobuf:"varint,2,opt,name=create_uin,json=createUin,proto3" json:"create_uin,omitempty"` // uint64_create_uin
}

func (x *IMMsgBody_WorkflowNotifyMsg) Reset() {
	*x = IMMsgBody_WorkflowNotifyMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_WorkflowNotifyMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_WorkflowNotifyMsg) ProtoMessage() {}

func (x *IMMsgBody_WorkflowNotifyMsg) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_WorkflowNotifyMsg.ProtoReflect.Descriptor instead.
func (*IMMsgBody_WorkflowNotifyMsg) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 61}
}

func (x *IMMsgBody_WorkflowNotifyMsg) GetExtMsg() []byte {
	if x != nil {
		return x.ExtMsg
	}
	return nil
}

func (x *IMMsgBody_WorkflowNotifyMsg) GetCreateUin() uint64 {
	if x != nil {
		return x.CreateUin
	}
	return 0
}

// LocationInfo is the message type for the LocationInfo.
type IMMsgBody_LocationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Longitude float64 `protobuf:"fixed64,1,opt,name=longitude,proto3" json:"longitude,omitempty"` // double_longitude
	Latitude  float64 `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`   // double_latitude
	Desc      []byte  `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`             // bytes_desc
}

func (x *IMMsgBody_LocationInfo) Reset() {
	*x = IMMsgBody_LocationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_LocationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_LocationInfo) ProtoMessage() {}

func (x *IMMsgBody_LocationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_LocationInfo.ProtoReflect.Descriptor instead.
func (*IMMsgBody_LocationInfo) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 62}
}

func (x *IMMsgBody_LocationInfo) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *IMMsgBody_LocationInfo) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *IMMsgBody_LocationInfo) GetDesc() []byte {
	if x != nil {
		return x.Desc
	}
	return nil
}

// Inst is the message type for the Inst.
type IMMsgBody_ElemFlags2_Inst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId  uint32 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`    // uint32_app_id
	InstId uint32 `protobuf:"varint,2,opt,name=inst_id,json=instId,proto3" json:"inst_id,omitempty"` // uint32_inst_id
}

func (x *IMMsgBody_ElemFlags2_Inst) Reset() {
	*x = IMMsgBody_ElemFlags2_Inst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_ElemFlags2_Inst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_ElemFlags2_Inst) ProtoMessage() {}

func (x *IMMsgBody_ElemFlags2_Inst) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_ElemFlags2_Inst.ProtoReflect.Descriptor instead.
func (*IMMsgBody_ElemFlags2_Inst) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 15, 0}
}

func (x *IMMsgBody_ElemFlags2_Inst) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *IMMsgBody_ElemFlags2_Inst) GetInstId() uint32 {
	if x != nil {
		return x.InstId
	}
	return 0
}

// Bomb is the message type for the Bomb.
type IMMsgBody_FunFace_Bomb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Burst bool `protobuf:"varint,1,opt,name=burst,proto3" json:"burst,omitempty"` // bool_burst
}

func (x *IMMsgBody_FunFace_Bomb) Reset() {
	*x = IMMsgBody_FunFace_Bomb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_FunFace_Bomb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_FunFace_Bomb) ProtoMessage() {}

func (x *IMMsgBody_FunFace_Bomb) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_FunFace_Bomb.ProtoReflect.Descriptor instead.
func (*IMMsgBody_FunFace_Bomb) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 19, 0}
}

func (x *IMMsgBody_FunFace_Bomb) GetBurst() bool {
	if x != nil {
		return x.Burst
	}
	return false
}

// Turntable is the message type for the Turntable.
type IMMsgBody_FunFace_Turntable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UinList    []uint64 `protobuf:"varint,1,rep,packed,name=uin_list,json=uinList,proto3" json:"uin_list,omitempty"`    // rpt_uint64_uin_list
	HitUin     uint64   `protobuf:"varint,2,opt,name=hit_uin,json=hitUin,proto3" json:"hit_uin,omitempty"`              // uint64_hit_uin
	HitUinNick string   `protobuf:"bytes,3,opt,name=hit_uin_nick,json=hitUinNick,proto3" json:"hit_uin_nick,omitempty"` // str_hit_uin_nick
}

func (x *IMMsgBody_FunFace_Turntable) Reset() {
	*x = IMMsgBody_FunFace_Turntable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_body_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgBody_FunFace_Turntable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgBody_FunFace_Turntable) ProtoMessage() {}

func (x *IMMsgBody_FunFace_Turntable) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_body_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgBody_FunFace_Turntable.ProtoReflect.Descriptor instead.
func (*IMMsgBody_FunFace_Turntable) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_body_proto_rawDescGZIP(), []int{0, 19, 1}
}

func (x *IMMsgBody_FunFace_Turntable) GetUinList() []uint64 {
	if x != nil {
		return x.UinList
	}
	return nil
}

func (x *IMMsgBody_FunFace_Turntable) GetHitUin() uint64 {
	if x != nil {
		return x.HitUin
	}
	return 0
}

func (x *IMMsgBody_FunFace_Turntable) GetHitUinNick() string {
	if x != nil {
		return x.HitUinNick
	}
	return ""
}

var File_daemon_message_pb_body_proto protoreflect.FileDescriptor

var file_daemon_message_pb_body_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2f, 0x70, 0x62, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8,
	0x91, 0x01, 0x0a, 0x09, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0xe1, 0x01,
	0x0a, 0x11, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x6e, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x6e, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x6e, 0x6f, 0x6e, 0x4e, 0x69, 0x63, 0x6b, 0x12,
	0x23, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x72, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x1a, 0x9e, 0x03, 0x0a, 0x0c, 0x41, 0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0x41, 0x63, 0x74, 0x4d,
	0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x75, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x55, 0x69, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x70, 0x65, 0x65, 0x72, 0x54, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x69, 0x79, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x64, 0x69, 0x79, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64,
	0x69, 0x79, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x64, 0x69, 0x79, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x1a, 0x7f, 0x0a, 0x0a, 0x41, 0x72, 0x6b, 0x41, 0x70, 0x70, 0x45, 0x6c, 0x65, 0x6d,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x78, 0x6d, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x78, 0x6d, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x96, 0x02, 0x0a, 0x04, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x08, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x72, 0x5f,
	0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x53,
	0x65, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x69,
	0x74, 0x63, 0x68, 0x41, 0x6e, 0x64, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x1d, 0x0a, 0x09,
	0x42, 0x69, 0x74, 0x41, 0x70, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x62, 0x75, 0x66, 0x1a, 0x45, 0x0a, 0x0f, 0x42,
	0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x78, 0x46, 0x6c,
	0x61, 0x67, 0x1a, 0x6d, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x62, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x62, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x23, 0x0a, 0x0d,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x1a, 0x6c, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54,
	0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a,
	0x9c, 0x01, 0x0a, 0x07, 0x43, 0x72, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x72, 0x6d, 0x5f, 0x62, 0x75, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x72,
	0x6d, 0x42, 0x75, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x69, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x71, 0x69, 0x64, 0x69, 0x61, 0x6e, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x1a, 0x79,
	0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0xab, 0x07, 0x0a, 0x0a, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x46, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x63, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x63, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x6c, 0x61,
	0x67, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x69, 0x67, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x7a,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x69, 0x7a,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6c, 0x65,
	0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x6e,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x4c, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x72, 0x6c, 0x5f, 0x34, 0x30, 0x30, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x72, 0x6c, 0x34, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x34, 0x30, 0x30, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x77, 0x69, 0x64, 0x74, 0x68, 0x34, 0x30, 0x30, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x34, 0x30, 0x30, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x34, 0x30, 0x30, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x62, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x62,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x1a, 0x8e, 0x07, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x72,
	0x61, 0x79, 0x5f, 0x74, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x67, 0x72, 0x61, 0x79, 0x54, 0x69, 0x70, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x5f,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x41, 0x12, 0x35, 0x0a,
	0x17, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14,
	0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x49, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x5f, 0x62,
	0x72, 0x69, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x69, 0x66, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x72, 0x69,
	0x65, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x74, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x74, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x11, 0x73, 0x74, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73,
	0x74, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2f, 0x0a, 0x13, 0x73, 0x74, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x69, 0x66,
	0x74, 0x70, 0x69, 0x63, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x74,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x69, 0x66, 0x74, 0x70, 0x69, 0x63, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x12, 0x73, 0x74, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x65, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x74,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x65, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x29, 0x0a, 0x10, 0x73, 0x74, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x78, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x74, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x23, 0x0a, 0x0e, 0x74, 0x6f,
	0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x74, 0x6f, 0x41, 0x6c, 0x6c, 0x47, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x65, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x65, 0x66, 0x72, 0x6f, 0x6d,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x62, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x69, 0x63, 0x12, 0x2b, 0x0a, 0x11, 0x73,
	0x74, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x75, 0x72, 0x6c,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x74, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x47, 0x69, 0x66, 0x74, 0x75, 0x72, 0x6c, 0x1a, 0x36, 0x0a, 0x07, 0x45, 0x49, 0x4d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67,
	0x1a, 0xd4, 0x17, 0x0a, 0x04, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42,
	0x6f, 0x64, 0x79, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x23,
	0x0a, 0x04, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x49,
	0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x52, 0x04, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x49, 0x4d, 0x4d, 0x73,
	0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x43,
	0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67,
	0x42, 0x6f, 0x64, 0x79, 0x2e, 0x4e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x65, 0x6c, 0x65,
	0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x49,
	0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x45, 0x6c,
	0x65, 0x6d, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x36, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f,
	0x64, 0x79, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x61, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x65, 0x6c, 0x65,
	0x6d, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x36,
	0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x46, 0x61, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x49, 0x4d,
	0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x32, 0x52, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x12, 0x2d,
	0x0a, 0x08, 0x66, 0x75, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x46, 0x75, 0x6e,
	0x46, 0x61, 0x63, 0x65, 0x52, 0x07, 0x66, 0x75, 0x6e, 0x46, 0x61, 0x63, 0x65, 0x12, 0x39, 0x0a,
	0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x69, 0x63, 0x68,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x49, 0x4d, 0x4d,
	0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x52, 0x69, 0x63, 0x68, 0x4d, 0x73, 0x67, 0x52, 0x07,
	0x72, 0x69, 0x63, 0x68, 0x4d, 0x73, 0x67, 0x12, 0x33, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x49, 0x4d,
	0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x09,
	0x70, 0x75, 0x62, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x50, 0x75, 0x62, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x08, 0x70, 0x75, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x39,
	0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x52, 0x0b, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39,
	0x0a, 0x0c, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79,
	0x2e, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x0b, 0x73, 0x68,
	0x61, 0x6b, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x36, 0x0a, 0x0b, 0x70, 0x75, 0x62,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x50, 0x75, 0x62, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x33, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64,
	0x79, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x69, 0x70, 0x73, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x49, 0x4d, 0x4d, 0x73,
	0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x54, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x74, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0e, 0x61, 0x6e, 0x6f, 0x6e,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x41, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x52, 0x0c,
	0x61, 0x6e, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x0b,
	0x71, 0x71, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x51, 0x51,
	0x4c, 0x69, 0x76, 0x65, 0x4f, 0x6c, 0x64, 0x52, 0x09, 0x71, 0x71, 0x4c, 0x69, 0x76, 0x65, 0x4f,
	0x6c, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42,
	0x6f, 0x64, 0x79, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x6c, 0x69, 0x66, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x39, 0x0a, 0x0c, 0x71, 0x71, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42,
	0x6f, 0x64, 0x79, 0x2e, 0x51, 0x51, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52,
	0x0b, 0x71, 0x71, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x2d, 0x0a, 0x08,
	0x63, 0x72, 0x6d, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x43, 0x72, 0x6d, 0x45, 0x6c,
	0x65, 0x6d, 0x52, 0x07, 0x63, 0x72, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x4f, 0x0a, 0x14, 0x63,
	0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x49, 0x4d, 0x4d, 0x73,
	0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x54, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x0b,
	0x72, 0x65, 0x64, 0x62, 0x61, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x52, 0x65,
	0x64, 0x42, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x64, 0x62, 0x61, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x10, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x4c, 0x6f, 0x77, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x70, 0x73, 0x52, 0x0e, 0x6c, 0x6f, 0x77, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61, 0x6e,
	0x6b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x62, 0x61, 0x6e, 0x6b, 0x63, 0x6f, 0x64, 0x65, 0x43,
	0x74, 0x72, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0b, 0x6e, 0x65, 0x61, 0x72, 0x5f,
	0x62, 0x79, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x49,
	0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x4e, 0x65, 0x61, 0x72, 0x42, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6e, 0x65, 0x61, 0x72,
	0x42, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x65, 0x6c, 0x65, 0x6d, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x49, 0x4d, 0x4d,
	0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6c, 0x65,
	0x6d, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x3c, 0x0a,
	0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0c, 0x70,
	0x75, 0x62, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x50, 0x75,
	0x62, 0x41, 0x63, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x41, 0x63, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x0b, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x49, 0x4d, 0x4d, 0x73,
	0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x45, 0x6d, 0x6f, 0x6a, 0x69,
	0x52, 0x0a, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x12, 0x3b, 0x0a, 0x0c,
	0x66, 0x73, 0x6a, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x46,
	0x53, 0x4a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x0a, 0x66,
	0x73, 0x6a, 0x4d, 0x73, 0x67, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x2e, 0x0a, 0x07, 0x61, 0x72, 0x6b,
	0x5f, 0x61, 0x70, 0x70, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x49, 0x4d, 0x4d,
	0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x41, 0x72, 0x6b, 0x41, 0x70, 0x70, 0x45, 0x6c, 0x65,
	0x6d, 0x52, 0x06, 0x61, 0x72, 0x6b, 0x41, 0x70, 0x70, 0x12, 0x3c, 0x0a, 0x0d, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x68, 0x63, 0x5f, 0x66, 0x6c,
	0x61, 0x73, 0x68, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x46, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x68, 0x63, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x50, 0x69, 0x63,
	0x12, 0x43, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x69, 0x66, 0x74,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x49, 0x4d, 0x4d,
	0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x47, 0x69,
	0x66, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x47, 0x69,
	0x66, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x33, 0x0a, 0x0a, 0x62, 0x69, 0x74, 0x61, 0x70, 0x70, 0x5f,
	0x6d, 0x73, 0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x49, 0x4d, 0x4d, 0x73,
	0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x42, 0x69, 0x74, 0x41, 0x70, 0x70, 0x4d, 0x73, 0x67, 0x52,
	0x09, 0x62, 0x69, 0x74, 0x61, 0x70, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x71, 0x71, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x51, 0x51, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x51, 0x71, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42,
	0x6f, 0x64, 0x79, 0x2e, 0x41, 0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0x41, 0x63, 0x74, 0x4d, 0x73, 0x67,
	0x52, 0x09, 0x61, 0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x4b, 0x0a, 0x12, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42,
	0x6f, 0x64, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x75,
	0x62, 0x41, 0x63, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x09, 0x62, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x49, 0x4d,
	0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x4d, 0x73,
	0x67, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x73, 0x72, 0x63, 0x4d, 0x73, 0x67,
	0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x6f, 0x6c, 0x61, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x4c,
	0x6f, 0x6c, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x6c, 0x6f, 0x6c, 0x61, 0x4d, 0x73, 0x67, 0x12,
	0x49, 0x0a, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x49, 0x4d,
	0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x4c, 0x0a, 0x13, 0x6d, 0x73,
	0x67, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42,
	0x6f, 0x64, 0x79, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x11, 0x6d, 0x73, 0x67, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x5f,
	0x65, 0x6c, 0x65, 0x6d, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x49, 0x4d, 0x4d,
	0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x52,
	0x07, 0x70, 0x61, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x40, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x0d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x34, 0x0a, 0x09, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x41,
	0x70, 0x70, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x08, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x70, 0x70,
	0x12, 0x2d, 0x0a, 0x08, 0x65, 0x69, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x45,
	0x49, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x65, 0x69, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x1a, 0x48, 0x0a, 0x09, 0x45, 0x6c, 0x65, 0x6d, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x31, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x31, 0x12, 0x23, 0x0a, 0x0d,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0xd9, 0x04, 0x0a, 0x0a, 0x45, 0x6c, 0x65, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x32,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x65,
	0x78, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x77,
	0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x74, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x70, 0x74, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x76, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x6e, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x45,
	0x6c, 0x65, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x52, 0x05,
	0x69, 0x6e, 0x73, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x70, 0x74,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x52,
	0x70, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42,
	0x6f, 0x64, 0x79, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x52, 0x07, 0x73, 0x72, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x6c, 0x6f, 0x6e, 0x67, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x70, 0x63, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x50, 0x63,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x66, 0x52, 0x0c, 0x70, 0x63, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x6d, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x72, 0x6d,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x1a, 0x36, 0x0a, 0x04, 0x49, 0x6e, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x1a, 0xef, 0x02,
	0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x69, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x73, 0x67,
	0x5f, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6d, 0x73, 0x67, 0x54, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x70, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x61, 0x70, 0x6e, 0x73, 0x54, 0x69, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6d,
	0x73, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x70, 0x6e, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x70, 0x6e, 0x73,
	0x53, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x1a,
	0x2b, 0x0a, 0x0e, 0x46, 0x53, 0x4a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65,
	0x6d, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x40, 0x0a, 0x04,
	0x46, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x62, 0x75, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x62, 0x75, 0x66, 0x1a, 0x81,
	0x02, 0x0a, 0x07, 0x46, 0x75, 0x6e, 0x46, 0x61, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x6d, 0x73,
	0x67, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x46, 0x75,
	0x6e, 0x46, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x0c, 0x6d, 0x73, 0x67, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a,
	0x08, 0x6d, 0x73, 0x67, 0x5f, 0x62, 0x6f, 0x6d, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x46, 0x75, 0x6e, 0x46,
	0x61, 0x63, 0x65, 0x2e, 0x42, 0x6f, 0x6d, 0x62, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x42, 0x6f, 0x6d,
	0x62, 0x1a, 0x1c, 0x0a, 0x04, 0x42, 0x6f, 0x6d, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x72,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x1a,
	0x61, 0x0a, 0x09, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07,
	0x75, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x69, 0x74, 0x5f, 0x75,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x69, 0x74, 0x55, 0x69, 0x6e,
	0x12, 0x20, 0x0a, 0x0c, 0x68, 0x69, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x5f, 0x6e, 0x69, 0x63, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x69, 0x74, 0x55, 0x69, 0x6e, 0x4e, 0x69,
	0x63, 0x6b, 0x1a, 0xa1, 0x05, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69,
	0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x79, 0x54, 0x65, 0x78, 0x74, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6e,
	0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x6c, 0x61, 0x67, 0x4e, 0x65, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x72, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x72, 0x70, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x70, 0x72, 0x70, 0x46, 0x6f, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x6e, 0x67,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26,
	0x0a, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x73, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x55, 0x69,
	0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x6c, 0x61, 0x6d, 0x6f, 0x75, 0x72,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x6c,
	0x61, 0x6d, 0x6f, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a,
	0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x71, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b,
	0x53, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x5f, 0x74,
	0x6f, 0x72, 0x63, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x69, 0x63, 0x54, 0x6f, 0x72, 0x63, 0x68, 0x12, 0x33, 0x0a, 0x16, 0x62, 0x61, 0x62, 0x79,
	0x71, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x62, 0x61, 0x62, 0x79, 0x71, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x75, 0x69, 0x6e, 0x33, 0x32, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x69, 0x6e, 0x33, 0x32, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x75, 0x62,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x72, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x62, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x62, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x1a, 0xee, 0x01, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0c,
	0x68, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6c, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x69,
	0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x67, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x6b,
	0x42, 0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x1a, 0xaa, 0x02, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x64, 0x4d, 0x73,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x62, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x1a, 0x4b, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x73,
	0x74, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x73,
	0x67, 0x1a, 0x36, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x75, 0x62, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70,
	0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xfc, 0x01, 0x0a, 0x11, 0x4c, 0x69,
	0x66, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x61, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x67,
	0x64, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x67, 0x64, 0x74, 0x49, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a,
	0x0c, 0x67, 0x64, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x67, 0x64, 0x74, 0x43, 0x6c, 0x69, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x17, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x1a, 0x3f, 0x0a, 0x0c, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x41, 0x70, 0x70, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x6d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x69, 0x64, 0x1a, 0x92, 0x01, 0x0a, 0x07, 0x4c, 0x6f,
	0x6c, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x52, 0x65, 0x73,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x6f, 0x6e,
	0x67, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x65, 0x79, 0x1a, 0xa8,
	0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x70,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x75, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x55, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xfa, 0x02, 0x0a, 0x0a, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x46, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x61, 0x62, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x62, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x62, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x1a, 0x8b, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x6d,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x78, 0x6d, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x6d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x41, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x1a, 0x8c, 0x01, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x30, 0x0a, 0x09, 0x72, 0x69, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e,
	0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x52, 0x08, 0x72, 0x69, 0x63, 0x68, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x73, 0x67, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x11, 0x6d, 0x73, 0x67, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x1a, 0x76, 0x0a, 0x10, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x73,
	0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x34, 0x12, 0x47, 0x0a, 0x13, 0x6d, 0x73, 0x67, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79,
	0x2e, 0x4e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x10,
	0x6d, 0x73, 0x67, 0x4e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x4c, 0x0a, 0x11, 0x4e,
	0x65, 0x61, 0x72, 0x42, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xe8, 0x04, 0x0a, 0x0d, 0x4e, 0x6f,
	0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6d, 0x64, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d,
	0x64, 0x35, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x75, 0x62, 0x63, 0x6d, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x75,
	0x62, 0x63, 0x6d, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72,
	0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x6e, 0x67, 0x65,
	0x72, 0x5f, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61,
	0x6e, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x69, 0x66,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x62, 0x73, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61,
	0x62, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x70, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66,
	0x69, 0x6c, 0x65, 0x69, 0x64, 0x63, 0x72, 0x63, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x63, 0x72, 0x63, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x1a, 0xdf, 0x06, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x11, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x6f, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x6d, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x69, 0x6d, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x70, 0x69, 0x63, 0x4d, 0x64, 0x35, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69,
	0x63, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x69, 0x63, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x69, 0x63,
	0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x69,
	0x63, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x6c, 0x61,
	0x67, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x69,
	0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69, 0x67,
	0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x70, 0x5f, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6f, 0x70,
	0x46, 0x61, 0x63, 0x65, 0x42, 0x75, 0x66, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x5f, 0x70,
	0x69, 0x63, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x6c,
	0x64, 0x50, 0x69, 0x63, 0x4d, 0x64, 0x35, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x6e,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c,
	0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x72, 0x6c, 0x5f, 0x34, 0x30, 0x30, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x72, 0x6c, 0x34, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x09, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x5f, 0x34, 0x30, 0x30, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x34, 0x30, 0x30, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x34, 0x30, 0x30, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x34, 0x30, 0x30, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x62, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x62, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x1a, 0x69, 0x0a, 0x0b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x11, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0e, 0x6f, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x1a, 0x2c, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x51, 0x51, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1e, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x5f, 0x71, 0x71, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x61, 0x72, 0x51, 0x71, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x42, 0x0a, 0x08, 0x50, 0x61, 0x74, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0xdf, 0x01, 0x0a, 0x0c, 0x50, 0x63, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x65, 0x66, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x63, 0x5f, 0x70, 0x74, 0x6c, 0x5f, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x63, 0x50, 0x74,
	0x6c, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x70, 0x63, 0x5f, 0x70, 0x74, 0x6c,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x63, 0x50, 0x74,
	0x6c, 0x45, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x5f, 0x70, 0x74, 0x6c, 0x5f,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x63,
	0x50, 0x74, 0x6c, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f,
	0x70, 0x74, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d,
	0x61, 0x63, 0x50, 0x74, 0x6c, 0x45, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x74, 0x6c, 0x73,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b,
	0x70, 0x74, 0x6c, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70,
	0x74, 0x6c, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x74, 0x6c, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0xbb, 0x05, 0x0a, 0x03, 0x50, 0x74, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x72,
	0x63, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x72, 0x63,
	0x55, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x5f, 0x70, 0x74, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x67, 0x69,
	0x63, 0x50, 0x74, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x74, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70,
	0x74, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x62, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x74, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18,
	0x1f, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x74, 0x74, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x6c, 0x61, 0x67, 0x1a, 0x9b, 0x01, 0x0a, 0x0a, 0x50, 0x75, 0x62, 0x41, 0x63, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d,
	0x73, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x65,
	0x79, 0x1a, 0x46, 0x0a, 0x0a, 0x50, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x62, 0x75, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x62, 0x75,
	0x66, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x6e, 0x1a, 0x6c, 0x0a, 0x08, 0x50, 0x75, 0x62,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x75, 0x0a, 0x09, 0x51, 0x51, 0x4c, 0x69, 0x76,
	0x65, 0x4f, 0x6c, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x75, 0x62, 0x43, 0x6d, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x1a, 0x8c,
	0x05, 0x0a, 0x0f, 0x51, 0x51, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x69, 0x6f, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x75, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x75, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x49,
	0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x51, 0x51, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x69, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x51,
	0x51, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x69, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x73, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x07, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x69, 0x6c, 0x6c, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x69, 0x6c,
	0x6c, 0x6e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6b, 0x65, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x07, 0x6d, 0x73, 0x67, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x65,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x66, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x66, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x6d, 0x73, 0x67,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x63, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x63, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x64, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x64, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x70, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x1a, 0xab, 0x05,
	0x0a, 0x0f, 0x51, 0x51, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x69, 0x6f, 0x45, 0x6c, 0x65,
	0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x29, 0x0a,
	0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x75, 0x6d, 0x70,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6a, 0x75, 0x6d, 0x70,
	0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6f,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x6f, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x63, 0x6f,
	0x6e, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e,
	0x75, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x62, 0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x67, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x69, 0x6f, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6c,
	0x65, 0x66, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x69, 0x6f, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x69, 0x6f, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x61, 0x69, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x66, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x63, 0x66, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x70, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x1a, 0x44, 0x0a, 0x0b, 0x51,
	0x51, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x08, 0x61, 0x69,
	0x6f, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x49,
	0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x51, 0x51, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x69, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x07, 0x61, 0x69, 0x6f, 0x42, 0x6f, 0x64,
	0x79, 0x1a, 0x2d, 0x0a, 0x0a, 0x52, 0x65, 0x64, 0x42, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x62, 0x61, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x64, 0x62, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x1a, 0xa0, 0x01, 0x0a, 0x07, 0x52, 0x69, 0x63, 0x68, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x31, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x73,
	0x67, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d,
	0x73, 0x67, 0x52, 0x65, 0x73, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x1a, 0xac, 0x02, 0x0a, 0x08, 0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x23, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x52,
	0x04, 0x61, 0x74, 0x74, 0x72, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79,
	0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x05, 0x65, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x40, 0x0a, 0x0f,
	0x6e, 0x6f, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64,
	0x79, 0x2e, 0x4e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x0d, 0x6e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x03, 0x70, 0x74, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x49, 0x4d,
	0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x50, 0x74, 0x74, 0x52, 0x03, 0x70, 0x74, 0x74,
	0x12, 0x2a, 0x0a, 0x07, 0x74, 0x6d, 0x70, 0x5f, 0x70, 0x74, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x54, 0x6d,
	0x70, 0x50, 0x74, 0x74, 0x52, 0x06, 0x74, 0x6d, 0x70, 0x50, 0x74, 0x74, 0x12, 0x44, 0x0a, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x32, 0x31, 0x31, 0x5f, 0x74, 0x6d, 0x70, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42,
	0x6f, 0x64, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x32, 0x31, 0x31, 0x54, 0x6d, 0x70, 0x4d,
	0x73, 0x67, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x32, 0x31, 0x31, 0x54, 0x6d, 0x70, 0x4d,
	0x73, 0x67, 0x1a, 0x8d, 0x04, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x4d, 0x73, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x6f,
	0x5f, 0x75, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x55, 0x69,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x68, 0x65,
	0x61, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x72, 0x65, 0x68, 0x65, 0x61, 0x64, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72,
	0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x66,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x5f, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x4e, 0x6f, 0x74, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x65, 0x6c,
	0x65, 0x6d, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x52, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x6e,
	0x75, 0x6d, 0x1a, 0x4d, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69,
	0x6e, 0x1a, 0x48, 0x0a, 0x0a, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x53, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x53, 0x75, 0x6d, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xb2, 0x02, 0x0a, 0x09,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x69,
	0x67, 0x5f, 0x73, 0x65, 0x71, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x72,
	0x69, 0x67, 0x53, 0x65, 0x71, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x55, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x25, 0x0a,
	0x05, 0x65, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x49,
	0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x05, 0x65,
	0x6c, 0x65, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x69, 0x63, 0x68,
	0x4d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x69, 0x63, 0x68, 0x4d,
	0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x73, 0x72, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x6f,
	0x5f, 0x75, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x55, 0x69,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0x99, 0x01, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12,
	0x1c, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x36, 0x5f, 0x62, 0x75, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x36, 0x42, 0x75, 0x66, 0x12, 0x1c, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x37, 0x5f, 0x62, 0x75, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x37, 0x42, 0x75, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x62,
	0x75, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x62, 0x75, 0x66, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x70, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x1a, 0x1e, 0x0a, 0x08,
	0x54, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xf1, 0x02, 0x0a,
	0x06, 0x54, 0x6d, 0x70, 0x50, 0x74, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x74, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x74, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x74, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x74, 0x74, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x73, 0x69, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x73, 0x69, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x62, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70,
	0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x74, 0x74, 0x5f,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x70, 0x74, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x44, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x32, 0x31, 0x31, 0x54, 0x6d, 0x70, 0x4d,
	0x73, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x32, 0x63, 0x5f, 0x63, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x63, 0x32, 0x63, 0x43, 0x6d, 0x64, 0x1a, 0x47, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x45,
	0x6c, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0xcd, 0x06, 0x0a, 0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6d, 0x64, 0x35, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x46, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x73, 0x69, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x73, 0x69,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x72,
	0x6f, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6f,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x13,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x73, 0x75, 0x62, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x42, 0x75, 0x73, 0x69, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x74, 0x74, 0x72,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x2e, 0x0a, 0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x1a,
	0x4b, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x4d, 0x73, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x78, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x69, 0x6e, 0x1a, 0x5c, 0x0a, 0x0c,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6c, 0x61, 0x70, 0x35, 0x65, 0x2f,
	0x70, 0x65, 0x6e, 0x67, 0x75, 0x69, 0x6e, 0x2f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_daemon_message_pb_body_proto_rawDescOnce sync.Once
	file_daemon_message_pb_body_proto_rawDescData = file_daemon_message_pb_body_proto_rawDesc
)

func file_daemon_message_pb_body_proto_rawDescGZIP() []byte {
	file_daemon_message_pb_body_proto_rawDescOnce.Do(func() {
		file_daemon_message_pb_body_proto_rawDescData = protoimpl.X.CompressGZIP(file_daemon_message_pb_body_proto_rawDescData)
	})
	return file_daemon_message_pb_body_proto_rawDescData
}

var file_daemon_message_pb_body_proto_msgTypes = make([]protoimpl.MessageInfo, 67)
var file_daemon_message_pb_body_proto_goTypes = []interface{}{
	(*IMMsgBody)(nil),                     // 0: IMMsgBody
	(*IMMsgBody_AnonymousGroupMsg)(nil),   // 1: IMMsgBody.AnonymousGroupMsg
	(*IMMsgBody_ApolloActMsg)(nil),        // 2: IMMsgBody.ApolloActMsg
	(*IMMsgBody_ArkAppElem)(nil),          // 3: IMMsgBody.ArkAppElem
	(*IMMsgBody_Attr)(nil),                // 4: IMMsgBody.Attr
	(*IMMsgBody_BitAppMsg)(nil),           // 5: IMMsgBody.BitAppMsg
	(*IMMsgBody_BlessingMessage)(nil),     // 6: IMMsgBody.BlessingMessage
	(*IMMsgBody_CommonElem)(nil),          // 7: IMMsgBody.CommonElem
	(*IMMsgBody_ConferenceTipsInfo)(nil),  // 8: IMMsgBody.ConferenceTipsInfo
	(*IMMsgBody_CrmElem)(nil),             // 9: IMMsgBody.CrmElem
	(*IMMsgBody_CustomElem)(nil),          // 10: IMMsgBody.CustomElem
	(*IMMsgBody_CustomFace)(nil),          // 11: IMMsgBody.CustomFace
	(*IMMsgBody_DeliverGiftMsg)(nil),      // 12: IMMsgBody.DeliverGiftMsg
	(*IMMsgBody_EIMInfo)(nil),             // 13: IMMsgBody.EIMInfo
	(*IMMsgBody_Elem)(nil),                // 14: IMMsgBody.Elem
	(*IMMsgBody_ElemFlags)(nil),           // 15: IMMsgBody.ElemFlags
	(*IMMsgBody_ElemFlags2)(nil),          // 16: IMMsgBody.ElemFlags2
	(*IMMsgBody_ExtraInfo)(nil),           // 17: IMMsgBody.ExtraInfo
	(*IMMsgBody_FSJMessageElem)(nil),      // 18: IMMsgBody.FSJMessageElem
	(*IMMsgBody_Face)(nil),                // 19: IMMsgBody.Face
	(*IMMsgBody_FunFace)(nil),             // 20: IMMsgBody.FunFace
	(*IMMsgBody_GeneralFlags)(nil),        // 21: IMMsgBody.GeneralFlags
	(*IMMsgBody_GroupBusinessMsg)(nil),    // 22: IMMsgBody.GroupBusinessMsg
	(*IMMsgBody_GroupFile)(nil),           // 23: IMMsgBody.GroupFile
	(*IMMsgBody_GroupPostElem)(nil),       // 24: IMMsgBody.GroupPostElem
	(*IMMsgBody_GroupPubAccountInfo)(nil), // 25: IMMsgBody.GroupPubAccountInfo
	(*IMMsgBody_LifeOnlineAccount)(nil),   // 26: IMMsgBody.LifeOnlineAccount
	(*IMMsgBody_LightAppElem)(nil),        // 27: IMMsgBody.LightAppElem
	(*IMMsgBody_LolaMsg)(nil),             // 28: IMMsgBody.LolaMsg
	(*IMMsgBody_LowVersionTips)(nil),      // 29: IMMsgBody.LowVersionTips
	(*IMMsgBody_MarketFace)(nil),          // 30: IMMsgBody.MarketFace
	(*IMMsgBody_MarketTrans)(nil),         // 31: IMMsgBody.MarketTrans
	(*IMMsgBody_MsgBody)(nil),             // 32: IMMsgBody.MsgBody
	(*IMMsgBody_MsgBodySubtype4)(nil),     // 33: IMMsgBody.MsgBody_subtype4
	(*IMMsgBody_NearByMessageType)(nil),   // 34: IMMsgBody.NearByMessageType
	(*IMMsgBody_NotOnlineFile)(nil),       // 35: IMMsgBody.NotOnlineFile
	(*IMMsgBody_NotOnlineImage)(nil),      // 36: IMMsgBody.NotOnlineImage
	(*IMMsgBody_OnlineImage)(nil),         // 37: IMMsgBody.OnlineImage
	(*IMMsgBody_OpenQQData)(nil),          // 38: IMMsgBody.OpenQQData
	(*IMMsgBody_PatsElem)(nil),            // 39: IMMsgBody.PatsElem
	(*IMMsgBody_PcSupportDef)(nil),        // 40: IMMsgBody.PcSupportDef
	(*IMMsgBody_Ptt)(nil),                 // 41: IMMsgBody.Ptt
	(*IMMsgBody_PubAccInfo)(nil),          // 42: IMMsgBody.PubAccInfo
	(*IMMsgBody_PubAccount)(nil),          // 43: IMMsgBody.PubAccount
	(*IMMsgBody_PubGroup)(nil),            // 44: IMMsgBody.PubGroup
	(*IMMsgBody_QQLiveOld)(nil),           // 45: IMMsgBody.QQLiveOld
	(*IMMsgBody_QQWalletAioBody)(nil),     // 46: IMMsgBody.QQWalletAioBody
	(*IMMsgBody_QQWalletAioElem)(nil),     // 47: IMMsgBody.QQWalletAioElem
	(*IMMsgBody_QQWalletMsg)(nil),         // 48: IMMsgBody.QQWalletMsg
	(*IMMsgBody_RedBagInfo)(nil),          // 49: IMMsgBody.RedBagInfo
	(*IMMsgBody_RichMsg)(nil),             // 50: IMMsgBody.RichMsg
	(*IMMsgBody_RichText)(nil),            // 51: IMMsgBody.RichText
	(*IMMsgBody_SecretFileMsg)(nil),       // 52: IMMsgBody.SecretFileMsg
	(*IMMsgBody_ShakeWindow)(nil),         // 53: IMMsgBody.ShakeWindow
	(*IMMsgBody_SmallEmoji)(nil),          // 54: IMMsgBody.SmallEmoji
	(*IMMsgBody_SourceMsg)(nil),           // 55: IMMsgBody.SourceMsg
	(*IMMsgBody_Text)(nil),                // 56: IMMsgBody.Text
	(*IMMsgBody_TipsInfo)(nil),            // 57: IMMsgBody.TipsInfo
	(*IMMsgBody_TmpPtt)(nil),              // 58: IMMsgBody.TmpPtt
	(*IMMsgBody_Trans211TmpMsg)(nil),      // 59: IMMsgBody.Trans211TmpMsg
	(*IMMsgBody_TransElem)(nil),           // 60: IMMsgBody.TransElem
	(*IMMsgBody_VideoFile)(nil),           // 61: IMMsgBody.VideoFile
	(*IMMsgBody_WorkflowNotifyMsg)(nil),   // 62: IMMsgBody.WorkflowNotifyMsg
	(*IMMsgBody_LocationInfo)(nil),        // 63: IMMsgBody.LocationInfo
	(*IMMsgBody_ElemFlags2_Inst)(nil),     // 64: IMMsgBody.ElemFlags2.Inst
	(*IMMsgBody_FunFace_Bomb)(nil),        // 65: IMMsgBody.FunFace.Bomb
	(*IMMsgBody_FunFace_Turntable)(nil),   // 66: IMMsgBody.FunFace.Turntable
}
var file_daemon_message_pb_body_proto_depIdxs = []int32{
	56, // 0: IMMsgBody.Elem.text:type_name -> IMMsgBody.Text
	19, // 1: IMMsgBody.Elem.face:type_name -> IMMsgBody.Face
	37, // 2: IMMsgBody.Elem.online_image:type_name -> IMMsgBody.OnlineImage
	36, // 3: IMMsgBody.Elem.not_online_image:type_name -> IMMsgBody.NotOnlineImage
	60, // 4: IMMsgBody.Elem.trans_elem_info:type_name -> IMMsgBody.TransElem
	30, // 5: IMMsgBody.Elem.market_face:type_name -> IMMsgBody.MarketFace
	15, // 6: IMMsgBody.Elem.elem_flags:type_name -> IMMsgBody.ElemFlags
	11, // 7: IMMsgBody.Elem.custom_face:type_name -> IMMsgBody.CustomFace
	16, // 8: IMMsgBody.Elem.elem_flags2:type_name -> IMMsgBody.ElemFlags2
	20, // 9: IMMsgBody.Elem.fun_face:type_name -> IMMsgBody.FunFace
	52, // 10: IMMsgBody.Elem.secret_file:type_name -> IMMsgBody.SecretFileMsg
	50, // 11: IMMsgBody.Elem.rich_msg:type_name -> IMMsgBody.RichMsg
	23, // 12: IMMsgBody.Elem.group_file:type_name -> IMMsgBody.GroupFile
	44, // 13: IMMsgBody.Elem.pub_group:type_name -> IMMsgBody.PubGroup
	31, // 14: IMMsgBody.Elem.market_trans:type_name -> IMMsgBody.MarketTrans
	17, // 15: IMMsgBody.Elem.extra_info:type_name -> IMMsgBody.ExtraInfo
	53, // 16: IMMsgBody.Elem.shake_window:type_name -> IMMsgBody.ShakeWindow
	43, // 17: IMMsgBody.Elem.pub_account:type_name -> IMMsgBody.PubAccount
	61, // 18: IMMsgBody.Elem.video_file:type_name -> IMMsgBody.VideoFile
	57, // 19: IMMsgBody.Elem.tips_info:type_name -> IMMsgBody.TipsInfo
	1,  // 20: IMMsgBody.Elem.anon_group_msg:type_name -> IMMsgBody.AnonymousGroupMsg
	45, // 21: IMMsgBody.Elem.qq_live_old:type_name -> IMMsgBody.QQLiveOld
	26, // 22: IMMsgBody.Elem.life_online:type_name -> IMMsgBody.LifeOnlineAccount
	48, // 23: IMMsgBody.Elem.qqwallet_msg:type_name -> IMMsgBody.QQWalletMsg
	9,  // 24: IMMsgBody.Elem.crm_elem:type_name -> IMMsgBody.CrmElem
	8,  // 25: IMMsgBody.Elem.conference_tips_info:type_name -> IMMsgBody.ConferenceTipsInfo
	49, // 26: IMMsgBody.Elem.redbag_info:type_name -> IMMsgBody.RedBagInfo
	29, // 27: IMMsgBody.Elem.low_version_tips:type_name -> IMMsgBody.LowVersionTips
	34, // 28: IMMsgBody.Elem.near_by_msg:type_name -> IMMsgBody.NearByMessageType
	10, // 29: IMMsgBody.Elem.custom_elem:type_name -> IMMsgBody.CustomElem
	63, // 30: IMMsgBody.Elem.location_info:type_name -> IMMsgBody.LocationInfo
	42, // 31: IMMsgBody.Elem.pub_acc_info:type_name -> IMMsgBody.PubAccInfo
	54, // 32: IMMsgBody.Elem.small_emoji:type_name -> IMMsgBody.SmallEmoji
	18, // 33: IMMsgBody.Elem.fsj_msg_elem:type_name -> IMMsgBody.FSJMessageElem
	3,  // 34: IMMsgBody.Elem.ark_app:type_name -> IMMsgBody.ArkAppElem
	21, // 35: IMMsgBody.Elem.general_flags:type_name -> IMMsgBody.GeneralFlags
	11, // 36: IMMsgBody.Elem.hc_flash_pic:type_name -> IMMsgBody.CustomFace
	12, // 37: IMMsgBody.Elem.deliver_gift_msg:type_name -> IMMsgBody.DeliverGiftMsg
	5,  // 38: IMMsgBody.Elem.bitapp_msg:type_name -> IMMsgBody.BitAppMsg
	38, // 39: IMMsgBody.Elem.open_qq_data:type_name -> IMMsgBody.OpenQQData
	2,  // 40: IMMsgBody.Elem.apollo_msg:type_name -> IMMsgBody.ApolloActMsg
	25, // 41: IMMsgBody.Elem.group_pub_acc_info:type_name -> IMMsgBody.GroupPubAccountInfo
	6,  // 42: IMMsgBody.Elem.bless_msg:type_name -> IMMsgBody.BlessingMessage
	55, // 43: IMMsgBody.Elem.src_msg:type_name -> IMMsgBody.SourceMsg
	28, // 44: IMMsgBody.Elem.lola_msg:type_name -> IMMsgBody.LolaMsg
	22, // 45: IMMsgBody.Elem.group_business_msg:type_name -> IMMsgBody.GroupBusinessMsg
	62, // 46: IMMsgBody.Elem.msg_workflow_notify:type_name -> IMMsgBody.WorkflowNotifyMsg
	39, // 47: IMMsgBody.Elem.pat_elem:type_name -> IMMsgBody.PatsElem
	24, // 48: IMMsgBody.Elem.group_post_elem:type_name -> IMMsgBody.GroupPostElem
	27, // 49: IMMsgBody.Elem.light_app:type_name -> IMMsgBody.LightAppElem
	13, // 50: IMMsgBody.Elem.eim_info:type_name -> IMMsgBody.EIMInfo
	7,  // 51: IMMsgBody.Elem.common_elem:type_name -> IMMsgBody.CommonElem
	64, // 52: IMMsgBody.ElemFlags2.insts:type_name -> IMMsgBody.ElemFlags2.Inst
	64, // 53: IMMsgBody.ElemFlags2.src_inst:type_name -> IMMsgBody.ElemFlags2.Inst
	40, // 54: IMMsgBody.ElemFlags2.pc_support_def:type_name -> IMMsgBody.PcSupportDef
	66, // 55: IMMsgBody.FunFace.msg_turntable:type_name -> IMMsgBody.FunFace.Turntable
	65, // 56: IMMsgBody.FunFace.msg_bomb:type_name -> IMMsgBody.FunFace.Bomb
	51, // 57: IMMsgBody.MsgBody.rich_text:type_name -> IMMsgBody.RichText
	35, // 58: IMMsgBody.MsgBody_subtype4.msg_not_online_file:type_name -> IMMsgBody.NotOnlineFile
	47, // 59: IMMsgBody.QQWalletAioBody.sender:type_name -> IMMsgBody.QQWalletAioElem
	47, // 60: IMMsgBody.QQWalletAioBody.receiver:type_name -> IMMsgBody.QQWalletAioElem
	46, // 61: IMMsgBody.QQWalletMsg.aio_body:type_name -> IMMsgBody.QQWalletAioBody
	4,  // 62: IMMsgBody.RichText.attr:type_name -> IMMsgBody.Attr
	14, // 63: IMMsgBody.RichText.elems:type_name -> IMMsgBody.Elem
	35, // 64: IMMsgBody.RichText.not_online_file:type_name -> IMMsgBody.NotOnlineFile
	41, // 65: IMMsgBody.RichText.ptt:type_name -> IMMsgBody.Ptt
	58, // 66: IMMsgBody.RichText.tmp_ptt:type_name -> IMMsgBody.TmpPtt
	59, // 67: IMMsgBody.RichText.trans_211_tmp_msg:type_name -> IMMsgBody.Trans211TmpMsg
	36, // 68: IMMsgBody.SecretFileMsg.not_online_image:type_name -> IMMsgBody.NotOnlineImage
	16, // 69: IMMsgBody.SecretFileMsg.elem_flags2:type_name -> IMMsgBody.ElemFlags2
	14, // 70: IMMsgBody.SourceMsg.elems:type_name -> IMMsgBody.Elem
	71, // [71:71] is the sub-list for method output_type
	71, // [71:71] is the sub-list for method input_type
	71, // [71:71] is the sub-list for extension type_name
	71, // [71:71] is the sub-list for extension extendee
	0,  // [0:71] is the sub-list for field type_name
}

func init() { file_daemon_message_pb_body_proto_init() }
func file_daemon_message_pb_body_proto_init() {
	if File_daemon_message_pb_body_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_daemon_message_pb_body_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_AnonymousGroupMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_ApolloActMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_ArkAppElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_Attr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_BitAppMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_BlessingMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_CommonElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_ConferenceTipsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_CrmElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_CustomElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_CustomFace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_DeliverGiftMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_EIMInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_Elem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_ElemFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_ElemFlags2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_ExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_FSJMessageElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_Face); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_FunFace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_GeneralFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_GroupBusinessMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_GroupFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_GroupPostElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_GroupPubAccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_LifeOnlineAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_LightAppElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_LolaMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_LowVersionTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_MarketFace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_MarketTrans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_MsgBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_MsgBodySubtype4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_NearByMessageType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_NotOnlineFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_NotOnlineImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_OnlineImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_OpenQQData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_PatsElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_PcSupportDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_Ptt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_PubAccInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_PubAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_PubGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_QQLiveOld); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_QQWalletAioBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_QQWalletAioElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_QQWalletMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_RedBagInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_RichMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_RichText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_SecretFileMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_ShakeWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_SmallEmoji); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_SourceMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_Text); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_TipsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_TmpPtt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_Trans211TmpMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_TransElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_VideoFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_WorkflowNotifyMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_LocationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_ElemFlags2_Inst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_FunFace_Bomb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_body_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgBody_FunFace_Turntable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_daemon_message_pb_body_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   67,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_daemon_message_pb_body_proto_goTypes,
		DependencyIndexes: file_daemon_message_pb_body_proto_depIdxs,
		MessageInfos:      file_daemon_message_pb_body_proto_msgTypes,
	}.Build()
	File_daemon_message_pb_body_proto = out.File
	file_daemon_message_pb_body_proto_rawDesc = nil
	file_daemon_message_pb_body_proto_goTypes = nil
	file_daemon_message_pb_body_proto_depIdxs = nil
}
