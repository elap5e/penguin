syntax = "proto3";

option go_package = "github.com/elap5e/penguin/daemon/message/pb";

// Message generated by proto-message-gen. DO NOT EDIT.
// source: tencent.p1298im.msg.im_msg_head
//
// im_msg_head is the message type for the im_msg_head.
message IMMsgHead {
  // C2CHead is the message type for the C2CHead.
  message C2CHead {
    uint64 to_uin       = 1; // uint64_to_uin
    uint64 from_uin     = 2; // uint64_from_uin
    uint32 cc_type      = 3; // uint32_cc_type
    uint32 cc_cmd       = 4; // uint32_cc_cmd
    bytes auth_pic_sig  = 5; // bytes_auth_pic_sig
    bytes auth_sig      = 6; // bytes_auth_sig
    bytes auth_buf      = 7; // bytes_auth_buf
    uint32 server_time  = 8; // uint32_server_time
    uint32 client_time  = 9; // uint32_client_time
    uint32 rand         = 10; // uint32_rand
    string phone_number = 11; // string_phone_number
  }
  // CSHead is the message type for the CSHead.
  message CSHead {
    uint64 uin            = 1; // uint64_uin
    uint32 command        = 2; // uint32_command
    uint32 seq            = 3; // uint32_seq
    uint32 version        = 4; // uint32_version
    uint32 retry_times    = 5; // uint32_retry_times
    uint32 client_type    = 6; // uint32_client_type
    uint32 pubno          = 7; // uint32_pubno
    uint32 localid        = 8; // uint32_localid
    uint32 timezone       = 9; // uint32_timezone
    fixed32 client_ip     = 10; // uint32_client_ip
    uint32 client_port    = 11; // uint32_client_port
    fixed32 conn_ip       = 12; // uint32_conn_ip
    uint32 conn_port      = 13; // uint32_conn_port
    fixed32 interface_ip  = 14; // uint32_interface_ip
    uint32 interface_port = 15; // uint32_interface_port
    fixed32 actual_ip     = 16; // uint32_actual_ip
    uint32 flag           = 17; // uint32_flag
    fixed32 timestamp     = 18; // uint32_timestamp
    uint32 subcmd         = 19; // uint32_subcmd
    uint32 result         = 20; // uint32_result
    uint32 app_id         = 21; // uint32_app_id
    uint32 instance_id    = 22; // uint32_instance_id
    uint64 session_id     = 23; // uint64_session_id
    uint32 idc_id         = 24; // uint32_idc_id
  }
  // DeltaHead is the message type for the DeltaHead.
  message DeltaHead {
    uint64 total_len  = 1; // uint64_total_len
    uint64 offset     = 2; // uint64_offset
    uint64 ack_offset = 3; // uint64_ack_offset
    bytes cookie      = 4; // bytes_cookie
    bytes ack_cookie  = 5; // bytes_ack_cookie
    uint32 result     = 6; // uint32_result
    uint32 flags      = 7; // uint32_flags
  }
  // Head is the message type for the Head.
  message Head {
    uint32 head_type               = 1; // uint32_head_type
    CSHead msg_cs_head             = 2; // msg_cs_head
    S2CHead msg_s2c_head           = 3; // msg_s2c_head
    HttpConnHead msg_httpconn_head = 4; // msg_httpconn_head
    uint32 paint_flag              = 5; // uint32_paint_flag
    LoginSig msg_login_sig         = 6; // msg_login_sig
    DeltaHead msg_delta_head       = 7; // msg_delta_head
    C2CHead msg_c2c_head           = 8; // msg_c2c_head
    SConnHead msg_sconn_head       = 9; // msg_sconn_head
    InstCtrl msg_inst_ctrl         = 10; // msg_inst_ctrl
  }
  // HttpConnHead is the message type for the HttpConnHead.
  message HttpConnHead {
    uint64 uin                 = 1; // uint64_uin
    uint32 command             = 2; // uint32_command
    uint32 sub_command         = 3; // uint32_sub_command
    uint32 seq                 = 4; // uint32_seq
    uint32 version             = 5; // uint32_version
    uint32 retry_times         = 6; // uint32_retry_times
    uint32 client_type         = 7; // uint32_client_type
    uint32 pub_no              = 8; // uint32_pub_no
    uint32 local_id            = 9; // uint32_local_id
    uint32 time_zone           = 10; // uint32_time_zone
    fixed32 client_ip          = 11; // uint32_client_ip
    uint32 client_port         = 12; // uint32_client_port
    fixed32 qzhttp_ip          = 13; // uint32_qzhttp_ip
    uint32 qzhttp_port         = 14; // uint32_qzhttp_port
    fixed32 spp_ip             = 15; // uint32_spp_ip
    uint32 spp_port            = 16; // uint32_spp_port
    uint32 flag                = 17; // uint32_flag
    bytes key                  = 18; // bytes_key
    uint32 compress_type       = 19; // uint32_compress_type
    uint32 origin_size         = 20; // uint32_origin_size
    uint32 error_code          = 21; // uint32_error_code
    RedirectMsg msg_redirect   = 22; // msg_redirect
    uint32 command_id          = 23; // uint32_command_id
    uint32 service_cmdid       = 24; // uint32_service_cmdid
    TransOidbHead msg_oidbhead = 25; // msg_oidbhead
  }
  // InstCtrl is the message type for the InstCtrl.
  message InstCtrl {
    repeated InstInfo msg_send_to_inst = 1; // rpt_msg_send_to_inst
    repeated InstInfo msg_exclude_inst = 2; // rpt_msg_exclude_inst
    InstInfo msg_from_inst             = 3; // msg_from_inst
  }
  // InstInfo is the message type for the InstInfo.
  message InstInfo {
    uint32 apppid          = 1; // uint32_apppid
    uint32 instid          = 2; // uint32_instid
    uint32 platform        = 3; // uint32_platform
    int32 enum_device_type = 10; // enum_device_type
  }
  // LoginSig is the message type for the LoginSig.
  message LoginSig {
    uint32 type = 1; // uint32_type
    bytes sig   = 2; // bytes_sig
  }
  // RedirectMsg is the message type for the RedirectMsg.
  message RedirectMsg {
    fixed32 last_redirect_ip  = 1; // uint32_last_redirect_ip
    uint32 last_redirect_port = 2; // uint32_last_redirect_port
    fixed32 redirect_ip       = 3; // uint32_redirect_ip
    uint32 redirect_port      = 4; // uint32_redirect_port
    uint32 redirect_count     = 5; // uint32_redirect_count
  }
  // S2CHead is the message type for the S2CHead.
  message S2CHead {
    uint32 sub_msgtype = 1; // uint32_sub_msgtype
    uint32 msg_type    = 2; // uint32_msg_type
    uint64 from_uin    = 3; // uint64_from_uin
    uint32 msg_id      = 4; // uint32_msg_id
    fixed32 relay_ip   = 5; // uint32_relay_ip
    uint32 relay_port  = 6; // uint32_relay_port
    uint64 to_uin      = 7; // uint64_to_uin
  }
  // SConnHead is the message type for the SConnHead.
  message SConnHead {}
  // TransOidbHead is the message type for the TransOidbHead.
  message TransOidbHead {
    uint32 command      = 1; // uint32_command
    uint32 service_type = 2; // uint32_service_type
    uint32 result       = 3; // uint32_result
    string error_msg    = 4; // str_error_msg
  }
}
