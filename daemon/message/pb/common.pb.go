// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: daemon/message/pb/common.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message generated by proto-message-gen. DO NOT EDIT.
// source: msf.msgcomm.msg_comm
//
// msg_comm is the message type for the msg_comm.
type MsgCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgCommon) Reset() {
	*x = MsgCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCommon) ProtoMessage() {}

func (x *MsgCommon) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgCommon.ProtoReflect.Descriptor instead.
func (*MsgCommon) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_common_proto_rawDescGZIP(), []int{0}
}

// AppShareInfo is the message type for the AppShareInfo.
type MsgCommon_AppShareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppshareId       uint32                `protobuf:"varint,1,opt,name=appshare_id,json=appshareId,proto3" json:"appshare_id,omitempty"`                  // appshare_id
	AppshareCookie   []byte                `protobuf:"bytes,2,opt,name=appshare_cookie,json=appshareCookie,proto3" json:"appshare_cookie,omitempty"`       // appshare_cookie
	AppshareResource *MsgCommon_PluginInfo `protobuf:"bytes,3,opt,name=appshare_resource,json=appshareResource,proto3" json:"appshare_resource,omitempty"` // appshare_resource
}

func (x *MsgCommon_AppShareInfo) Reset() {
	*x = MsgCommon_AppShareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCommon_AppShareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCommon_AppShareInfo) ProtoMessage() {}

func (x *MsgCommon_AppShareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgCommon_AppShareInfo.ProtoReflect.Descriptor instead.
func (*MsgCommon_AppShareInfo) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_common_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MsgCommon_AppShareInfo) GetAppshareId() uint32 {
	if x != nil {
		return x.AppshareId
	}
	return 0
}

func (x *MsgCommon_AppShareInfo) GetAppshareCookie() []byte {
	if x != nil {
		return x.AppshareCookie
	}
	return nil
}

func (x *MsgCommon_AppShareInfo) GetAppshareResource() *MsgCommon_PluginInfo {
	if x != nil {
		return x.AppshareResource
	}
	return nil
}

// C2CTmpMsgHead is the message type for the C2CTmpMsgHead.
type MsgCommon_C2CTmpMsgHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	C2CType            uint32 `protobuf:"varint,1,opt,name=c2c_type,json=c2cType,proto3" json:"c2c_type,omitempty"`                                    // c2c_type
	ServiceType        uint32 `protobuf:"varint,2,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`                        // service_type
	GroupUin           uint64 `protobuf:"varint,3,opt,name=group_uin,json=groupUin,proto3" json:"group_uin,omitempty"`                                 // group_uin
	GroupCode          uint64 `protobuf:"varint,4,opt,name=group_code,json=groupCode,proto3" json:"group_code,omitempty"`                              // group_code
	Sig                []byte `protobuf:"bytes,5,opt,name=sig,proto3" json:"sig,omitempty"`                                                            // sig
	SigType            uint32 `protobuf:"varint,6,opt,name=sig_type,json=sigType,proto3" json:"sig_type,omitempty"`                                    // sig_type
	FromPhone          string `protobuf:"bytes,7,opt,name=from_phone,json=fromPhone,proto3" json:"from_phone,omitempty"`                               // from_phone
	ToPhone            string `protobuf:"bytes,8,opt,name=to_phone,json=toPhone,proto3" json:"to_phone,omitempty"`                                     // to_phone
	LockDisplay        uint32 `protobuf:"varint,9,opt,name=lock_display,json=lockDisplay,proto3" json:"lock_display,omitempty"`                        // lock_display
	DirectionFlag      uint32 `protobuf:"varint,10,opt,name=direction_flag,json=directionFlag,proto3" json:"direction_flag,omitempty"`                 // direction_flag
	Reserved           []byte `protobuf:"bytes,11,opt,name=reserved,proto3" json:"reserved,omitempty"`                                                 // reserved
	BusinessName       []byte `protobuf:"bytes,14,opt,name=business_name,json=businessName,proto3" json:"business_name,omitempty"`                     // business_name
	BusinessSubContent []byte `protobuf:"bytes,15,opt,name=business_sub_content,json=businessSubContent,proto3" json:"business_sub_content,omitempty"` // business_sub_content
}

func (x *MsgCommon_C2CTmpMsgHead) Reset() {
	*x = MsgCommon_C2CTmpMsgHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCommon_C2CTmpMsgHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCommon_C2CTmpMsgHead) ProtoMessage() {}

func (x *MsgCommon_C2CTmpMsgHead) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgCommon_C2CTmpMsgHead.ProtoReflect.Descriptor instead.
func (*MsgCommon_C2CTmpMsgHead) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_common_proto_rawDescGZIP(), []int{0, 1}
}

func (x *MsgCommon_C2CTmpMsgHead) GetC2CType() uint32 {
	if x != nil {
		return x.C2CType
	}
	return 0
}

func (x *MsgCommon_C2CTmpMsgHead) GetServiceType() uint32 {
	if x != nil {
		return x.ServiceType
	}
	return 0
}

func (x *MsgCommon_C2CTmpMsgHead) GetGroupUin() uint64 {
	if x != nil {
		return x.GroupUin
	}
	return 0
}

func (x *MsgCommon_C2CTmpMsgHead) GetGroupCode() uint64 {
	if x != nil {
		return x.GroupCode
	}
	return 0
}

func (x *MsgCommon_C2CTmpMsgHead) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *MsgCommon_C2CTmpMsgHead) GetSigType() uint32 {
	if x != nil {
		return x.SigType
	}
	return 0
}

func (x *MsgCommon_C2CTmpMsgHead) GetFromPhone() string {
	if x != nil {
		return x.FromPhone
	}
	return ""
}

func (x *MsgCommon_C2CTmpMsgHead) GetToPhone() string {
	if x != nil {
		return x.ToPhone
	}
	return ""
}

func (x *MsgCommon_C2CTmpMsgHead) GetLockDisplay() uint32 {
	if x != nil {
		return x.LockDisplay
	}
	return 0
}

func (x *MsgCommon_C2CTmpMsgHead) GetDirectionFlag() uint32 {
	if x != nil {
		return x.DirectionFlag
	}
	return 0
}

func (x *MsgCommon_C2CTmpMsgHead) GetReserved() []byte {
	if x != nil {
		return x.Reserved
	}
	return nil
}

func (x *MsgCommon_C2CTmpMsgHead) GetBusinessName() []byte {
	if x != nil {
		return x.BusinessName
	}
	return nil
}

func (x *MsgCommon_C2CTmpMsgHead) GetBusinessSubContent() []byte {
	if x != nil {
		return x.BusinessSubContent
	}
	return nil
}

// ContentHead is the message type for the ContentHead.
type MsgCommon_ContentHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PkgNum    uint32 `protobuf:"varint,1,opt,name=pkg_num,json=pkgNum,proto3" json:"pkg_num,omitempty"`          // pkg_num
	PkgIndex  uint32 `protobuf:"varint,2,opt,name=pkg_index,json=pkgIndex,proto3" json:"pkg_index,omitempty"`    // pkg_index
	DivSeq    uint32 `protobuf:"varint,3,opt,name=div_seq,json=divSeq,proto3" json:"div_seq,omitempty"`          // div_seq
	AutoReply uint32 `protobuf:"varint,4,opt,name=auto_reply,json=autoReply,proto3" json:"auto_reply,omitempty"` // auto_reply
}

func (x *MsgCommon_ContentHead) Reset() {
	*x = MsgCommon_ContentHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCommon_ContentHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCommon_ContentHead) ProtoMessage() {}

func (x *MsgCommon_ContentHead) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgCommon_ContentHead.ProtoReflect.Descriptor instead.
func (*MsgCommon_ContentHead) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_common_proto_rawDescGZIP(), []int{0, 2}
}

func (x *MsgCommon_ContentHead) GetPkgNum() uint32 {
	if x != nil {
		return x.PkgNum
	}
	return 0
}

func (x *MsgCommon_ContentHead) GetPkgIndex() uint32 {
	if x != nil {
		return x.PkgIndex
	}
	return 0
}

func (x *MsgCommon_ContentHead) GetDivSeq() uint32 {
	if x != nil {
		return x.DivSeq
	}
	return 0
}

func (x *MsgCommon_ContentHead) GetAutoReply() uint32 {
	if x != nil {
		return x.AutoReply
	}
	return 0
}

// DiscussInfo is the message type for the DiscussInfo.
type MsgCommon_DiscussInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiscussUin     uint64 `protobuf:"varint,1,opt,name=discuss_uin,json=discussUin,proto3" json:"discuss_uin,omitempty"`               // discuss_uin
	DiscussType    uint32 `protobuf:"varint,2,opt,name=discuss_type,json=discussType,proto3" json:"discuss_type,omitempty"`            // discuss_type
	DiscussInfoSeq uint64 `protobuf:"varint,3,opt,name=discuss_info_seq,json=discussInfoSeq,proto3" json:"discuss_info_seq,omitempty"` // discuss_info_seq
	DiscussRemark  []byte `protobuf:"bytes,4,opt,name=discuss_remark,json=discussRemark,proto3" json:"discuss_remark,omitempty"`       // discuss_remark
	DiscussName    []byte `protobuf:"bytes,5,opt,name=discuss_name,json=discussName,proto3" json:"discuss_name,omitempty"`             // discuss_name
}

func (x *MsgCommon_DiscussInfo) Reset() {
	*x = MsgCommon_DiscussInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCommon_DiscussInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCommon_DiscussInfo) ProtoMessage() {}

func (x *MsgCommon_DiscussInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgCommon_DiscussInfo.ProtoReflect.Descriptor instead.
func (*MsgCommon_DiscussInfo) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_common_proto_rawDescGZIP(), []int{0, 3}
}

func (x *MsgCommon_DiscussInfo) GetDiscussUin() uint64 {
	if x != nil {
		return x.DiscussUin
	}
	return 0
}

func (x *MsgCommon_DiscussInfo) GetDiscussType() uint32 {
	if x != nil {
		return x.DiscussType
	}
	return 0
}

func (x *MsgCommon_DiscussInfo) GetDiscussInfoSeq() uint64 {
	if x != nil {
		return x.DiscussInfoSeq
	}
	return 0
}

func (x *MsgCommon_DiscussInfo) GetDiscussRemark() []byte {
	if x != nil {
		return x.DiscussRemark
	}
	return nil
}

func (x *MsgCommon_DiscussInfo) GetDiscussName() []byte {
	if x != nil {
		return x.DiscussName
	}
	return nil
}

// ExtGroupKeyInfo is the message type for the ExtGroupKeyInfo.
type MsgCommon_ExtGroupKeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurMaxSeq        uint32 `protobuf:"varint,1,opt,name=cur_max_seq,json=curMaxSeq,proto3" json:"cur_max_seq,omitempty"`                      // cur_max_seq
	CurTime          uint64 `protobuf:"varint,2,opt,name=cur_time,json=curTime,proto3" json:"cur_time,omitempty"`                              // cur_time
	OperateByParents uint32 `protobuf:"varint,3,opt,name=operate_by_parents,json=operateByParents,proto3" json:"operate_by_parents,omitempty"` // operate_by_parents
	ExtGroupInfo     []byte `protobuf:"bytes,4,opt,name=ext_group_info,json=extGroupInfo,proto3" json:"ext_group_info,omitempty"`              // bytes_ext_group_info
}

func (x *MsgCommon_ExtGroupKeyInfo) Reset() {
	*x = MsgCommon_ExtGroupKeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCommon_ExtGroupKeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCommon_ExtGroupKeyInfo) ProtoMessage() {}

func (x *MsgCommon_ExtGroupKeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgCommon_ExtGroupKeyInfo.ProtoReflect.Descriptor instead.
func (*MsgCommon_ExtGroupKeyInfo) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_common_proto_rawDescGZIP(), []int{0, 4}
}

func (x *MsgCommon_ExtGroupKeyInfo) GetCurMaxSeq() uint32 {
	if x != nil {
		return x.CurMaxSeq
	}
	return 0
}

func (x *MsgCommon_ExtGroupKeyInfo) GetCurTime() uint64 {
	if x != nil {
		return x.CurTime
	}
	return 0
}

func (x *MsgCommon_ExtGroupKeyInfo) GetOperateByParents() uint32 {
	if x != nil {
		return x.OperateByParents
	}
	return 0
}

func (x *MsgCommon_ExtGroupKeyInfo) GetExtGroupInfo() []byte {
	if x != nil {
		return x.ExtGroupInfo
	}
	return nil
}

// GroupInfo is the message type for the GroupInfo.
type MsgCommon_GroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupCode     uint64 `protobuf:"varint,1,opt,name=group_code,json=groupCode,proto3" json:"group_code,omitempty"`               // group_code
	GroupType     uint32 `protobuf:"varint,2,opt,name=group_type,json=groupType,proto3" json:"group_type,omitempty"`               // group_type
	GroupInfoSeq  uint64 `protobuf:"varint,3,opt,name=group_info_seq,json=groupInfoSeq,proto3" json:"group_info_seq,omitempty"`    // group_info_seq
	GroupCard     []byte `protobuf:"bytes,4,opt,name=group_card,json=groupCard,proto3" json:"group_card,omitempty"`                // group_card
	GroupRank     []byte `protobuf:"bytes,5,opt,name=group_rank,json=groupRank,proto3" json:"group_rank,omitempty"`                // group_rank
	GroupLevel    uint32 `protobuf:"varint,6,opt,name=group_level,json=groupLevel,proto3" json:"group_level,omitempty"`            // group_level
	GroupCardType uint32 `protobuf:"varint,7,opt,name=group_card_type,json=groupCardType,proto3" json:"group_card_type,omitempty"` // group_card_type
	GroupName     []byte `protobuf:"bytes,8,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`                // group_name
}

func (x *MsgCommon_GroupInfo) Reset() {
	*x = MsgCommon_GroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCommon_GroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCommon_GroupInfo) ProtoMessage() {}

func (x *MsgCommon_GroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgCommon_GroupInfo.ProtoReflect.Descriptor instead.
func (*MsgCommon_GroupInfo) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_common_proto_rawDescGZIP(), []int{0, 5}
}

func (x *MsgCommon_GroupInfo) GetGroupCode() uint64 {
	if x != nil {
		return x.GroupCode
	}
	return 0
}

func (x *MsgCommon_GroupInfo) GetGroupType() uint32 {
	if x != nil {
		return x.GroupType
	}
	return 0
}

func (x *MsgCommon_GroupInfo) GetGroupInfoSeq() uint64 {
	if x != nil {
		return x.GroupInfoSeq
	}
	return 0
}

func (x *MsgCommon_GroupInfo) GetGroupCard() []byte {
	if x != nil {
		return x.GroupCard
	}
	return nil
}

func (x *MsgCommon_GroupInfo) GetGroupRank() []byte {
	if x != nil {
		return x.GroupRank
	}
	return nil
}

func (x *MsgCommon_GroupInfo) GetGroupLevel() uint32 {
	if x != nil {
		return x.GroupLevel
	}
	return 0
}

func (x *MsgCommon_GroupInfo) GetGroupCardType() uint32 {
	if x != nil {
		return x.GroupCardType
	}
	return 0
}

func (x *MsgCommon_GroupInfo) GetGroupName() []byte {
	if x != nil {
		return x.GroupName
	}
	return nil
}

// Msg is the message type for the Msg.
type MsgCommon_Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgHead      *MsgCommon_MsgHead      `protobuf:"bytes,1,opt,name=msg_head,json=msgHead,proto3" json:"msg_head,omitempty"`                // msg_head
	ContentHead  *MsgCommon_ContentHead  `protobuf:"bytes,2,opt,name=content_head,json=contentHead,proto3" json:"content_head,omitempty"`    // content_head
	MsgBody      *IMMsgBody_MsgBody      `protobuf:"bytes,3,opt,name=msg_body,json=msgBody,proto3" json:"msg_body,omitempty"`                // msg_body
	AppshareInfo *MsgCommon_AppShareInfo `protobuf:"bytes,4,opt,name=appshare_info,json=appshareInfo,proto3" json:"appshare_info,omitempty"` // appshare_info
}

func (x *MsgCommon_Msg) Reset() {
	*x = MsgCommon_Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCommon_Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCommon_Msg) ProtoMessage() {}

func (x *MsgCommon_Msg) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgCommon_Msg.ProtoReflect.Descriptor instead.
func (*MsgCommon_Msg) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_common_proto_rawDescGZIP(), []int{0, 6}
}

func (x *MsgCommon_Msg) GetMsgHead() *MsgCommon_MsgHead {
	if x != nil {
		return x.MsgHead
	}
	return nil
}

func (x *MsgCommon_Msg) GetContentHead() *MsgCommon_ContentHead {
	if x != nil {
		return x.ContentHead
	}
	return nil
}

func (x *MsgCommon_Msg) GetMsgBody() *IMMsgBody_MsgBody {
	if x != nil {
		return x.MsgBody
	}
	return nil
}

func (x *MsgCommon_Msg) GetAppshareInfo() *MsgCommon_AppShareInfo {
	if x != nil {
		return x.AppshareInfo
	}
	return nil
}

// MsgHead is the message type for the MsgHead.
type MsgCommon_MsgHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUin                    uint64                     `protobuf:"varint,1,opt,name=from_uin,json=fromUin,proto3" json:"from_uin,omitempty"`                                                                 // from_uin
	ToUin                      uint64                     `protobuf:"varint,2,opt,name=to_uin,json=toUin,proto3" json:"to_uin,omitempty"`                                                                       // to_uin
	MsgType                    uint32                     `protobuf:"varint,3,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"`                                                                 // msg_type
	C2CCmd                     uint32                     `protobuf:"varint,4,opt,name=c2c_cmd,json=c2cCmd,proto3" json:"c2c_cmd,omitempty"`                                                                    // c2c_cmd
	MsgSeq                     uint32                     `protobuf:"varint,5,opt,name=msg_seq,json=msgSeq,proto3" json:"msg_seq,omitempty"`                                                                    // msg_seq
	MsgTime                    uint32                     `protobuf:"varint,6,opt,name=msg_time,json=msgTime,proto3" json:"msg_time,omitempty"`                                                                 // msg_time
	MsgUid                     uint64                     `protobuf:"varint,7,opt,name=msg_uid,json=msgUid,proto3" json:"msg_uid,omitempty"`                                                                    // msg_uid
	C2CTmpMsgHead              *MsgCommon_C2CTmpMsgHead   `protobuf:"bytes,8,opt,name=c2c_tmp_msg_head,json=c2cTmpMsgHead,proto3" json:"c2c_tmp_msg_head,omitempty"`                                            // c2c_tmp_msg_head
	GroupInfo                  *MsgCommon_GroupInfo       `protobuf:"bytes,9,opt,name=group_info,json=groupInfo,proto3" json:"group_info,omitempty"`                                                            // group_info
	FromAppid                  uint32                     `protobuf:"varint,10,opt,name=from_appid,json=fromAppid,proto3" json:"from_appid,omitempty"`                                                          // from_appid
	FromInstid                 uint32                     `protobuf:"varint,11,opt,name=from_instid,json=fromInstid,proto3" json:"from_instid,omitempty"`                                                       // from_instid
	UserActive                 uint32                     `protobuf:"varint,12,opt,name=user_active,json=userActive,proto3" json:"user_active,omitempty"`                                                       // user_active
	DiscussInfo                *MsgCommon_DiscussInfo     `protobuf:"bytes,13,opt,name=discuss_info,json=discussInfo,proto3" json:"discuss_info,omitempty"`                                                     // discuss_info
	FromNick                   string                     `protobuf:"bytes,14,opt,name=from_nick,json=fromNick,proto3" json:"from_nick,omitempty"`                                                              // from_nick
	AuthUin                    uint64                     `protobuf:"varint,15,opt,name=auth_uin,json=authUin,proto3" json:"auth_uin,omitempty"`                                                                // auth_uin
	AuthNick                   string                     `protobuf:"bytes,16,opt,name=auth_nick,json=authNick,proto3" json:"auth_nick,omitempty"`                                                              // auth_nick
	MsgFlag                    uint32                     `protobuf:"varint,17,opt,name=msg_flag,json=msgFlag,proto3" json:"msg_flag,omitempty"`                                                                // msg_flag
	AuthRemark                 string                     `protobuf:"bytes,18,opt,name=auth_remark,json=authRemark,proto3" json:"auth_remark,omitempty"`                                                        // auth_remark
	GroupName                  string                     `protobuf:"bytes,19,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`                                                           // group_name
	MutiltransHead             *MsgCommon_MutilTransHead  `protobuf:"bytes,20,opt,name=mutiltrans_head,json=mutiltransHead,proto3" json:"mutiltrans_head,omitempty"`                                            // mutiltrans_head
	MsgInstCtrl                *IMMsgHead_InstCtrl        `protobuf:"bytes,21,opt,name=msg_inst_ctrl,json=msgInstCtrl,proto3" json:"msg_inst_ctrl,omitempty"`                                                   // msg_inst_ctrl
	PublicAccountGroupSendFlag uint32                     `protobuf:"varint,22,opt,name=public_account_group_send_flag,json=publicAccountGroupSendFlag,proto3" json:"public_account_group_send_flag,omitempty"` // public_account_group_send_flag
	WseqInC2CMsghead           uint32                     `protobuf:"varint,23,opt,name=wseq_in_c2c_msghead,json=wseqInC2cMsghead,proto3" json:"wseq_in_c2c_msghead,omitempty"`                                 // wseq_in_c2c_msghead
	Cpid                       uint64                     `protobuf:"varint,24,opt,name=cpid,proto3" json:"cpid,omitempty"`                                                                                     // cpid
	ExtGroupKeyInfo            *MsgCommon_ExtGroupKeyInfo `protobuf:"bytes,25,opt,name=ext_group_key_info,json=extGroupKeyInfo,proto3" json:"ext_group_key_info,omitempty"`                                     // ext_group_key_info
	MultiCompatibleText        string                     `protobuf:"bytes,26,opt,name=multi_compatible_text,json=multiCompatibleText,proto3" json:"multi_compatible_text,omitempty"`                           // multi_compatible_text
	AuthSex                    uint32                     `protobuf:"varint,27,opt,name=auth_sex,json=authSex,proto3" json:"auth_sex,omitempty"`                                                                // auth_sex
	IsSrcMsg                   bool                       `protobuf:"varint,28,opt,name=is_src_msg,json=isSrcMsg,proto3" json:"is_src_msg,omitempty"`                                                           // is_src_msg
}

func (x *MsgCommon_MsgHead) Reset() {
	*x = MsgCommon_MsgHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCommon_MsgHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCommon_MsgHead) ProtoMessage() {}

func (x *MsgCommon_MsgHead) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgCommon_MsgHead.ProtoReflect.Descriptor instead.
func (*MsgCommon_MsgHead) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_common_proto_rawDescGZIP(), []int{0, 7}
}

func (x *MsgCommon_MsgHead) GetFromUin() uint64 {
	if x != nil {
		return x.FromUin
	}
	return 0
}

func (x *MsgCommon_MsgHead) GetToUin() uint64 {
	if x != nil {
		return x.ToUin
	}
	return 0
}

func (x *MsgCommon_MsgHead) GetMsgType() uint32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *MsgCommon_MsgHead) GetC2CCmd() uint32 {
	if x != nil {
		return x.C2CCmd
	}
	return 0
}

func (x *MsgCommon_MsgHead) GetMsgSeq() uint32 {
	if x != nil {
		return x.MsgSeq
	}
	return 0
}

func (x *MsgCommon_MsgHead) GetMsgTime() uint32 {
	if x != nil {
		return x.MsgTime
	}
	return 0
}

func (x *MsgCommon_MsgHead) GetMsgUid() uint64 {
	if x != nil {
		return x.MsgUid
	}
	return 0
}

func (x *MsgCommon_MsgHead) GetC2CTmpMsgHead() *MsgCommon_C2CTmpMsgHead {
	if x != nil {
		return x.C2CTmpMsgHead
	}
	return nil
}

func (x *MsgCommon_MsgHead) GetGroupInfo() *MsgCommon_GroupInfo {
	if x != nil {
		return x.GroupInfo
	}
	return nil
}

func (x *MsgCommon_MsgHead) GetFromAppid() uint32 {
	if x != nil {
		return x.FromAppid
	}
	return 0
}

func (x *MsgCommon_MsgHead) GetFromInstid() uint32 {
	if x != nil {
		return x.FromInstid
	}
	return 0
}

func (x *MsgCommon_MsgHead) GetUserActive() uint32 {
	if x != nil {
		return x.UserActive
	}
	return 0
}

func (x *MsgCommon_MsgHead) GetDiscussInfo() *MsgCommon_DiscussInfo {
	if x != nil {
		return x.DiscussInfo
	}
	return nil
}

func (x *MsgCommon_MsgHead) GetFromNick() string {
	if x != nil {
		return x.FromNick
	}
	return ""
}

func (x *MsgCommon_MsgHead) GetAuthUin() uint64 {
	if x != nil {
		return x.AuthUin
	}
	return 0
}

func (x *MsgCommon_MsgHead) GetAuthNick() string {
	if x != nil {
		return x.AuthNick
	}
	return ""
}

func (x *MsgCommon_MsgHead) GetMsgFlag() uint32 {
	if x != nil {
		return x.MsgFlag
	}
	return 0
}

func (x *MsgCommon_MsgHead) GetAuthRemark() string {
	if x != nil {
		return x.AuthRemark
	}
	return ""
}

func (x *MsgCommon_MsgHead) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *MsgCommon_MsgHead) GetMutiltransHead() *MsgCommon_MutilTransHead {
	if x != nil {
		return x.MutiltransHead
	}
	return nil
}

func (x *MsgCommon_MsgHead) GetMsgInstCtrl() *IMMsgHead_InstCtrl {
	if x != nil {
		return x.MsgInstCtrl
	}
	return nil
}

func (x *MsgCommon_MsgHead) GetPublicAccountGroupSendFlag() uint32 {
	if x != nil {
		return x.PublicAccountGroupSendFlag
	}
	return 0
}

func (x *MsgCommon_MsgHead) GetWseqInC2CMsghead() uint32 {
	if x != nil {
		return x.WseqInC2CMsghead
	}
	return 0
}

func (x *MsgCommon_MsgHead) GetCpid() uint64 {
	if x != nil {
		return x.Cpid
	}
	return 0
}

func (x *MsgCommon_MsgHead) GetExtGroupKeyInfo() *MsgCommon_ExtGroupKeyInfo {
	if x != nil {
		return x.ExtGroupKeyInfo
	}
	return nil
}

func (x *MsgCommon_MsgHead) GetMultiCompatibleText() string {
	if x != nil {
		return x.MultiCompatibleText
	}
	return ""
}

func (x *MsgCommon_MsgHead) GetAuthSex() uint32 {
	if x != nil {
		return x.AuthSex
	}
	return 0
}

func (x *MsgCommon_MsgHead) GetIsSrcMsg() bool {
	if x != nil {
		return x.IsSrcMsg
	}
	return false
}

// MsgType0x210 is the message type for the MsgType0x210.
type MsgCommon_MsgType0X210 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubMsgType uint32 `protobuf:"varint,1,opt,name=sub_msg_type,json=subMsgType,proto3" json:"sub_msg_type,omitempty"` // sub_msg_type
	MsgContent []byte `protobuf:"bytes,2,opt,name=msg_content,json=msgContent,proto3" json:"msg_content,omitempty"`    // msg_content
}

func (x *MsgCommon_MsgType0X210) Reset() {
	*x = MsgCommon_MsgType0X210{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCommon_MsgType0X210) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCommon_MsgType0X210) ProtoMessage() {}

func (x *MsgCommon_MsgType0X210) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgCommon_MsgType0X210.ProtoReflect.Descriptor instead.
func (*MsgCommon_MsgType0X210) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_common_proto_rawDescGZIP(), []int{0, 8}
}

func (x *MsgCommon_MsgType0X210) GetSubMsgType() uint32 {
	if x != nil {
		return x.SubMsgType
	}
	return 0
}

func (x *MsgCommon_MsgType0X210) GetMsgContent() []byte {
	if x != nil {
		return x.MsgContent
	}
	return nil
}

// MutilTransHead is the message type for the MutilTransHead.
type MsgCommon_MutilTransHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` // status
	MsgId  uint32 `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`   // msgId
}

func (x *MsgCommon_MutilTransHead) Reset() {
	*x = MsgCommon_MutilTransHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCommon_MutilTransHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCommon_MutilTransHead) ProtoMessage() {}

func (x *MsgCommon_MutilTransHead) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgCommon_MutilTransHead.ProtoReflect.Descriptor instead.
func (*MsgCommon_MutilTransHead) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_common_proto_rawDescGZIP(), []int{0, 9}
}

func (x *MsgCommon_MutilTransHead) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MsgCommon_MutilTransHead) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

// PluginInfo is the message type for the PluginInfo.
type MsgCommon_PluginInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResId       uint32 `protobuf:"varint,1,opt,name=res_id,json=resId,proto3" json:"res_id,omitempty"`                     // res_id
	PkgName     string `protobuf:"bytes,2,opt,name=pkg_name,json=pkgName,proto3" json:"pkg_name,omitempty"`                // pkg_name
	NewVer      uint32 `protobuf:"varint,3,opt,name=new_ver,json=newVer,proto3" json:"new_ver,omitempty"`                  // new_ver
	ResType     uint32 `protobuf:"varint,4,opt,name=res_type,json=resType,proto3" json:"res_type,omitempty"`               // res_type
	LanType     uint32 `protobuf:"varint,5,opt,name=lan_type,json=lanType,proto3" json:"lan_type,omitempty"`               // lan_type
	Priority    uint32 `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`                            // priority
	ResName     string `protobuf:"bytes,7,opt,name=res_name,json=resName,proto3" json:"res_name,omitempty"`                // res_name
	ResDesc     string `protobuf:"bytes,8,opt,name=res_desc,json=resDesc,proto3" json:"res_desc,omitempty"`                // res_desc
	ResUrlBig   string `protobuf:"bytes,9,opt,name=res_url_big,json=resUrlBig,proto3" json:"res_url_big,omitempty"`        // res_url_big
	ResUrlSmall string `protobuf:"bytes,10,opt,name=res_url_small,json=resUrlSmall,proto3" json:"res_url_small,omitempty"` // res_url_small
	ResConf     string `protobuf:"bytes,11,opt,name=res_conf,json=resConf,proto3" json:"res_conf,omitempty"`               // res_conf
}

func (x *MsgCommon_PluginInfo) Reset() {
	*x = MsgCommon_PluginInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCommon_PluginInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCommon_PluginInfo) ProtoMessage() {}

func (x *MsgCommon_PluginInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgCommon_PluginInfo.ProtoReflect.Descriptor instead.
func (*MsgCommon_PluginInfo) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_common_proto_rawDescGZIP(), []int{0, 10}
}

func (x *MsgCommon_PluginInfo) GetResId() uint32 {
	if x != nil {
		return x.ResId
	}
	return 0
}

func (x *MsgCommon_PluginInfo) GetPkgName() string {
	if x != nil {
		return x.PkgName
	}
	return ""
}

func (x *MsgCommon_PluginInfo) GetNewVer() uint32 {
	if x != nil {
		return x.NewVer
	}
	return 0
}

func (x *MsgCommon_PluginInfo) GetResType() uint32 {
	if x != nil {
		return x.ResType
	}
	return 0
}

func (x *MsgCommon_PluginInfo) GetLanType() uint32 {
	if x != nil {
		return x.LanType
	}
	return 0
}

func (x *MsgCommon_PluginInfo) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *MsgCommon_PluginInfo) GetResName() string {
	if x != nil {
		return x.ResName
	}
	return ""
}

func (x *MsgCommon_PluginInfo) GetResDesc() string {
	if x != nil {
		return x.ResDesc
	}
	return ""
}

func (x *MsgCommon_PluginInfo) GetResUrlBig() string {
	if x != nil {
		return x.ResUrlBig
	}
	return ""
}

func (x *MsgCommon_PluginInfo) GetResUrlSmall() string {
	if x != nil {
		return x.ResUrlSmall
	}
	return ""
}

func (x *MsgCommon_PluginInfo) GetResConf() string {
	if x != nil {
		return x.ResConf
	}
	return ""
}

// Uin2Nick is the message type for the Uin2Nick.
type MsgCommon_Uin2Nick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin  uint64 `protobuf:"varint,1,opt,name=uin,proto3" json:"uin,omitempty"`  // uint64_uin
	Nick string `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"` // str_nick
}

func (x *MsgCommon_Uin2Nick) Reset() {
	*x = MsgCommon_Uin2Nick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCommon_Uin2Nick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCommon_Uin2Nick) ProtoMessage() {}

func (x *MsgCommon_Uin2Nick) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgCommon_Uin2Nick.ProtoReflect.Descriptor instead.
func (*MsgCommon_Uin2Nick) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_common_proto_rawDescGZIP(), []int{0, 11}
}

func (x *MsgCommon_Uin2Nick) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *MsgCommon_Uin2Nick) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

// UinPairMsg is the message type for the UinPairMsg.
type MsgCommon_UinPairMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastReadTime uint32           `protobuf:"varint,1,opt,name=last_read_time,json=lastReadTime,proto3" json:"last_read_time,omitempty"` // last_read_time
	PeerUin      uint64           `protobuf:"varint,2,opt,name=peer_uin,json=peerUin,proto3" json:"peer_uin,omitempty"`                  // peer_uin
	MsgCompleted uint32           `protobuf:"varint,3,opt,name=msg_completed,json=msgCompleted,proto3" json:"msg_completed,omitempty"`   // msg_completed
	Msg          []*MsgCommon_Msg `protobuf:"bytes,4,rep,name=msg,proto3" json:"msg,omitempty"`                                          // f425379msg
	UnreadMsgNum uint32           `protobuf:"varint,5,opt,name=unread_msg_num,json=unreadMsgNum,proto3" json:"unread_msg_num,omitempty"` // unread_msg_num
	C2CType      uint32           `protobuf:"varint,8,opt,name=c2c_type,json=c2cType,proto3" json:"c2c_type,omitempty"`                  // c2c_type
	ServiceType  uint32           `protobuf:"varint,9,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`      // service_type
	PbReserve    []byte           `protobuf:"bytes,10,opt,name=pb_reserve,json=pbReserve,proto3" json:"pb_reserve,omitempty"`            // bytes_pb_reserve
	ToTinyId     uint64           `protobuf:"varint,11,opt,name=to_tiny_id,json=toTinyId,proto3" json:"to_tiny_id,omitempty"`            // uint64_to_tiny_id
}

func (x *MsgCommon_UinPairMsg) Reset() {
	*x = MsgCommon_UinPairMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_daemon_message_pb_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCommon_UinPairMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCommon_UinPairMsg) ProtoMessage() {}

func (x *MsgCommon_UinPairMsg) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_message_pb_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgCommon_UinPairMsg.ProtoReflect.Descriptor instead.
func (*MsgCommon_UinPairMsg) Descriptor() ([]byte, []int) {
	return file_daemon_message_pb_common_proto_rawDescGZIP(), []int{0, 12}
}

func (x *MsgCommon_UinPairMsg) GetLastReadTime() uint32 {
	if x != nil {
		return x.LastReadTime
	}
	return 0
}

func (x *MsgCommon_UinPairMsg) GetPeerUin() uint64 {
	if x != nil {
		return x.PeerUin
	}
	return 0
}

func (x *MsgCommon_UinPairMsg) GetMsgCompleted() uint32 {
	if x != nil {
		return x.MsgCompleted
	}
	return 0
}

func (x *MsgCommon_UinPairMsg) GetMsg() []*MsgCommon_Msg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *MsgCommon_UinPairMsg) GetUnreadMsgNum() uint32 {
	if x != nil {
		return x.UnreadMsgNum
	}
	return 0
}

func (x *MsgCommon_UinPairMsg) GetC2CType() uint32 {
	if x != nil {
		return x.C2CType
	}
	return 0
}

func (x *MsgCommon_UinPairMsg) GetServiceType() uint32 {
	if x != nil {
		return x.ServiceType
	}
	return 0
}

func (x *MsgCommon_UinPairMsg) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

func (x *MsgCommon_UinPairMsg) GetToTinyId() uint64 {
	if x != nil {
		return x.ToTinyId
	}
	return 0
}

var File_daemon_message_pb_common_proto protoreflect.FileDescriptor

var file_daemon_message_pb_common_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2f, 0x70, 0x62, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70,
	0x62, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x1b, 0x0a,
	0x09, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x9c, 0x01, 0x0a, 0x0c, 0x41,
	0x70, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x70, 0x70, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x61, 0x70, 0x70, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x70, 0x70, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x61, 0x70, 0x70, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xad, 0x03, 0x0a, 0x0d, 0x43, 0x32,
	0x43, 0x54, 0x6d, 0x70, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x32, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63,
	0x32, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x55, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x73, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x69, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53,
	0x75, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x7b, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6b, 0x67, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6b, 0x67, 0x4e, 0x75,
	0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6b, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6b, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x69, 0x76, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x64, 0x69, 0x76, 0x53, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x75, 0x74,
	0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x1a, 0xc5, 0x01, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x63, 0x75,
	0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73,
	0x73, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x69, 0x73,
	0x63, 0x75, 0x73, 0x73, 0x55, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x75,
	0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x69,
	0x73, 0x63, 0x75, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x53, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x64, 0x69,
	0x73, 0x63, 0x75, 0x73, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xa0,
	0x01, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65,
	0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x75, 0x72, 0x4d, 0x61, 0x78, 0x53,
	0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x75, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x65,
	0x78, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x95, 0x02, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x71, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x53, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xdc, 0x01, 0x0a, 0x03, 0x4d, 0x73,
	0x67, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64,
	0x12, 0x39, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x6d,
	0x73, 0x67, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x49, 0x4d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3c, 0x0a, 0x0d, 0x61, 0x70,
	0x70, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x70,
	0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xba, 0x08, 0x0a, 0x07, 0x4d, 0x73, 0x67,
	0x48, 0x65, 0x61, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x12,
	0x15, 0x0a, 0x06, 0x74, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x74, 0x6f, 0x55, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x32, 0x63, 0x5f, 0x63, 0x6d, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x63, 0x32, 0x63, 0x43, 0x6d, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x73,
	0x67, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x73, 0x67,
	0x53, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6d, 0x73, 0x67, 0x55, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x10, 0x63, 0x32, 0x63, 0x5f, 0x74,
	0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x32,
	0x43, 0x54, 0x6d, 0x70, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x52, 0x0d, 0x63, 0x32, 0x63,
	0x54, 0x6d, 0x70, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x39, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x75, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68,
	0x55, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6e, 0x69, 0x63, 0x6b,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x4e, 0x69, 0x63, 0x6b,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x6d,
	0x75, 0x74, 0x69, 0x6c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x75, 0x74, 0x69, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x48, 0x65, 0x61, 0x64, 0x52,
	0x0e, 0x6d, 0x75, 0x74, 0x69, 0x6c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x48, 0x65, 0x61, 0x64, 0x12,
	0x37, 0x0a, 0x0d, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x63, 0x74, 0x72, 0x6c,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x48, 0x65,
	0x61, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x43, 0x74, 0x72, 0x6c, 0x52, 0x0b, 0x6d, 0x73, 0x67,
	0x49, 0x6e, 0x73, 0x74, 0x43, 0x74, 0x72, 0x6c, 0x12, 0x42, 0x0a, 0x1e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2d, 0x0a, 0x13,
	0x77, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x32, 0x63, 0x5f, 0x6d, 0x73, 0x67, 0x68,
	0x65, 0x61, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x77, 0x73, 0x65, 0x71, 0x49,
	0x6e, 0x43, 0x32, 0x63, 0x4d, 0x73, 0x67, 0x68, 0x65, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x70, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x70, 0x69, 0x64, 0x12,
	0x47, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73,
	0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x78, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x61, 0x75, 0x74, 0x68, 0x53, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x72,
	0x63, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53,
	0x72, 0x63, 0x4d, 0x73, 0x67, 0x1a, 0x51, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x30, 0x78, 0x32, 0x31, 0x30, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x75, 0x62,
	0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x73,
	0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x3e, 0x0a, 0x0e, 0x4d, 0x75, 0x74, 0x69,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x1a, 0xbe, 0x02, 0x0a, 0x0a, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x73, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x6b, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x6b, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77,
	0x5f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x56,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x73, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x62, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x55, 0x72, 0x6c, 0x42, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x55, 0x72, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x1a, 0x30, 0x0a, 0x08, 0x55, 0x69, 0x6e,
	0x32, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x1a, 0xb5, 0x02, 0x0a, 0x0a,
	0x55, 0x69, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d,
	0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x4d, 0x73, 0x67, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x32, 0x63, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x32, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x62, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x62, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x74, 0x69, 0x6e, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x6f, 0x54, 0x69, 0x6e,
	0x79, 0x49, 0x64, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x65, 0x6c, 0x61, 0x70, 0x35, 0x65, 0x2f, 0x70, 0x65, 0x6e, 0x67, 0x75, 0x69, 0x6e,
	0x2f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_daemon_message_pb_common_proto_rawDescOnce sync.Once
	file_daemon_message_pb_common_proto_rawDescData = file_daemon_message_pb_common_proto_rawDesc
)

func file_daemon_message_pb_common_proto_rawDescGZIP() []byte {
	file_daemon_message_pb_common_proto_rawDescOnce.Do(func() {
		file_daemon_message_pb_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_daemon_message_pb_common_proto_rawDescData)
	})
	return file_daemon_message_pb_common_proto_rawDescData
}

var file_daemon_message_pb_common_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_daemon_message_pb_common_proto_goTypes = []interface{}{
	(*MsgCommon)(nil),                 // 0: MsgCommon
	(*MsgCommon_AppShareInfo)(nil),    // 1: MsgCommon.AppShareInfo
	(*MsgCommon_C2CTmpMsgHead)(nil),   // 2: MsgCommon.C2CTmpMsgHead
	(*MsgCommon_ContentHead)(nil),     // 3: MsgCommon.ContentHead
	(*MsgCommon_DiscussInfo)(nil),     // 4: MsgCommon.DiscussInfo
	(*MsgCommon_ExtGroupKeyInfo)(nil), // 5: MsgCommon.ExtGroupKeyInfo
	(*MsgCommon_GroupInfo)(nil),       // 6: MsgCommon.GroupInfo
	(*MsgCommon_Msg)(nil),             // 7: MsgCommon.Msg
	(*MsgCommon_MsgHead)(nil),         // 8: MsgCommon.MsgHead
	(*MsgCommon_MsgType0X210)(nil),    // 9: MsgCommon.MsgType0x210
	(*MsgCommon_MutilTransHead)(nil),  // 10: MsgCommon.MutilTransHead
	(*MsgCommon_PluginInfo)(nil),      // 11: MsgCommon.PluginInfo
	(*MsgCommon_Uin2Nick)(nil),        // 12: MsgCommon.Uin2Nick
	(*MsgCommon_UinPairMsg)(nil),      // 13: MsgCommon.UinPairMsg
	(*IMMsgBody_MsgBody)(nil),         // 14: IMMsgBody.MsgBody
	(*IMMsgHead_InstCtrl)(nil),        // 15: IMMsgHead.InstCtrl
}
var file_daemon_message_pb_common_proto_depIdxs = []int32{
	11, // 0: MsgCommon.AppShareInfo.appshare_resource:type_name -> MsgCommon.PluginInfo
	8,  // 1: MsgCommon.Msg.msg_head:type_name -> MsgCommon.MsgHead
	3,  // 2: MsgCommon.Msg.content_head:type_name -> MsgCommon.ContentHead
	14, // 3: MsgCommon.Msg.msg_body:type_name -> IMMsgBody.MsgBody
	1,  // 4: MsgCommon.Msg.appshare_info:type_name -> MsgCommon.AppShareInfo
	2,  // 5: MsgCommon.MsgHead.c2c_tmp_msg_head:type_name -> MsgCommon.C2CTmpMsgHead
	6,  // 6: MsgCommon.MsgHead.group_info:type_name -> MsgCommon.GroupInfo
	4,  // 7: MsgCommon.MsgHead.discuss_info:type_name -> MsgCommon.DiscussInfo
	10, // 8: MsgCommon.MsgHead.mutiltrans_head:type_name -> MsgCommon.MutilTransHead
	15, // 9: MsgCommon.MsgHead.msg_inst_ctrl:type_name -> IMMsgHead.InstCtrl
	5,  // 10: MsgCommon.MsgHead.ext_group_key_info:type_name -> MsgCommon.ExtGroupKeyInfo
	7,  // 11: MsgCommon.UinPairMsg.msg:type_name -> MsgCommon.Msg
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_daemon_message_pb_common_proto_init() }
func file_daemon_message_pb_common_proto_init() {
	if File_daemon_message_pb_common_proto != nil {
		return
	}
	file_daemon_message_pb_body_proto_init()
	file_daemon_message_pb_head_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_daemon_message_pb_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCommon_AppShareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCommon_C2CTmpMsgHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCommon_ContentHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCommon_DiscussInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCommon_ExtGroupKeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCommon_GroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCommon_Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCommon_MsgHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCommon_MsgType0X210); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCommon_MutilTransHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCommon_PluginInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCommon_Uin2Nick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_daemon_message_pb_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCommon_UinPairMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_daemon_message_pb_common_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_daemon_message_pb_common_proto_goTypes,
		DependencyIndexes: file_daemon_message_pb_common_proto_depIdxs,
		MessageInfos:      file_daemon_message_pb_common_proto_msgTypes,
	}.Build()
	File_daemon_message_pb_common_proto = out.File
	file_daemon_message_pb_common_proto_rawDesc = nil
	file_daemon_message_pb_common_proto_goTypes = nil
	file_daemon_message_pb_common_proto_depIdxs = nil
}
