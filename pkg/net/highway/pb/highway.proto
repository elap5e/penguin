syntax = "proto3";

option go_package = "github.com/elap5e/penguin/pkg/net/highway/pb";

// Message generated by proto-message-gen. DO NOT EDIT.
// source: com.tencent.mobileqq.highway.protocol.CSDataHighwayHead
//
// CSDataHighwayHead is the message type for the CSDataHighwayHead.
message CSDataHighwayHead {
  // C2CCommonExtendinfo is the message type for the C2CCommonExtendinfo.
  message C2CCommonExtendinfo {
    uint32 info_id                         = 1; // uint32_info_id
    FilterExtendinfo msg_filter_extendinfo = 2; // msg_filter_extendinfo
  }
  // DataHighwayHead is the message type for the DataHighwayHead.
  message DataHighwayHead {
    uint32 version     = 1; // uint32_version
    bytes uin          = 2; // bytes_uin
    bytes command      = 3; // bytes_command
    uint32 seq         = 4; // uint32_seq
    uint32 retry_times = 5; // uint32_retry_times
    uint32 appid       = 6; // uint32_appid
    uint32 dataflag    = 7; // uint32_dataflag
    uint32 command_id  = 8; // uint32_command_id
    bytes build_ver    = 9; // bytes_build_ver
    uint32 locale_id   = 10; // locale_id
    uint32 env_id      = 11; // env_id
  }
  // DataHole is the message type for the DataHole.
  message DataHole {
    uint64 begin = 1; // uint64_begin
    uint64 end   = 2; // uint64_end
  }
  // FilterExtendinfo is the message type for the FilterExtendinfo.
  message FilterExtendinfo {
    uint32 filter_flag                          = 1; // uint32_filter_flag
    ImageFilterRequest msg_image_filter_request = 2; // msg_image_filter_request
  }
  // FilterStyle is the message type for the FilterStyle.
  message FilterStyle {
    uint32 style_id  = 1; // style_id
    bytes style_name = 2; // style_name
  }
  // ImageFilterRequest is the message type for the ImageFilterRequest.
  message ImageFilterRequest {
    bytes session_id  = 1; // session_id
    uint32 client_ip  = 2; // client_ip
    uint64 uin        = 3; // uin
    FilterStyle style = 4; // style
    uint32 width      = 5; // width
    uint32 height     = 6; // height
    bytes image_data  = 7; // image_data
  }
  // ImageFilterResponse is the message type for the ImageFilterResponse.
  message ImageFilterResponse {
    int32 ret_code   = 1; // ret_code
    bytes image_data = 2; // image_data
    uint32 cost_time = 3; // cost_time
  }
  // LoginSigHead is the message type for the LoginSigHead.
  message LoginSigHead {
    uint32 loginsig_type = 1; // uint32_loginsig_type
    bytes loginsig       = 2; // bytes_loginsig
  }
  // NewServiceTicket is the message type for the NewServiceTicket.
  message NewServiceTicket {
    bytes signature = 1; // bytes_signature
    bytes ukey      = 2; // bytes_ukey
  }
  // PicInfoExt is the message type for the PicInfoExt.
  message PicInfoExt {
    uint32 pic_width             = 1; // uint32_pic_width
    uint32 pic_height            = 2; // uint32_pic_height
    uint32 pic_flag              = 3; // uint32_pic_flag
    uint32 busi_type             = 4; // uint32_busi_type
    uint32 src_term              = 5; // uint32_src_term
    uint32 plat_type             = 6; // uint32_plat_type
    uint32 net_type              = 7; // uint32_net_type
    uint32 img_type              = 8; // uint32_img_type
    uint32 app_pic_type          = 9; // uint32_app_pic_type
    bytes echo_created_by_server = 10; // bytes_echo_created_by_server
    uint64 qqmeet_guild_id       = 11; // uint64_qqmeet_guild_id
    uint64 qqmeet_channel_id     = 12; // uint64_qqmeet_channel_id
  }
  // PicRspExtInfo is the message type for the PicRspExtInfo.
  message PicRspExtInfo {
    bytes skey        = 1; // bytes_skey
    uint32 client_ip  = 2; // uint32_client_ip
    uint64 up_offset  = 3; // uint64_up_offset
    uint64 block_size = 4; // uint64_block_size
  }
  // QueryHoleRsp is the message type for the QueryHoleRsp.
  message QueryHoleRsp {
    uint32 result               = 1; // uint32_result
    repeated DataHole data_hole = 2; // rpt_data_hole
    bool comp_flag              = 3; // bool_comp_flag
  }
  // ReqDataHighwayHead is the message type for the ReqDataHighwayHead.
  message ReqDataHighwayHead {
    DataHighwayHead msg_basehead    = 1; // msg_basehead
    SegHead msg_seghead             = 2; // msg_seghead
    bytes req_extendinfo            = 3; // bytes_req_extendinfo
    uint64 timestamp                = 4; // uint64_timestamp
    LoginSigHead msg_login_sig_head = 5; // msg_login_sig_head
  }
  // RspBody is the message type for the RspBody.
  message RspBody {
    QueryHoleRsp msg_query_hole_rsp = 1; // msg_query_hole_rsp
  }
  // RspDataHighwayHead is the message type for the RspDataHighwayHead.
  message RspDataHighwayHead {
    DataHighwayHead msg_basehead = 1; // msg_basehead
    SegHead msg_seghead          = 2; // msg_seghead
    uint32 error_code            = 3; // uint32_error_code
    uint32 allow_retry           = 4; // uint32_allow_retry
    uint32 cachecost             = 5; // uint32_cachecost
    uint32 htcost                = 6; // uint32_htcost
    bytes rsp_extendinfo         = 7; // bytes_rsp_extendinfo
    uint64 timestamp             = 8; // uint64_timestamp
    uint64 range                 = 9; // uint64_range
    uint32 is_reset              = 10; // uint32_is_reset
  }
  // SegHead is the message type for the SegHead.
  message SegHead {
    uint32 serviceid      = 1; // uint32_serviceid
    uint64 filesize       = 2; // uint64_filesize
    uint64 dataoffset     = 3; // uint64_dataoffset
    uint32 datalength     = 4; // uint32_datalength
    uint32 rtcode         = 5; // uint32_rtcode
    bytes serviceticket   = 6; // bytes_serviceticket
    uint32 flag           = 7; // uint32_flag
    bytes md5             = 8; // bytes_md5
    bytes file_md5        = 9; // bytes_file_md5
    uint32 cache_addr     = 10; // uint32_cache_addr
    uint32 query_times    = 11; // uint32_query_times
    uint32 update_cacheip = 12; // uint32_update_cacheip
    uint32 cache_port     = 13; // uint32_cache_port
  }
}
